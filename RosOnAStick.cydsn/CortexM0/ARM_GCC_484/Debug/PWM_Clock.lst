ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM_Clock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.PWM_Clock_Start,"ax",%progbits
  18              		.align	2
  19              		.global	PWM_Clock_Start
  20              		.code	16
  21              		.thumb_func
  22              		.type	PWM_Clock_Start, %function
  23              	PWM_Clock_Start:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\PWM_Clock.c"
   1:.\Generated_Source\PSoC4/PWM_Clock.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/PWM_Clock.c **** * File Name: PWM_Clock.c
   3:.\Generated_Source\PSoC4/PWM_Clock.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/PWM_Clock.c **** *
   5:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Description:
   6:.\Generated_Source\PSoC4/PWM_Clock.c **** *   Provides system API for the clocking, interrupts and watchdog timer.
   7:.\Generated_Source\PSoC4/PWM_Clock.c **** *
   8:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Note:
   9:.\Generated_Source\PSoC4/PWM_Clock.c **** *   Documentation of the API's in this file is located in the
  10:.\Generated_Source\PSoC4/PWM_Clock.c **** *   System Reference Guide provided with PSoC Creator.
  11:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  12:.\Generated_Source\PSoC4/PWM_Clock.c **** ********************************************************************************
  13:.\Generated_Source\PSoC4/PWM_Clock.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC4/PWM_Clock.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC4/PWM_Clock.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC4/PWM_Clock.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC4/PWM_Clock.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  19:.\Generated_Source\PSoC4/PWM_Clock.c **** #include <cydevice_trm.h>
  20:.\Generated_Source\PSoC4/PWM_Clock.c **** #include "PWM_Clock.h"
  21:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  22:.\Generated_Source\PSoC4/PWM_Clock.c **** #if defined CYREG_PERI_DIV_CMD
  23:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  24:.\Generated_Source\PSoC4/PWM_Clock.c **** /*******************************************************************************
  25:.\Generated_Source\PSoC4/PWM_Clock.c **** * Function Name: PWM_Clock_StartEx
  26:.\Generated_Source\PSoC4/PWM_Clock.c **** ********************************************************************************
  27:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  28:.\Generated_Source\PSoC4/PWM_Clock.c **** * Summary:
  29:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Starts the clock, aligned to the specified running clock.
  30:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  31:.\Generated_Source\PSoC4/PWM_Clock.c **** * Parameters:
  32:.\Generated_Source\PSoC4/PWM_Clock.c **** *  alignClkDiv:  The divider to which phase alignment is performed when the
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 2


  33:.\Generated_Source\PSoC4/PWM_Clock.c **** *    clock is started.
  34:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  35:.\Generated_Source\PSoC4/PWM_Clock.c **** * Returns:
  36:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
  37:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  38:.\Generated_Source\PSoC4/PWM_Clock.c **** *******************************************************************************/
  39:.\Generated_Source\PSoC4/PWM_Clock.c **** void PWM_Clock_StartEx(uint32 alignClkDiv)
  40:.\Generated_Source\PSoC4/PWM_Clock.c **** {
  41:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* Make sure any previous start command has finished. */
  42:.\Generated_Source\PSoC4/PWM_Clock.c ****     while((PWM_Clock_CMD_REG & PWM_Clock_CMD_ENABLE_MASK) != 0u)
  43:.\Generated_Source\PSoC4/PWM_Clock.c ****     {
  44:.\Generated_Source\PSoC4/PWM_Clock.c ****     }
  45:.\Generated_Source\PSoC4/PWM_Clock.c ****     
  46:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* Specify the target divider and it's alignment divider, and enable. */
  47:.\Generated_Source\PSoC4/PWM_Clock.c ****     PWM_Clock_CMD_REG =
  48:.\Generated_Source\PSoC4/PWM_Clock.c ****         ((uint32)PWM_Clock__DIV_ID << PWM_Clock_CMD_DIV_SHIFT)|
  49:.\Generated_Source\PSoC4/PWM_Clock.c ****         (alignClkDiv << PWM_Clock_CMD_PA_DIV_SHIFT) |
  50:.\Generated_Source\PSoC4/PWM_Clock.c ****         (uint32)PWM_Clock_CMD_ENABLE_MASK;
  51:.\Generated_Source\PSoC4/PWM_Clock.c **** }
  52:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  53:.\Generated_Source\PSoC4/PWM_Clock.c **** #else
  54:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  55:.\Generated_Source\PSoC4/PWM_Clock.c **** /*******************************************************************************
  56:.\Generated_Source\PSoC4/PWM_Clock.c **** * Function Name: PWM_Clock_Start
  57:.\Generated_Source\PSoC4/PWM_Clock.c **** ********************************************************************************
  58:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  59:.\Generated_Source\PSoC4/PWM_Clock.c **** * Summary:
  60:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Starts the clock.
  61:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  62:.\Generated_Source\PSoC4/PWM_Clock.c **** * Parameters:
  63:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
  64:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  65:.\Generated_Source\PSoC4/PWM_Clock.c **** * Returns:
  66:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
  67:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  68:.\Generated_Source\PSoC4/PWM_Clock.c **** *******************************************************************************/
  69:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  70:.\Generated_Source\PSoC4/PWM_Clock.c **** void PWM_Clock_Start(void)
  71:.\Generated_Source\PSoC4/PWM_Clock.c **** {
  26              		.loc 1 71 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 00AF     		add	r7, sp, #0
  33              		.cfi_def_cfa_register 7
  72:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* Set the bit to enable the clock. */
  73:.\Generated_Source\PSoC4/PWM_Clock.c ****     PWM_Clock_ENABLE_REG |= PWM_Clock__ENABLE_MASK;
  34              		.loc 1 73 0
  35 0004 044B     		ldr	r3, .L2
  36 0006 044A     		ldr	r2, .L2
  37 0008 1268     		ldr	r2, [r2]
  38 000a 8021     		mov	r1, #128
  39 000c 0906     		lsl	r1, r1, #24
  40 000e 0A43     		orr	r2, r1
  41 0010 1A60     		str	r2, [r3]
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 3


  74:.\Generated_Source\PSoC4/PWM_Clock.c **** }
  42              		.loc 1 74 0
  43 0012 BD46     		mov	sp, r7
  44              		@ sp needed
  45 0014 80BD     		pop	{r7, pc}
  46              	.L3:
  47 0016 C046     		.align	2
  48              	.L2:
  49 0018 84000240 		.word	1073873028
  50              		.cfi_endproc
  51              	.LFE0:
  52              		.size	PWM_Clock_Start, .-PWM_Clock_Start
  53              		.section	.text.PWM_Clock_Stop,"ax",%progbits
  54              		.align	2
  55              		.global	PWM_Clock_Stop
  56              		.code	16
  57              		.thumb_func
  58              		.type	PWM_Clock_Stop, %function
  59              	PWM_Clock_Stop:
  60              	.LFB1:
  75:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  76:.\Generated_Source\PSoC4/PWM_Clock.c **** #endif /* CYREG_PERI_DIV_CMD */
  77:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  78:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  79:.\Generated_Source\PSoC4/PWM_Clock.c **** /*******************************************************************************
  80:.\Generated_Source\PSoC4/PWM_Clock.c **** * Function Name: PWM_Clock_Stop
  81:.\Generated_Source\PSoC4/PWM_Clock.c **** ********************************************************************************
  82:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  83:.\Generated_Source\PSoC4/PWM_Clock.c **** * Summary:
  84:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Stops the clock and returns immediately. This API does not require the
  85:.\Generated_Source\PSoC4/PWM_Clock.c **** *  source clock to be running but may return before the hardware is actually
  86:.\Generated_Source\PSoC4/PWM_Clock.c **** *  disabled.
  87:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  88:.\Generated_Source\PSoC4/PWM_Clock.c **** * Parameters:
  89:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
  90:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  91:.\Generated_Source\PSoC4/PWM_Clock.c **** * Returns:
  92:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
  93:.\Generated_Source\PSoC4/PWM_Clock.c **** *
  94:.\Generated_Source\PSoC4/PWM_Clock.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/PWM_Clock.c **** void PWM_Clock_Stop(void)
  96:.\Generated_Source\PSoC4/PWM_Clock.c **** {
  61              		.loc 1 96 0
  62              		.cfi_startproc
  63 0000 80B5     		push	{r7, lr}
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/PWM_Clock.c **** #if defined CYREG_PERI_DIV_CMD
  98:.\Generated_Source\PSoC4/PWM_Clock.c **** 
  99:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* Make sure any previous start command has finished. */
 100:.\Generated_Source\PSoC4/PWM_Clock.c ****     while((PWM_Clock_CMD_REG & PWM_Clock_CMD_ENABLE_MASK) != 0u)
 101:.\Generated_Source\PSoC4/PWM_Clock.c ****     {
 102:.\Generated_Source\PSoC4/PWM_Clock.c ****     }
 103:.\Generated_Source\PSoC4/PWM_Clock.c ****     
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 4


 104:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* Specify the target divider and it's alignment divider, and disable. */
 105:.\Generated_Source\PSoC4/PWM_Clock.c ****     PWM_Clock_CMD_REG =
 106:.\Generated_Source\PSoC4/PWM_Clock.c ****         ((uint32)PWM_Clock__DIV_ID << PWM_Clock_CMD_DIV_SHIFT)|
 107:.\Generated_Source\PSoC4/PWM_Clock.c ****         ((uint32)PWM_Clock_CMD_DISABLE_MASK);
 108:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 109:.\Generated_Source\PSoC4/PWM_Clock.c **** #else
 110:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 111:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* Clear the bit to disable the clock. */
 112:.\Generated_Source\PSoC4/PWM_Clock.c ****     PWM_Clock_ENABLE_REG &= (uint32)(~PWM_Clock__ENABLE_MASK);
  69              		.loc 1 112 0
  70 0004 034B     		ldr	r3, .L5
  71 0006 034A     		ldr	r2, .L5
  72 0008 1268     		ldr	r2, [r2]
  73 000a 5200     		lsl	r2, r2, #1
  74 000c 5208     		lsr	r2, r2, #1
  75 000e 1A60     		str	r2, [r3]
 113:.\Generated_Source\PSoC4/PWM_Clock.c ****     
 114:.\Generated_Source\PSoC4/PWM_Clock.c **** #endif /* CYREG_PERI_DIV_CMD */
 115:.\Generated_Source\PSoC4/PWM_Clock.c **** }
  76              		.loc 1 115 0
  77 0010 BD46     		mov	sp, r7
  78              		@ sp needed
  79 0012 80BD     		pop	{r7, pc}
  80              	.L6:
  81              		.align	2
  82              	.L5:
  83 0014 84000240 		.word	1073873028
  84              		.cfi_endproc
  85              	.LFE1:
  86              		.size	PWM_Clock_Stop, .-PWM_Clock_Stop
  87              		.section	.text.PWM_Clock_SetFractionalDividerRegister,"ax",%progbits
  88              		.align	2
  89              		.global	PWM_Clock_SetFractionalDividerRegister
  90              		.code	16
  91              		.thumb_func
  92              		.type	PWM_Clock_SetFractionalDividerRegister, %function
  93              	PWM_Clock_SetFractionalDividerRegister:
  94              	.LFB2:
 116:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 117:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 118:.\Generated_Source\PSoC4/PWM_Clock.c **** /*******************************************************************************
 119:.\Generated_Source\PSoC4/PWM_Clock.c **** * Function Name: PWM_Clock_SetFractionalDividerRegister
 120:.\Generated_Source\PSoC4/PWM_Clock.c **** ********************************************************************************
 121:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 122:.\Generated_Source\PSoC4/PWM_Clock.c **** * Summary:
 123:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Modifies the clock divider and the fractional divider.
 124:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 125:.\Generated_Source\PSoC4/PWM_Clock.c **** * Parameters:
 126:.\Generated_Source\PSoC4/PWM_Clock.c **** *  clkDivider:  Divider register value (0-65535). This value is NOT the
 127:.\Generated_Source\PSoC4/PWM_Clock.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 128:.\Generated_Source\PSoC4/PWM_Clock.c **** *    to divide the clock by 2, this parameter should be set to 1.
 129:.\Generated_Source\PSoC4/PWM_Clock.c **** *  fracDivider:  Fractional Divider register value (0-31).
 130:.\Generated_Source\PSoC4/PWM_Clock.c **** * Returns:
 131:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
 132:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 133:.\Generated_Source\PSoC4/PWM_Clock.c **** *******************************************************************************/
 134:.\Generated_Source\PSoC4/PWM_Clock.c **** void PWM_Clock_SetFractionalDividerRegister(uint16 clkDivider, uint8 clkFractional)
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 5


 135:.\Generated_Source\PSoC4/PWM_Clock.c **** {
  95              		.loc 1 135 0
  96              		.cfi_startproc
  97 0000 80B5     		push	{r7, lr}
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 7, -8
 100              		.cfi_offset 14, -4
 101 0002 84B0     		sub	sp, sp, #16
 102              		.cfi_def_cfa_offset 24
 103 0004 00AF     		add	r7, sp, #0
 104              		.cfi_def_cfa_register 7
 105 0006 0A1C     		mov	r2, r1
 106 0008 BB1D     		add	r3, r7, #6
 107 000a 011C     		add	r1, r0, #0
 108 000c 1980     		strh	r1, [r3]
 109 000e 7B1D     		add	r3, r7, #5
 110 0010 1A70     		strb	r2, [r3]
 136:.\Generated_Source\PSoC4/PWM_Clock.c ****     uint32 maskVal;
 137:.\Generated_Source\PSoC4/PWM_Clock.c ****     uint32 regVal;
 138:.\Generated_Source\PSoC4/PWM_Clock.c ****     
 139:.\Generated_Source\PSoC4/PWM_Clock.c **** #if defined (PWM_Clock__FRAC_MASK) || defined (CYREG_PERI_DIV_CMD)
 140:.\Generated_Source\PSoC4/PWM_Clock.c ****     
 141:.\Generated_Source\PSoC4/PWM_Clock.c **** 	/* get all but divider bits */
 142:.\Generated_Source\PSoC4/PWM_Clock.c ****     maskVal = PWM_Clock_DIV_REG & 
 143:.\Generated_Source\PSoC4/PWM_Clock.c ****                     (uint32)(~(uint32)(PWM_Clock_DIV_INT_MASK | PWM_Clock_DIV_FRAC_MASK)); 
 144:.\Generated_Source\PSoC4/PWM_Clock.c **** 	/* combine mask and new divider vals into 32-bit value */
 145:.\Generated_Source\PSoC4/PWM_Clock.c ****     regVal = maskVal |
 146:.\Generated_Source\PSoC4/PWM_Clock.c ****         ((uint32)((uint32)clkDivider <<  PWM_Clock_DIV_INT_SHIFT) & PWM_Clock_DIV_INT_MASK) |
 147:.\Generated_Source\PSoC4/PWM_Clock.c ****         ((uint32)((uint32)clkFractional << PWM_Clock_DIV_FRAC_SHIFT) & PWM_Clock_DIV_FRAC_MASK);
 148:.\Generated_Source\PSoC4/PWM_Clock.c ****     
 149:.\Generated_Source\PSoC4/PWM_Clock.c **** #else
 150:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* get all but integer divider bits */
 151:.\Generated_Source\PSoC4/PWM_Clock.c ****     maskVal = PWM_Clock_DIV_REG & (uint32)(~(uint32)PWM_Clock__DIVIDER_MASK);
 111              		.loc 1 151 0
 112 0012 084B     		ldr	r3, .L8
 113 0014 1B68     		ldr	r3, [r3]
 114 0016 1B0C     		lsr	r3, r3, #16
 115 0018 1B04     		lsl	r3, r3, #16
 116 001a FB60     		str	r3, [r7, #12]
 152:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* combine mask and new divider val into 32-bit value */
 153:.\Generated_Source\PSoC4/PWM_Clock.c ****     regVal = clkDivider | maskVal;
 117              		.loc 1 153 0
 118 001c BB1D     		add	r3, r7, #6
 119 001e 1A88     		ldrh	r2, [r3]
 120 0020 FB68     		ldr	r3, [r7, #12]
 121 0022 1343     		orr	r3, r2
 122 0024 BB60     		str	r3, [r7, #8]
 154:.\Generated_Source\PSoC4/PWM_Clock.c ****     
 155:.\Generated_Source\PSoC4/PWM_Clock.c **** #endif /* PWM_Clock__FRAC_MASK || CYREG_PERI_DIV_CMD */
 156:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 157:.\Generated_Source\PSoC4/PWM_Clock.c ****     PWM_Clock_DIV_REG = regVal;
 123              		.loc 1 157 0
 124 0026 034B     		ldr	r3, .L8
 125 0028 BA68     		ldr	r2, [r7, #8]
 126 002a 1A60     		str	r2, [r3]
 158:.\Generated_Source\PSoC4/PWM_Clock.c **** }
 127              		.loc 1 158 0
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 6


 128 002c BD46     		mov	sp, r7
 129 002e 04B0     		add	sp, sp, #16
 130              		@ sp needed
 131 0030 80BD     		pop	{r7, pc}
 132              	.L9:
 133 0032 C046     		.align	2
 134              	.L8:
 135 0034 84000240 		.word	1073873028
 136              		.cfi_endproc
 137              	.LFE2:
 138              		.size	PWM_Clock_SetFractionalDividerRegister, .-PWM_Clock_SetFractionalDividerRegister
 139              		.section	.text.PWM_Clock_GetDividerRegister,"ax",%progbits
 140              		.align	2
 141              		.global	PWM_Clock_GetDividerRegister
 142              		.code	16
 143              		.thumb_func
 144              		.type	PWM_Clock_GetDividerRegister, %function
 145              	PWM_Clock_GetDividerRegister:
 146              	.LFB3:
 159:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 160:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 161:.\Generated_Source\PSoC4/PWM_Clock.c **** /*******************************************************************************
 162:.\Generated_Source\PSoC4/PWM_Clock.c **** * Function Name: PWM_Clock_GetDividerRegister
 163:.\Generated_Source\PSoC4/PWM_Clock.c **** ********************************************************************************
 164:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 165:.\Generated_Source\PSoC4/PWM_Clock.c **** * Summary:
 166:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Gets the clock divider register value.
 167:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 168:.\Generated_Source\PSoC4/PWM_Clock.c **** * Parameters:
 169:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
 170:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 171:.\Generated_Source\PSoC4/PWM_Clock.c **** * Returns:
 172:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 173:.\Generated_Source\PSoC4/PWM_Clock.c **** *  divide by 2, the return value will be 1.
 174:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 175:.\Generated_Source\PSoC4/PWM_Clock.c **** *******************************************************************************/
 176:.\Generated_Source\PSoC4/PWM_Clock.c **** uint16 PWM_Clock_GetDividerRegister(void)
 177:.\Generated_Source\PSoC4/PWM_Clock.c **** {
 147              		.loc 1 177 0
 148              		.cfi_startproc
 149 0000 80B5     		push	{r7, lr}
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 00AF     		add	r7, sp, #0
 154              		.cfi_def_cfa_register 7
 178:.\Generated_Source\PSoC4/PWM_Clock.c ****     return (uint16)((PWM_Clock_DIV_REG & PWM_Clock_DIV_INT_MASK)
 155              		.loc 1 178 0
 156 0004 024B     		ldr	r3, .L12
 157 0006 1B68     		ldr	r3, [r3]
 158 0008 9BB2     		uxth	r3, r3
 179:.\Generated_Source\PSoC4/PWM_Clock.c ****         >> PWM_Clock_DIV_INT_SHIFT);
 180:.\Generated_Source\PSoC4/PWM_Clock.c **** }
 159              		.loc 1 180 0
 160 000a 181C     		mov	r0, r3
 161 000c BD46     		mov	sp, r7
 162              		@ sp needed
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 7


 163 000e 80BD     		pop	{r7, pc}
 164              	.L13:
 165              		.align	2
 166              	.L12:
 167 0010 84000240 		.word	1073873028
 168              		.cfi_endproc
 169              	.LFE3:
 170              		.size	PWM_Clock_GetDividerRegister, .-PWM_Clock_GetDividerRegister
 171              		.section	.text.PWM_Clock_GetFractionalDividerRegister,"ax",%progbits
 172              		.align	2
 173              		.global	PWM_Clock_GetFractionalDividerRegister
 174              		.code	16
 175              		.thumb_func
 176              		.type	PWM_Clock_GetFractionalDividerRegister, %function
 177              	PWM_Clock_GetFractionalDividerRegister:
 178              	.LFB4:
 181:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 182:.\Generated_Source\PSoC4/PWM_Clock.c **** 
 183:.\Generated_Source\PSoC4/PWM_Clock.c **** /*******************************************************************************
 184:.\Generated_Source\PSoC4/PWM_Clock.c **** * Function Name: PWM_Clock_GetFractionalDividerRegister
 185:.\Generated_Source\PSoC4/PWM_Clock.c **** ********************************************************************************
 186:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 187:.\Generated_Source\PSoC4/PWM_Clock.c **** * Summary:
 188:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Gets the clock fractional divider register value.
 189:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 190:.\Generated_Source\PSoC4/PWM_Clock.c **** * Parameters:
 191:.\Generated_Source\PSoC4/PWM_Clock.c **** *  None
 192:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 193:.\Generated_Source\PSoC4/PWM_Clock.c **** * Returns:
 194:.\Generated_Source\PSoC4/PWM_Clock.c **** *  Fractional Divide value of the clock
 195:.\Generated_Source\PSoC4/PWM_Clock.c **** *  0 if the fractional divider is not in use.
 196:.\Generated_Source\PSoC4/PWM_Clock.c **** *
 197:.\Generated_Source\PSoC4/PWM_Clock.c **** *******************************************************************************/
 198:.\Generated_Source\PSoC4/PWM_Clock.c **** uint8 PWM_Clock_GetFractionalDividerRegister(void)
 199:.\Generated_Source\PSoC4/PWM_Clock.c **** {
 179              		.loc 1 199 0
 180              		.cfi_startproc
 181 0000 80B5     		push	{r7, lr}
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 00AF     		add	r7, sp, #0
 186              		.cfi_def_cfa_register 7
 200:.\Generated_Source\PSoC4/PWM_Clock.c **** #if defined (PWM_Clock__FRAC_MASK)
 201:.\Generated_Source\PSoC4/PWM_Clock.c ****     /* return fractional divider bits */
 202:.\Generated_Source\PSoC4/PWM_Clock.c ****     return (uint8)((PWM_Clock_DIV_REG & PWM_Clock_DIV_FRAC_MASK)
 203:.\Generated_Source\PSoC4/PWM_Clock.c ****         >> PWM_Clock_DIV_FRAC_SHIFT);
 204:.\Generated_Source\PSoC4/PWM_Clock.c **** #else
 205:.\Generated_Source\PSoC4/PWM_Clock.c ****     return 0u;
 187              		.loc 1 205 0
 188 0004 0023     		mov	r3, #0
 206:.\Generated_Source\PSoC4/PWM_Clock.c **** #endif /* PWM_Clock__FRAC_MASK */
 207:.\Generated_Source\PSoC4/PWM_Clock.c **** }
 189              		.loc 1 207 0
 190 0006 181C     		mov	r0, r3
 191 0008 BD46     		mov	sp, r7
 192              		@ sp needed
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 8


 193 000a 80BD     		pop	{r7, pc}
 194              		.cfi_endproc
 195              	.LFE4:
 196              		.size	PWM_Clock_GetFractionalDividerRegister, .-PWM_Clock_GetFractionalDividerRegister
 197              		.text
 198              	.Letext0:
 199              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 200              		.section	.debug_info,"",%progbits
 201              	.Ldebug_info0:
 202 0000 48010000 		.4byte	0x148
 203 0004 0400     		.2byte	0x4
 204 0006 00000000 		.4byte	.Ldebug_abbrev0
 205 000a 04       		.byte	0x4
 206 000b 01       		.uleb128 0x1
 207 000c DF010000 		.4byte	.LASF24
 208 0010 01       		.byte	0x1
 209 0011 95010000 		.4byte	.LASF25
 210 0015 00000000 		.4byte	.LASF26
 211 0019 00000000 		.4byte	.Ldebug_ranges0+0
 212 001d 00000000 		.4byte	0
 213 0021 00000000 		.4byte	.Ldebug_line0
 214 0025 02       		.uleb128 0x2
 215 0026 01       		.byte	0x1
 216 0027 06       		.byte	0x6
 217 0028 D3010000 		.4byte	.LASF0
 218 002c 02       		.uleb128 0x2
 219 002d 01       		.byte	0x1
 220 002e 08       		.byte	0x8
 221 002f BF000000 		.4byte	.LASF1
 222 0033 02       		.uleb128 0x2
 223 0034 02       		.byte	0x2
 224 0035 05       		.byte	0x5
 225 0036 BA010000 		.4byte	.LASF2
 226 003a 02       		.uleb128 0x2
 227 003b 02       		.byte	0x2
 228 003c 07       		.byte	0x7
 229 003d DF000000 		.4byte	.LASF3
 230 0041 02       		.uleb128 0x2
 231 0042 04       		.byte	0x4
 232 0043 05       		.byte	0x5
 233 0044 CA010000 		.4byte	.LASF4
 234 0048 02       		.uleb128 0x2
 235 0049 04       		.byte	0x4
 236 004a 07       		.byte	0x7
 237 004b CD000000 		.4byte	.LASF5
 238 004f 02       		.uleb128 0x2
 239 0050 08       		.byte	0x8
 240 0051 05       		.byte	0x5
 241 0052 82010000 		.4byte	.LASF6
 242 0056 02       		.uleb128 0x2
 243 0057 08       		.byte	0x8
 244 0058 07       		.byte	0x7
 245 0059 6B010000 		.4byte	.LASF7
 246 005d 03       		.uleb128 0x3
 247 005e 04       		.byte	0x4
 248 005f 05       		.byte	0x5
 249 0060 696E7400 		.ascii	"int\000"
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 9


 250 0064 02       		.uleb128 0x2
 251 0065 04       		.byte	0x4
 252 0066 07       		.byte	0x7
 253 0067 5E010000 		.4byte	.LASF8
 254 006b 04       		.uleb128 0x4
 255 006c C4010000 		.4byte	.LASF9
 256 0070 02       		.byte	0x2
 257 0071 5B       		.byte	0x5b
 258 0072 2C000000 		.4byte	0x2c
 259 0076 04       		.uleb128 0x4
 260 0077 50010000 		.4byte	.LASF10
 261 007b 02       		.byte	0x2
 262 007c 5C       		.byte	0x5c
 263 007d 3A000000 		.4byte	0x3a
 264 0081 04       		.uleb128 0x4
 265 0082 57010000 		.4byte	.LASF11
 266 0086 02       		.byte	0x2
 267 0087 5D       		.byte	0x5d
 268 0088 48000000 		.4byte	0x48
 269 008c 02       		.uleb128 0x2
 270 008d 04       		.byte	0x4
 271 008e 04       		.byte	0x4
 272 008f B9000000 		.4byte	.LASF12
 273 0093 02       		.uleb128 0x2
 274 0094 08       		.byte	0x8
 275 0095 04       		.byte	0x4
 276 0096 34010000 		.4byte	.LASF13
 277 009a 02       		.uleb128 0x2
 278 009b 01       		.byte	0x1
 279 009c 08       		.byte	0x8
 280 009d 90010000 		.4byte	.LASF14
 281 00a1 04       		.uleb128 0x4
 282 00a2 58000000 		.4byte	.LASF15
 283 00a6 02       		.byte	0x2
 284 00a7 F2       		.byte	0xf2
 285 00a8 AC000000 		.4byte	0xac
 286 00ac 05       		.uleb128 0x5
 287 00ad 81000000 		.4byte	0x81
 288 00b1 06       		.uleb128 0x6
 289 00b2 F2000000 		.4byte	.LASF16
 290 00b6 01       		.byte	0x1
 291 00b7 46       		.byte	0x46
 292 00b8 00000000 		.4byte	.LFB0
 293 00bc 1C000000 		.4byte	.LFE0-.LFB0
 294 00c0 01       		.uleb128 0x1
 295 00c1 9C       		.byte	0x9c
 296 00c2 06       		.uleb128 0x6
 297 00c3 66000000 		.4byte	.LASF17
 298 00c7 01       		.byte	0x1
 299 00c8 5F       		.byte	0x5f
 300 00c9 00000000 		.4byte	.LFB1
 301 00cd 18000000 		.4byte	.LFE1-.LFB1
 302 00d1 01       		.uleb128 0x1
 303 00d2 9C       		.byte	0x9c
 304 00d3 07       		.uleb128 0x7
 305 00d4 0D010000 		.4byte	.LASF27
 306 00d8 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 10


 307 00d9 86       		.byte	0x86
 308 00da 00000000 		.4byte	.LFB2
 309 00de 38000000 		.4byte	.LFE2-.LFB2
 310 00e2 01       		.uleb128 0x1
 311 00e3 9C       		.byte	0x9c
 312 00e4 21010000 		.4byte	0x121
 313 00e8 08       		.uleb128 0x8
 314 00e9 02010000 		.4byte	.LASF18
 315 00ed 01       		.byte	0x1
 316 00ee 86       		.byte	0x86
 317 00ef 76000000 		.4byte	0x76
 318 00f3 02       		.uleb128 0x2
 319 00f4 91       		.byte	0x91
 320 00f5 6E       		.sleb128 -18
 321 00f6 08       		.uleb128 0x8
 322 00f7 42010000 		.4byte	.LASF19
 323 00fb 01       		.byte	0x1
 324 00fc 86       		.byte	0x86
 325 00fd 6B000000 		.4byte	0x6b
 326 0101 02       		.uleb128 0x2
 327 0102 91       		.byte	0x91
 328 0103 6D       		.sleb128 -19
 329 0104 09       		.uleb128 0x9
 330 0105 5E000000 		.4byte	.LASF20
 331 0109 01       		.byte	0x1
 332 010a 88       		.byte	0x88
 333 010b 81000000 		.4byte	0x81
 334 010f 02       		.uleb128 0x2
 335 0110 91       		.byte	0x91
 336 0111 74       		.sleb128 -12
 337 0112 09       		.uleb128 0x9
 338 0113 3B010000 		.4byte	.LASF21
 339 0117 01       		.byte	0x1
 340 0118 89       		.byte	0x89
 341 0119 81000000 		.4byte	0x81
 342 011d 02       		.uleb128 0x2
 343 011e 91       		.byte	0x91
 344 011f 70       		.sleb128 -16
 345 0120 00       		.byte	0
 346 0121 0A       		.uleb128 0xa
 347 0122 9C000000 		.4byte	.LASF22
 348 0126 01       		.byte	0x1
 349 0127 B0       		.byte	0xb0
 350 0128 76000000 		.4byte	0x76
 351 012c 00000000 		.4byte	.LFB3
 352 0130 14000000 		.4byte	.LFE3-.LFB3
 353 0134 01       		.uleb128 0x1
 354 0135 9C       		.byte	0x9c
 355 0136 0A       		.uleb128 0xa
 356 0137 75000000 		.4byte	.LASF23
 357 013b 01       		.byte	0x1
 358 013c C6       		.byte	0xc6
 359 013d 6B000000 		.4byte	0x6b
 360 0141 00000000 		.4byte	.LFB4
 361 0145 0C000000 		.4byte	.LFE4-.LFB4
 362 0149 01       		.uleb128 0x1
 363 014a 9C       		.byte	0x9c
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 11


 364 014b 00       		.byte	0
 365              		.section	.debug_abbrev,"",%progbits
 366              	.Ldebug_abbrev0:
 367 0000 01       		.uleb128 0x1
 368 0001 11       		.uleb128 0x11
 369 0002 01       		.byte	0x1
 370 0003 25       		.uleb128 0x25
 371 0004 0E       		.uleb128 0xe
 372 0005 13       		.uleb128 0x13
 373 0006 0B       		.uleb128 0xb
 374 0007 03       		.uleb128 0x3
 375 0008 0E       		.uleb128 0xe
 376 0009 1B       		.uleb128 0x1b
 377 000a 0E       		.uleb128 0xe
 378 000b 55       		.uleb128 0x55
 379 000c 17       		.uleb128 0x17
 380 000d 11       		.uleb128 0x11
 381 000e 01       		.uleb128 0x1
 382 000f 10       		.uleb128 0x10
 383 0010 17       		.uleb128 0x17
 384 0011 00       		.byte	0
 385 0012 00       		.byte	0
 386 0013 02       		.uleb128 0x2
 387 0014 24       		.uleb128 0x24
 388 0015 00       		.byte	0
 389 0016 0B       		.uleb128 0xb
 390 0017 0B       		.uleb128 0xb
 391 0018 3E       		.uleb128 0x3e
 392 0019 0B       		.uleb128 0xb
 393 001a 03       		.uleb128 0x3
 394 001b 0E       		.uleb128 0xe
 395 001c 00       		.byte	0
 396 001d 00       		.byte	0
 397 001e 03       		.uleb128 0x3
 398 001f 24       		.uleb128 0x24
 399 0020 00       		.byte	0
 400 0021 0B       		.uleb128 0xb
 401 0022 0B       		.uleb128 0xb
 402 0023 3E       		.uleb128 0x3e
 403 0024 0B       		.uleb128 0xb
 404 0025 03       		.uleb128 0x3
 405 0026 08       		.uleb128 0x8
 406 0027 00       		.byte	0
 407 0028 00       		.byte	0
 408 0029 04       		.uleb128 0x4
 409 002a 16       		.uleb128 0x16
 410 002b 00       		.byte	0
 411 002c 03       		.uleb128 0x3
 412 002d 0E       		.uleb128 0xe
 413 002e 3A       		.uleb128 0x3a
 414 002f 0B       		.uleb128 0xb
 415 0030 3B       		.uleb128 0x3b
 416 0031 0B       		.uleb128 0xb
 417 0032 49       		.uleb128 0x49
 418 0033 13       		.uleb128 0x13
 419 0034 00       		.byte	0
 420 0035 00       		.byte	0
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 12


 421 0036 05       		.uleb128 0x5
 422 0037 35       		.uleb128 0x35
 423 0038 00       		.byte	0
 424 0039 49       		.uleb128 0x49
 425 003a 13       		.uleb128 0x13
 426 003b 00       		.byte	0
 427 003c 00       		.byte	0
 428 003d 06       		.uleb128 0x6
 429 003e 2E       		.uleb128 0x2e
 430 003f 00       		.byte	0
 431 0040 3F       		.uleb128 0x3f
 432 0041 19       		.uleb128 0x19
 433 0042 03       		.uleb128 0x3
 434 0043 0E       		.uleb128 0xe
 435 0044 3A       		.uleb128 0x3a
 436 0045 0B       		.uleb128 0xb
 437 0046 3B       		.uleb128 0x3b
 438 0047 0B       		.uleb128 0xb
 439 0048 27       		.uleb128 0x27
 440 0049 19       		.uleb128 0x19
 441 004a 11       		.uleb128 0x11
 442 004b 01       		.uleb128 0x1
 443 004c 12       		.uleb128 0x12
 444 004d 06       		.uleb128 0x6
 445 004e 40       		.uleb128 0x40
 446 004f 18       		.uleb128 0x18
 447 0050 9742     		.uleb128 0x2117
 448 0052 19       		.uleb128 0x19
 449 0053 00       		.byte	0
 450 0054 00       		.byte	0
 451 0055 07       		.uleb128 0x7
 452 0056 2E       		.uleb128 0x2e
 453 0057 01       		.byte	0x1
 454 0058 3F       		.uleb128 0x3f
 455 0059 19       		.uleb128 0x19
 456 005a 03       		.uleb128 0x3
 457 005b 0E       		.uleb128 0xe
 458 005c 3A       		.uleb128 0x3a
 459 005d 0B       		.uleb128 0xb
 460 005e 3B       		.uleb128 0x3b
 461 005f 0B       		.uleb128 0xb
 462 0060 27       		.uleb128 0x27
 463 0061 19       		.uleb128 0x19
 464 0062 11       		.uleb128 0x11
 465 0063 01       		.uleb128 0x1
 466 0064 12       		.uleb128 0x12
 467 0065 06       		.uleb128 0x6
 468 0066 40       		.uleb128 0x40
 469 0067 18       		.uleb128 0x18
 470 0068 9742     		.uleb128 0x2117
 471 006a 19       		.uleb128 0x19
 472 006b 01       		.uleb128 0x1
 473 006c 13       		.uleb128 0x13
 474 006d 00       		.byte	0
 475 006e 00       		.byte	0
 476 006f 08       		.uleb128 0x8
 477 0070 05       		.uleb128 0x5
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 13


 478 0071 00       		.byte	0
 479 0072 03       		.uleb128 0x3
 480 0073 0E       		.uleb128 0xe
 481 0074 3A       		.uleb128 0x3a
 482 0075 0B       		.uleb128 0xb
 483 0076 3B       		.uleb128 0x3b
 484 0077 0B       		.uleb128 0xb
 485 0078 49       		.uleb128 0x49
 486 0079 13       		.uleb128 0x13
 487 007a 02       		.uleb128 0x2
 488 007b 18       		.uleb128 0x18
 489 007c 00       		.byte	0
 490 007d 00       		.byte	0
 491 007e 09       		.uleb128 0x9
 492 007f 34       		.uleb128 0x34
 493 0080 00       		.byte	0
 494 0081 03       		.uleb128 0x3
 495 0082 0E       		.uleb128 0xe
 496 0083 3A       		.uleb128 0x3a
 497 0084 0B       		.uleb128 0xb
 498 0085 3B       		.uleb128 0x3b
 499 0086 0B       		.uleb128 0xb
 500 0087 49       		.uleb128 0x49
 501 0088 13       		.uleb128 0x13
 502 0089 02       		.uleb128 0x2
 503 008a 18       		.uleb128 0x18
 504 008b 00       		.byte	0
 505 008c 00       		.byte	0
 506 008d 0A       		.uleb128 0xa
 507 008e 2E       		.uleb128 0x2e
 508 008f 00       		.byte	0
 509 0090 3F       		.uleb128 0x3f
 510 0091 19       		.uleb128 0x19
 511 0092 03       		.uleb128 0x3
 512 0093 0E       		.uleb128 0xe
 513 0094 3A       		.uleb128 0x3a
 514 0095 0B       		.uleb128 0xb
 515 0096 3B       		.uleb128 0x3b
 516 0097 0B       		.uleb128 0xb
 517 0098 27       		.uleb128 0x27
 518 0099 19       		.uleb128 0x19
 519 009a 49       		.uleb128 0x49
 520 009b 13       		.uleb128 0x13
 521 009c 11       		.uleb128 0x11
 522 009d 01       		.uleb128 0x1
 523 009e 12       		.uleb128 0x12
 524 009f 06       		.uleb128 0x6
 525 00a0 40       		.uleb128 0x40
 526 00a1 18       		.uleb128 0x18
 527 00a2 9742     		.uleb128 0x2117
 528 00a4 19       		.uleb128 0x19
 529 00a5 00       		.byte	0
 530 00a6 00       		.byte	0
 531 00a7 00       		.byte	0
 532              		.section	.debug_aranges,"",%progbits
 533 0000 3C000000 		.4byte	0x3c
 534 0004 0200     		.2byte	0x2
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 14


 535 0006 00000000 		.4byte	.Ldebug_info0
 536 000a 04       		.byte	0x4
 537 000b 00       		.byte	0
 538 000c 0000     		.2byte	0
 539 000e 0000     		.2byte	0
 540 0010 00000000 		.4byte	.LFB0
 541 0014 1C000000 		.4byte	.LFE0-.LFB0
 542 0018 00000000 		.4byte	.LFB1
 543 001c 18000000 		.4byte	.LFE1-.LFB1
 544 0020 00000000 		.4byte	.LFB2
 545 0024 38000000 		.4byte	.LFE2-.LFB2
 546 0028 00000000 		.4byte	.LFB3
 547 002c 14000000 		.4byte	.LFE3-.LFB3
 548 0030 00000000 		.4byte	.LFB4
 549 0034 0C000000 		.4byte	.LFE4-.LFB4
 550 0038 00000000 		.4byte	0
 551 003c 00000000 		.4byte	0
 552              		.section	.debug_ranges,"",%progbits
 553              	.Ldebug_ranges0:
 554 0000 00000000 		.4byte	.LFB0
 555 0004 1C000000 		.4byte	.LFE0
 556 0008 00000000 		.4byte	.LFB1
 557 000c 18000000 		.4byte	.LFE1
 558 0010 00000000 		.4byte	.LFB2
 559 0014 38000000 		.4byte	.LFE2
 560 0018 00000000 		.4byte	.LFB3
 561 001c 14000000 		.4byte	.LFE3
 562 0020 00000000 		.4byte	.LFB4
 563 0024 0C000000 		.4byte	.LFE4
 564 0028 00000000 		.4byte	0
 565 002c 00000000 		.4byte	0
 566              		.section	.debug_line,"",%progbits
 567              	.Ldebug_line0:
 568 0000 AE000000 		.section	.debug_str,"MS",%progbits,1
 568      02004800 
 568      00000201 
 568      FB0E0D00 
 568      01010101 
 569              	.LASF26:
 570 0000 433A5C44 		.ascii	"C:\\Documents and Settings\\Chuck\\My Documents\\PS"
 570      6F63756D 
 570      656E7473 
 570      20616E64 
 570      20536574 
 571 002f 6F432043 		.ascii	"oC Creator\\RosOnAStick\\RosOnAStick.cydsn\000"
 571      72656174 
 571      6F725C52 
 571      6F734F6E 
 571      41537469 
 572              	.LASF15:
 573 0058 72656733 		.ascii	"reg32\000"
 573      3200
 574              	.LASF20:
 575 005e 6D61736B 		.ascii	"maskVal\000"
 575      56616C00 
 576              	.LASF17:
 577 0066 50574D5F 		.ascii	"PWM_Clock_Stop\000"
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 15


 577      436C6F63 
 577      6B5F5374 
 577      6F7000
 578              	.LASF23:
 579 0075 50574D5F 		.ascii	"PWM_Clock_GetFractionalDividerRegister\000"
 579      436C6F63 
 579      6B5F4765 
 579      74467261 
 579      6374696F 
 580              	.LASF22:
 581 009c 50574D5F 		.ascii	"PWM_Clock_GetDividerRegister\000"
 581      436C6F63 
 581      6B5F4765 
 581      74446976 
 581      69646572 
 582              	.LASF12:
 583 00b9 666C6F61 		.ascii	"float\000"
 583      7400
 584              	.LASF1:
 585 00bf 756E7369 		.ascii	"unsigned char\000"
 585      676E6564 
 585      20636861 
 585      7200
 586              	.LASF5:
 587 00cd 6C6F6E67 		.ascii	"long unsigned int\000"
 587      20756E73 
 587      69676E65 
 587      6420696E 
 587      7400
 588              	.LASF3:
 589 00df 73686F72 		.ascii	"short unsigned int\000"
 589      7420756E 
 589      7369676E 
 589      65642069 
 589      6E7400
 590              	.LASF16:
 591 00f2 50574D5F 		.ascii	"PWM_Clock_Start\000"
 591      436C6F63 
 591      6B5F5374 
 591      61727400 
 592              	.LASF18:
 593 0102 636C6B44 		.ascii	"clkDivider\000"
 593      69766964 
 593      657200
 594              	.LASF27:
 595 010d 50574D5F 		.ascii	"PWM_Clock_SetFractionalDividerRegister\000"
 595      436C6F63 
 595      6B5F5365 
 595      74467261 
 595      6374696F 
 596              	.LASF13:
 597 0134 646F7562 		.ascii	"double\000"
 597      6C6500
 598              	.LASF21:
 599 013b 72656756 		.ascii	"regVal\000"
 599      616C00
 600              	.LASF19:
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 16


 601 0142 636C6B46 		.ascii	"clkFractional\000"
 601      72616374 
 601      696F6E61 
 601      6C00
 602              	.LASF10:
 603 0150 75696E74 		.ascii	"uint16\000"
 603      313600
 604              	.LASF11:
 605 0157 75696E74 		.ascii	"uint32\000"
 605      333200
 606              	.LASF8:
 607 015e 756E7369 		.ascii	"unsigned int\000"
 607      676E6564 
 607      20696E74 
 607      00
 608              	.LASF7:
 609 016b 6C6F6E67 		.ascii	"long long unsigned int\000"
 609      206C6F6E 
 609      6720756E 
 609      7369676E 
 609      65642069 
 610              	.LASF6:
 611 0182 6C6F6E67 		.ascii	"long long int\000"
 611      206C6F6E 
 611      6720696E 
 611      7400
 612              	.LASF14:
 613 0190 63686172 		.ascii	"char\000"
 613      00
 614              	.LASF25:
 615 0195 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\PWM_Clock.c\000"
 615      6E657261 
 615      7465645F 
 615      536F7572 
 615      63655C50 
 616              	.LASF2:
 617 01ba 73686F72 		.ascii	"short int\000"
 617      7420696E 
 617      7400
 618              	.LASF9:
 619 01c4 75696E74 		.ascii	"uint8\000"
 619      3800
 620              	.LASF4:
 621 01ca 6C6F6E67 		.ascii	"long int\000"
 621      20696E74 
 621      00
 622              	.LASF0:
 623 01d3 7369676E 		.ascii	"signed char\000"
 623      65642063 
 623      68617200 
 624              	.LASF24:
 625 01df 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 625      4320342E 
 625      382E3420 
 625      32303134 
 625      30353236 
 626 0212 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\cca8a5LR.s 			page 17


 626      20726576 
 626      6973696F 
 626      6E203231 
 626      31333538 
 627 0245 30202D66 		.ascii	"0 -ffunction-sections -fno-rtti -fno-exceptions -fu"
 627      66756E63 
 627      74696F6E 
 627      2D736563 
 627      74696F6E 
 628 0278 6E736967 		.ascii	"nsigned-char -funsigned-bitfields -fshort-enums\000"
 628      6E65642D 
 628      63686172 
 628      202D6675 
 628      6E736967 
 629              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
