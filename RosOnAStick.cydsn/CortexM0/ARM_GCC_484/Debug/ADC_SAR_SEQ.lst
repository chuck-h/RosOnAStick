ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_SEQ.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_SEQ_initVar
  18              		.bss
  19              		.type	ADC_SAR_SEQ_initVar, %object
  20              		.size	ADC_SAR_SEQ_initVar, 1
  21              	ADC_SAR_SEQ_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_SEQ_offset,6,4
  24              		.comm	ADC_SAR_SEQ_countsPer10Volt,12,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_SEQ_channelsConfig, %object
  28              		.size	ADC_SAR_SEQ_channelsConfig, 12
  29              	ADC_SAR_SEQ_channelsConfig:
  30 0000 00000000 		.space	12
  30      00000000 
  30      00000000 
  31              		.section	.text.ADC_SAR_SEQ_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_SEQ_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_SEQ_Start, %function
  37              	ADC_SAR_SEQ_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_SEQ.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * File Name: ADC_SAR_SEQ.c
   3:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Version 1.10
   4:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 2


  17:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #include "ADC_SAR_SEQ.h"
  20:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  22:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /***************************************
  23:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global data allocation
  24:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ***************************************/
  25:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** uint8 ADC_SAR_SEQ_initVar = 0u;
  26:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** volatile int16 ADC_SAR_SEQ_offset[ADC_SAR_SEQ_TOTAL_CHANNELS_NUM];
  27:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** volatile int32 ADC_SAR_SEQ_countsPer10Volt[ADC_SAR_SEQ_TOTAL_CHANNELS_NUM];   /* Gain compensation 
  28:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  30:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /***************************************
  31:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Local data allocation
  32:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ***************************************/
  33:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /* Channels configuration generated by customiser */
  34:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** static const uint32 CYCODE ADC_SAR_SEQ_channelsConfig[] = { 0x00000000u, 0x00000000u, 0x00000000u }
  35:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  37:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
  38:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Start
  39:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  40:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  41:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
  42:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Performs all required initialization for this component
  43:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  and enables the power. The power will be set to the appropriate
  44:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  power based on the clock frequency.
  45:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  46:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
  47:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  48:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  49:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
  50:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  51:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  52:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
  53:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  The ADC_SAR_SEQ_initVar variable is used to indicate when/if initial
  54:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  configuration of this component has happened. The variable is initialized to
  55:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  56:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  57:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start() routine.
  58:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If re-initialization of the component is required the variable should be set
  59:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  to zero before call of ADC_SAR_SEQ_Start() routine, or the user may call
  60:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Init() and ADC_SAR_SEQ_Enable() as done in the
  61:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start() routine.
  62:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  63:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
  64:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Start(void)
  65:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
  40              		.loc 1 65 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 3


  66:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* If not Initialized then initialize all required hardware and software */
  67:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if(ADC_SAR_SEQ_initVar == 0u)
  48              		.loc 1 67 0
  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  68:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
  69:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_Init();
  53              		.loc 1 69 0
  54 000c FFF7FEFF 		bl	ADC_SAR_SEQ_Init
  70:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_initVar = 1u;
  55              		.loc 1 70 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  71:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
  72:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_Enable();
  60              		.loc 1 72 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_SEQ_Enable
  73:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
  62              		.loc 1 73 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_SEQ_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_SAR_SEQ_Start, .-ADC_SAR_SEQ_Start
  73              		.section	.text.ADC_SAR_SEQ_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_SAR_SEQ_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_SAR_SEQ_Init, %function
  79              	ADC_SAR_SEQ_Init:
  80              	.LFB1:
  74:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  76:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
  77:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Init
  78:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  79:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  80:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
  81:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Initialize component's parameters to the parameters set by user in the
  82:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  customizer of the component placed onto schematic. Usually called in
  83:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start().
  84:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  85:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
  86:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  87:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  88:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
  89:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 4


  90:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  91:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
  92:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  The ADC_SAR_SEQ_offset variable is initialized.
  93:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  94:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Init(void)
  96:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
  81              		.loc 1 96 0
  82              		.cfi_startproc
  83 0000 90B5     		push	{r4, r7, lr}
  84              		.cfi_def_cfa_offset 12
  85              		.cfi_offset 4, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 85B0     		sub	sp, sp, #20
  89              		.cfi_def_cfa_offset 32
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 chNum;
  98:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 tmpRegVal;
  99:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int32 counts;
 100:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 101:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 102:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         static const uint8 CYCODE ADC_SAR_SEQ_InputsPlacement[] =
 103:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 104:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 105:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_0_PIN
 106:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 107:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****              (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_1_PIN
 108:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 2u)
 109:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 110:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_2_PIN
 111:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 2u */
 112:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 3u)
 113:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 114:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_3_PIN
 115:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 3u */
 116:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 4u)
 117:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 118:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_4_PIN
 119:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 4u */
 120:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 5u)
 121:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 122:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_5_PIN
 123:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 5u */
 124:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 6u)
 125:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 126:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_6_PIN
 127:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 6u */
 128:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 7u)
 129:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 130:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_7_PIN
 131:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 7u */
 132:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 8u)
 133:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 134:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_8_PIN
 135:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 8u */
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 5


 136:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         };
 137:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 138:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 139:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_IRQ_REMOVE == 0u)
 140:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Start and set interrupt vector */
 141:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CyIntSetPriority(ADC_SAR_SEQ_INTC_NUMBER, ADC_SAR_SEQ_INTC_PRIOR_NUMBER);
  92              		.loc 1 141 0
  93 0006 0E20     		mov	r0, #14
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 142:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         (void)CyIntSetVector(ADC_SAR_SEQ_INTC_NUMBER, &ADC_SAR_SEQ_ISR);
  96              		.loc 1 142 0
  97 000e 5B4B     		ldr	r3, .L15
  98 0010 0E20     		mov	r0, #14
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 143:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif   /* End ADC_SAR_SEQ_IRQ_REMOVE */
 144:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 145:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Init SAR and MUX registers */
 146:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CHAN_EN_REG = ADC_SAR_SEQ_DEFAULT_EN_CHANNELS;
 101              		.loc 1 146 0
 102 0018 594B     		ldr	r3, .L15+4
 103 001a 0722     		mov	r2, #7
 104 001c 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG = ADC_SAR_SEQ_DEFAULT_CTRL_REG_CFG;
 105              		.loc 1 147 0
 106 001e 594B     		ldr	r3, .L15+8
 107 0020 594A     		ldr	r2, .L15+12
 108 0022 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_CTRL_REG_CFG;
 109              		.loc 1 148 0
 110 0024 594B     		ldr	r3, .L15+16
 111 0026 5A4A     		ldr	r2, .L15+20
 112 0028 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG = ADC_SAR_SEQ_DEFAULT_RANGE_THRES_REG_CFG;
 113              		.loc 1 149 0
 114 002a 5A4B     		ldr	r3, .L15+24
 115 002c 5A4A     		ldr	r2, .L15+28
 116 002e 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_COND_REG  = ADC_SAR_SEQ_COMPARE_MODE;
 117              		.loc 1 150 0
 118 0030 5A4B     		ldr	r3, .L15+32
 119 0032 0022     		mov	r2, #0
 120 0034 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_TIME01_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_TIME01_REG_CFG;
 121              		.loc 1 151 0
 122 0036 5A4B     		ldr	r3, .L15+36
 123 0038 5A4A     		ldr	r2, .L15+40
 124 003a 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_TIME23_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_TIME23_REG_CFG;
 125              		.loc 1 152 0
 126 003c 5A4B     		ldr	r3, .L15+44
 127 003e 594A     		ldr	r2, .L15+40
 128 0040 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_MUX_SWITCH0_REG |= ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0; 
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 6


 129              		.loc 1 155 0
 130 0042 5A4B     		ldr	r3, .L15+48
 131 0044 594A     		ldr	r2, .L15+48
 132 0046 1268     		ldr	r2, [r2]
 133 0048 8021     		mov	r1, #128
 134 004a 4902     		lsl	r1, r1, #9
 135 004c 0A43     		orr	r2, r1
 136 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ADC_SAR_SEQ_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0; 
 137              		.loc 1 158 0
 138 0050 574B     		ldr	r3, .L15+52
 139 0052 574A     		ldr	r2, .L15+52
 140 0054 1268     		ldr	r2, [r2]
 141 0056 8021     		mov	r1, #128
 142 0058 4902     		lsl	r1, r1, #9
 143 005a 0A43     		orr	r2, r1
 144 005c 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /*ADC_SAR_SEQ_CHANNELS_MODE !=0 */    
 161:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 162:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG = 0u;
 145              		.loc 1 162 0
 146 005e 554B     		ldr	r3, .L15+56
 147 0060 0022     		mov	r2, #0
 148 0062 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG = 0u;
 149              		.loc 1 163 0
 150 0064 544B     		ldr	r3, .L15+60
 151 0066 0022     		mov	r2, #0
 152 0068 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_INTR_MASK_REG = ADC_SAR_SEQ_SAR_INTR_MASK;
 153              		.loc 1 164 0
 154 006a 544B     		ldr	r3, .L15+64
 155 006c 0122     		mov	r2, #1
 156 006e 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_ANA_TRIM_REG = ADC_SAR_SEQ_TRIM_COEF;
 157              		.loc 1 165 0
 158 0070 534B     		ldr	r3, .L15+68
 159 0072 0222     		mov	r2, #2
 160 0074 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     
 167:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Read and modify default configuration based on characterization */
 168:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     tmpRegVal = ADC_SAR_SEQ_SAR_DFT_CTRL_REG;
 161              		.loc 1 168 0
 162 0076 534B     		ldr	r3, .L15+72
 163 0078 1B68     		ldr	r3, [r3]
 164 007a 7B60     		str	r3, [r7, #4]
 169:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_NOMINAL_CLOCK_FREQ > (ADC_SAR_SEQ_MAX_FREQUENCY / 2))
 170:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal &= (uint32)~ADC_SAR_SEQ_DCEN;
 171:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal |= ADC_SAR_SEQ_SEL_CSEL_DFT_CHAR;
 172:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #else  /* clock speed < 9 Mhz */  
 173:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal |= ADC_SAR_SEQ_DLY_INC;
 165              		.loc 1 173 0
 166 007c 7B68     		ldr	r3, [r7, #4]
 167 007e 0122     		mov	r2, #1
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 7


 168 0080 1343     		orr	r3, r2
 169 0082 7B60     		str	r3, [r7, #4]
 174:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* clock speed > 9 Mhz */
 175:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_DFT_CTRL_REG = tmpRegVal;
 170              		.loc 1 175 0
 171 0084 4F4B     		ldr	r3, .L15+72
 172 0086 7A68     		ldr	r2, [r7, #4]
 173 0088 1A60     		str	r2, [r3]
 176:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     
 177:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12)
 178:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_WOUNDING_REG = ADC_SAR_SEQ_ALT_WOUNDING;
 179:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12 */
 180:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 181:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     for(chNum = 0u; chNum < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM; chNum++)
 174              		.loc 1 181 0
 175 008a 0023     		mov	r3, #0
 176 008c FB60     		str	r3, [r7, #12]
 177 008e 6EE0     		b	.L6
 178              	.L14:
 182:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 183:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal = (ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_CHANNEL_CONFIG_MASK);
 179              		.loc 1 183 0
 180 0090 4D4B     		ldr	r3, .L15+76
 181 0092 FA68     		ldr	r2, [r7, #12]
 182 0094 9200     		lsl	r2, r2, #2
 183 0096 D258     		ldr	r2, [r2, r3]
 184 0098 DC23     		mov	r3, #220
 185 009a 9B01     		lsl	r3, r3, #6
 186 009c 1340     		and	r3, r2
 187 009e 7B60     		str	r3, [r7, #4]
 184:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 185:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal |= ADC_SAR_SEQ_InputsPlacement[chNum];
 188              		.loc 1 185 0
 189 00a0 4A4A     		ldr	r2, .L15+80
 190 00a2 FB68     		ldr	r3, [r7, #12]
 191 00a4 D318     		add	r3, r2, r3
 192 00a6 1B78     		ldrb	r3, [r3]
 193 00a8 7A68     		ldr	r2, [r7, #4]
 194 00aa 1343     		orr	r3, r2
 195 00ac 7B60     		str	r3, [r7, #4]
 186:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 187:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* When the part is wounded to 10-bit then the SUB_RESOLUTION bit 
 188:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit 
 189:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         *  (0) and 8-bit (1) resolution.
 190:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         */
 191:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if((ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12) && \
 192:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (ADC_SAR_SEQ_ALT_WOUNDING == ADC_SAR_SEQ_WOUNDING_10BIT))
 193:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal &= (uint32)(~ADC_SAR_SEQ_ALT_RESOLUTION_ON);
 194:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12 */
 195:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 196:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 197:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if(chNum < ADC_SAR_SEQ_SEQUENCED_CHANNELS_NUM)
 198:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 199:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 200:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_SEQ_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegV
 196              		.loc 1 200 0
 197 00ae FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 8


 198 00b0 9B00     		lsl	r3, r3, #2
 199 00b2 474A     		ldr	r2, .L15+84
 200 00b4 9B18     		add	r3, r3, r2
 201 00b6 7A68     		ldr	r2, [r7, #4]
 202 00b8 1A60     		str	r2, [r3]
 201:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 202:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_SATURATE_EN_MASK) != 0u)
 203              		.loc 1 202 0
 204 00ba 434B     		ldr	r3, .L15+76
 205 00bc FA68     		ldr	r2, [r7, #12]
 206 00be 9200     		lsl	r2, r2, #2
 207 00c0 D258     		ldr	r2, [r2, r3]
 208 00c2 0123     		mov	r3, #1
 209 00c4 1340     		and	r3, r2
 210 00c6 0AD0     		beq	.L7
 203:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 204:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 211              		.loc 1 204 0
 212 00c8 3A4B     		ldr	r3, .L15+56
 213 00ca 3A4A     		ldr	r2, .L15+56
 214 00cc 1168     		ldr	r1, [r2]
 215 00ce FA68     		ldr	r2, [r7, #12]
 216 00d0 0120     		mov	r0, #1
 217 00d2 041C     		mov	r4, r0
 218 00d4 9440     		lsl	r4, r4, r2
 219 00d6 221C     		mov	r2, r4
 220 00d8 92B2     		uxth	r2, r2
 221 00da 0A43     		orr	r2, r1
 222 00dc 1A60     		str	r2, [r3]
 223              	.L7:
 205:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 206:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 207:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_RANGE_CTRL_EN_MASK) != 0u)
 224              		.loc 1 207 0
 225 00de 3A4B     		ldr	r3, .L15+76
 226 00e0 FA68     		ldr	r2, [r7, #12]
 227 00e2 9200     		lsl	r2, r2, #2
 228 00e4 D258     		ldr	r2, [r2, r3]
 229 00e6 0223     		mov	r3, #2
 230 00e8 1340     		and	r3, r2
 231 00ea 0AD0     		beq	.L8
 208:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 209:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 232              		.loc 1 209 0
 233 00ec 324B     		ldr	r3, .L15+60
 234 00ee 324A     		ldr	r2, .L15+60
 235 00f0 1168     		ldr	r1, [r2]
 236 00f2 FA68     		ldr	r2, [r7, #12]
 237 00f4 0120     		mov	r0, #1
 238 00f6 041C     		mov	r4, r0
 239 00f8 9440     		lsl	r4, r4, r2
 240 00fa 221C     		mov	r2, r4
 241 00fc 92B2     		uxth	r2, r2
 242 00fe 0A43     		orr	r2, r1
 243 0100 1A60     		str	r2, [r3]
 244              	.L8:
 210:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 9


 211:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 212:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 213:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             else
 214:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 215:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 CY_SET_REG32(ADC_SAR_SEQ_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_SEQ_INJ_TAILG
 216:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 217:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_SATURATE_EN_MASK) != 0u)
 218:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 {
 219:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                     ADC_SAR_SEQ_SAR_INTR_MASK_REG |= ADC_SAR_SEQ_INJ_SATURATE_MASK;
 220:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 }
 221:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 222:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_RANGE_CTRL_EN_MASK) != 0u)
 223:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 {
 224:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                     ADC_SAR_SEQ_SAR_INTR_MASK_REG |= ADC_SAR_SEQ_INJ_RANGE_MASK;
 225:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 }
 226:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 227:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 228:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 229:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_ALT_RESOLUTION_ON) != 0u)
 245              		.loc 1 229 0
 246 0102 314B     		ldr	r3, .L15+76
 247 0104 FA68     		ldr	r2, [r7, #12]
 248 0106 9200     		lsl	r2, r2, #2
 249 0108 D258     		ldr	r2, [r2, r3]
 250 010a 8023     		mov	r3, #128
 251 010c 9B00     		lsl	r3, r3, #2
 252 010e 1340     		and	r3, r2
 253 0110 03D0     		beq	.L9
 230:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 231:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                counts = (int32)ADC_SAR_SEQ_DEFAULT_MAX_WRK_ALT;
 254              		.loc 1 231 0
 255 0112 8023     		mov	r3, #128
 256 0114 5B00     		lsl	r3, r3, #1
 257 0116 BB60     		str	r3, [r7, #8]
 258 0118 02E0     		b	.L10
 259              	.L9:
 232:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 233:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         else
 234:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 235:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                counts = (int32)ADC_SAR_SEQ_SAR_WRK_MAX_12BIT;
 260              		.loc 1 235 0
 261 011a 8023     		mov	r3, #128
 262 011c 5B01     		lsl	r3, r3, #5
 263 011e BB60     		str	r3, [r7, #8]
 264              	.L10:
 236:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 237:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 238:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_DIFFERENTIAL_EN) == 0u)
 265              		.loc 1 238 0
 266 0120 294B     		ldr	r3, .L15+76
 267 0122 FA68     		ldr	r2, [r7, #12]
 268 0124 9200     		lsl	r2, r2, #2
 269 0126 D258     		ldr	r2, [r2, r3]
 270 0128 8023     		mov	r3, #128
 271 012a 5B00     		lsl	r3, r3, #1
 272 012c 1340     		and	r3, r2
 273 012e 05D1     		bne	.L11
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 10


 239:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {  
 240:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if((ADC_SAR_SEQ_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FSIGNED) && \
 241:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 (ADC_SAR_SEQ_DEFAULT_NEG_INPUT_SEL == ADC_SAR_SEQ__VREF))
 242:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 243:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = (int16)(counts / -2);
 244:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #else    
 245:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = 0;
 274              		.loc 1 245 0
 275 0130 284B     		ldr	r3, .L15+88
 276 0132 FA68     		ldr	r2, [r7, #12]
 277 0134 5200     		lsl	r2, r2, #1
 278 0136 0021     		mov	r1, #0
 279 0138 D152     		strh	r1, [r2, r3]
 280 013a 04E0     		b	.L12
 281              	.L11:
 246:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FSIGNED */    
 247:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 248:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         else    /* Differential channel */
 249:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 250:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FUNSIGNED)
 251:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Set offset to the half scale to convert results to signed format */
 252:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = (int16)(counts / 2);
 253:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #else    
 254:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = 0;
 282              		.loc 1 254 0
 283 013c 254B     		ldr	r3, .L15+88
 284 013e FA68     		ldr	r2, [r7, #12]
 285 0140 5200     		lsl	r2, r2, #1
 286 0142 0021     		mov	r1, #0
 287 0144 D152     		strh	r1, [r2, r3]
 288              	.L12:
 255:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* end ADC_SAR_SEQ_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FUNSIGNED */  
 256:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 257:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Calculate gain in counts per 10 volts with rounding */
 258:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_SEQ_10MV_COUNTS) + 
 289              		.loc 1 258 0
 290 0146 BB68     		ldr	r3, [r7, #8]
 291 0148 234A     		ldr	r2, .L15+92
 292 014a 5343     		mul	r3, r2
 293 014c 8022     		mov	r2, #128
 294 014e D200     		lsl	r2, r2, #3
 295 0150 9B18     		add	r3, r3, r2
 259:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                             ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE
 296              		.loc 1 259 0
 297 0152 002B     		cmp	r3, #0
 298 0154 01DA     		bge	.L13
 299 0156 214C     		ldr	r4, .L15+96
 300 0158 1B19     		add	r3, r3, r4
 301              	.L13:
 302 015a DB12     		asr	r3, r3, #11
 258:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_SEQ_10MV_COUNTS) + 
 303              		.loc 1 258 0
 304 015c 9BB2     		uxth	r3, r3
 305 015e 19B2     		sxth	r1, r3
 306 0160 1F4B     		ldr	r3, .L15+100
 307 0162 FA68     		ldr	r2, [r7, #12]
 308 0164 9200     		lsl	r2, r2, #2
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 11


 309 0166 D150     		str	r1, [r2, r3]
 181:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     for(chNum = 0u; chNum < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM; chNum++)
 310              		.loc 1 181 0
 311 0168 FB68     		ldr	r3, [r7, #12]
 312 016a 0133     		add	r3, r3, #1
 313 016c FB60     		str	r3, [r7, #12]
 314              	.L6:
 181:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     for(chNum = 0u; chNum < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM; chNum++)
 315              		.loc 1 181 0 is_stmt 0 discriminator 1
 316 016e FB68     		ldr	r3, [r7, #12]
 317 0170 022B     		cmp	r3, #2
 318 0172 8DD9     		bls	.L14
 260:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 261:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 319              		.loc 1 261 0 is_stmt 1
 320 0174 BD46     		mov	sp, r7
 321 0176 05B0     		add	sp, sp, #20
 322              		@ sp needed
 323 0178 90BD     		pop	{r4, r7, pc}
 324              	.L16:
 325 017a C046     		.align	2
 326              	.L15:
 327 017c 00000000 		.word	ADC_SAR_SEQ_ISR
 328 0180 20001A40 		.word	1075445792
 329 0184 00001A40 		.word	1075445760
 330 0188 C0200010 		.word	268443840
 331 018c 04001A40 		.word	1075445764
 332 0190 8C000080 		.word	-2147483508
 333 0194 18001A40 		.word	1075445784
 334 0198 0000FF07 		.word	134152192
 335 019c 1C001A40 		.word	1075445788
 336 01a0 10001A40 		.word	1075445776
 337 01a4 04000400 		.word	262148
 338 01a8 14001A40 		.word	1075445780
 339 01ac 00031A40 		.word	1075446528
 340 01b0 40031A40 		.word	1075446592
 341 01b4 28021A40 		.word	1075446312
 342 01b8 38021A40 		.word	1075446328
 343 01bc 18021A40 		.word	1075446296
 344 01c0 000F1A40 		.word	1075449600
 345 01c4 30001A40 		.word	1075445808
 346 01c8 00000000 		.word	ADC_SAR_SEQ_channelsConfig
 347 01cc 0C000000 		.word	ADC_SAR_SEQ_InputsPlacement.4681
 348 01d0 80001A40 		.word	1075445888
 349 01d4 00000000 		.word	ADC_SAR_SEQ_offset
 350 01d8 10270000 		.word	10000
 351 01dc FF070000 		.word	2047
 352 01e0 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 353              		.cfi_endproc
 354              	.LFE1:
 355              		.size	ADC_SAR_SEQ_Init, .-ADC_SAR_SEQ_Init
 356              		.section	.text.ADC_SAR_SEQ_Enable,"ax",%progbits
 357              		.align	2
 358              		.global	ADC_SAR_SEQ_Enable
 359              		.code	16
 360              		.thumb_func
 361              		.type	ADC_SAR_SEQ_Enable, %function
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 12


 362              	ADC_SAR_SEQ_Enable:
 363              	.LFB2:
 262:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 263:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 264:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_1_Enable
 265:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 266:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 267:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 268:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Enables the clock and analog power for SAR ADC.
 269:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 270:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 271:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 272:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 273:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 274:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 275:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 276:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 277:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Enable(void)
 278:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 364              		.loc 1 278 0
 365              		.cfi_startproc
 366 0000 80B5     		push	{r7, lr}
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370 0002 00AF     		add	r7, sp, #0
 371              		.cfi_def_cfa_register 7
 279:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_ENABLE;
 372              		.loc 1 279 0
 373 0004 054B     		ldr	r3, .L18
 374 0006 054A     		ldr	r2, .L18
 375 0008 1268     		ldr	r2, [r2]
 376 000a 8021     		mov	r1, #128
 377 000c 0906     		lsl	r1, r1, #24
 378 000e 0A43     		orr	r2, r1
 379 0010 1A60     		str	r2, [r3]
 280:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* The block is ready to use 10 us after the enable signal is set high. */
 281:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CyDelayUs(ADC_SAR_SEQ_10US_DELAY);
 380              		.loc 1 281 0
 381 0012 0A20     		mov	r0, #10
 382 0014 FFF7FEFF 		bl	CyDelayUs
 282:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 383              		.loc 1 282 0
 384 0018 BD46     		mov	sp, r7
 385              		@ sp needed
 386 001a 80BD     		pop	{r7, pc}
 387              	.L19:
 388              		.align	2
 389              	.L18:
 390 001c 00001A40 		.word	1075445760
 391              		.cfi_endproc
 392              	.LFE2:
 393              		.size	ADC_SAR_SEQ_Enable, .-ADC_SAR_SEQ_Enable
 394              		.section	.text.ADC_SAR_SEQ_Stop,"ax",%progbits
 395              		.align	2
 396              		.global	ADC_SAR_SEQ_Stop
 397              		.code	16
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 13


 398              		.thumb_func
 399              		.type	ADC_SAR_SEQ_Stop, %function
 400              	ADC_SAR_SEQ_Stop:
 401              	.LFB3:
 283:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 284:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 285:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 286:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Stop
 287:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 288:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 289:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 290:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 291:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mode.
 292:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 293:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 294:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 295:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 296:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 297:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 298:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 299:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 300:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Stop(void)
 301:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 402              		.loc 1 301 0
 403              		.cfi_startproc
 404 0000 80B5     		push	{r7, lr}
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 00AF     		add	r7, sp, #0
 409              		.cfi_def_cfa_register 7
 302:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG &= (uint32)~ADC_SAR_SEQ_ENABLE;
 410              		.loc 1 302 0
 411 0004 034B     		ldr	r3, .L21
 412 0006 034A     		ldr	r2, .L21
 413 0008 1268     		ldr	r2, [r2]
 414 000a 5200     		lsl	r2, r2, #1
 415 000c 5208     		lsr	r2, r2, #1
 416 000e 1A60     		str	r2, [r3]
 303:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 417              		.loc 1 303 0
 418 0010 BD46     		mov	sp, r7
 419              		@ sp needed
 420 0012 80BD     		pop	{r7, pc}
 421              	.L22:
 422              		.align	2
 423              	.L21:
 424 0014 00001A40 		.word	1075445760
 425              		.cfi_endproc
 426              	.LFE3:
 427              		.size	ADC_SAR_SEQ_Stop, .-ADC_SAR_SEQ_Stop
 428              		.section	.text.ADC_SAR_SEQ_StartConvert,"ax",%progbits
 429              		.align	2
 430              		.global	ADC_SAR_SEQ_StartConvert
 431              		.code	16
 432              		.thumb_func
 433              		.type	ADC_SAR_SEQ_StartConvert, %function
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 14


 434              	ADC_SAR_SEQ_StartConvert:
 435              	.LFB4:
 304:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 305:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 306:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 307:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_StartConvert
 308:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 309:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 310:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 311:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description:
 312:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  For free running mode, this API starts the conversion process and it
 313:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  runs continuously.
 314:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 315:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  In a triggered mode, this routine triggers every conversion by
 316:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 317:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  every conversion has to start by this API.
 318:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 319:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 320:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 321:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 322:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 323:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 324:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 325:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 326:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_StartConvert(void)
 327:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 436              		.loc 1 327 0
 437              		.cfi_startproc
 438 0000 80B5     		push	{r7, lr}
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 00AF     		add	r7, sp, #0
 443              		.cfi_def_cfa_register 7
 328:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_SEQ__FREERUNNING)
 329:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG |= ADC_SAR_SEQ_CONTINUOUS_EN;
 444              		.loc 1 329 0
 445 0004 044B     		ldr	r3, .L24
 446 0006 044A     		ldr	r2, .L24
 447 0008 1268     		ldr	r2, [r2]
 448 000a 8021     		mov	r1, #128
 449 000c 4902     		lsl	r1, r1, #9
 450 000e 0A43     		orr	r2, r1
 451 0010 1A60     		str	r2, [r3]
 330:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #else /* Firmware trigger */
 331:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_START_CTRL_REG = ADC_SAR_SEQ_FW_TRIGGER;
 332:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* End ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE == ADC_SAR_SEQ__FREERUNNING */
 333:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 334:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 452              		.loc 1 334 0
 453 0012 BD46     		mov	sp, r7
 454              		@ sp needed
 455 0014 80BD     		pop	{r7, pc}
 456              	.L25:
 457 0016 C046     		.align	2
 458              	.L24:
 459 0018 04001A40 		.word	1075445764
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 15


 460              		.cfi_endproc
 461              	.LFE4:
 462              		.size	ADC_SAR_SEQ_StartConvert, .-ADC_SAR_SEQ_StartConvert
 463              		.section	.text.ADC_SAR_SEQ_StopConvert,"ax",%progbits
 464              		.align	2
 465              		.global	ADC_SAR_SEQ_StopConvert
 466              		.code	16
 467              		.thumb_func
 468              		.type	ADC_SAR_SEQ_StopConvert, %function
 469              	ADC_SAR_SEQ_StopConvert:
 470              	.LFB5:
 335:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 337:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 338:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_StopConvert
 339:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 340:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 341:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 342:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Forces the ADC to stop all conversions.
 343:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 344:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 345:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 346:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 347:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 348:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 349:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 350:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 351:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_StopConvert(void)
 352:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 471              		.loc 1 352 0
 472              		.cfi_startproc
 473 0000 80B5     		push	{r7, lr}
 474              		.cfi_def_cfa_offset 8
 475              		.cfi_offset 7, -8
 476              		.cfi_offset 14, -4
 477 0002 00AF     		add	r7, sp, #0
 478              		.cfi_def_cfa_register 7
 353:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_SEQ__FREERUNNING)
 354:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_SEQ_CONTINUOUS_EN);
 479              		.loc 1 354 0
 480 0004 034B     		ldr	r3, .L27
 481 0006 034A     		ldr	r2, .L27
 482 0008 1168     		ldr	r1, [r2]
 483 000a 034A     		ldr	r2, .L27+4
 484 000c 0A40     		and	r2, r1
 485 000e 1A60     		str	r2, [r3]
 355:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE == ADC_SAR_SEQ__FREERUNNING */
 356:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 486              		.loc 1 356 0
 487 0010 BD46     		mov	sp, r7
 488              		@ sp needed
 489 0012 80BD     		pop	{r7, pc}
 490              	.L28:
 491              		.align	2
 492              	.L27:
 493 0014 04001A40 		.word	1075445764
 494 0018 FFFFFEFF 		.word	-65537
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 16


 495              		.cfi_endproc
 496              	.LFE5:
 497              		.size	ADC_SAR_SEQ_StopConvert, .-ADC_SAR_SEQ_StopConvert
 498              		.section	.text.ADC_SAR_SEQ_IsEndConversion,"ax",%progbits
 499              		.align	2
 500              		.global	ADC_SAR_SEQ_IsEndConversion
 501              		.code	16
 502              		.thumb_func
 503              		.type	ADC_SAR_SEQ_IsEndConversion, %function
 504              	ADC_SAR_SEQ_IsEndConversion:
 505              	.LFB6:
 357:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 358:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 359:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 360:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_IsEndConversion
 361:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 362:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 363:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 364:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description: Checks for ADC end of conversion for the case one
 365:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  channel and end of scan for the case of multiple channels. It acts
 366:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  as a software version of the EOC. This function provides the
 367:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  programmer with two options. In one mode this function
 368:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  immediately returns with the conversion status. In the other mode,
 369:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  the function does not return (blocking) until the conversion has
 370:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  completed.
 371:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 372:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 373:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 374:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 375:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 376:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *                              for injection channel
 377:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 378:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *                              channel conversion
 379:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 382:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 383:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 384:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 385:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** uint32 ADC_SAR_SEQ_IsEndConversion(uint32 retMode)
 386:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 506              		.loc 1 386 0
 507              		.cfi_startproc
 508 0000 80B5     		push	{r7, lr}
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 7, -8
 511              		.cfi_offset 14, -4
 512 0002 84B0     		sub	sp, sp, #16
 513              		.cfi_def_cfa_offset 24
 514 0004 00AF     		add	r7, sp, #0
 515              		.cfi_def_cfa_register 7
 516 0006 7860     		str	r0, [r7, #4]
 387:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 status = 0u;
 517              		.loc 1 387 0
 518 0008 0023     		mov	r3, #0
 519 000a FB60     		str	r3, [r7, #12]
 388:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 17


 389:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if((retMode & (ADC_SAR_SEQ_RETURN_STATUS | ADC_SAR_SEQ_WAIT_FOR_RESULT)) != 0u)
 520              		.loc 1 389 0
 521 000c 7A68     		ldr	r2, [r7, #4]
 522 000e 0323     		mov	r3, #3
 523 0010 1340     		and	r3, r2
 524 0012 11D0     		beq	.L30
 525              	.L32:
 390:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 391:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         do
 392:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 393:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             status = ADC_SAR_SEQ_SAR_INTR_REG & ADC_SAR_SEQ_EOS_MASK;
 526              		.loc 1 393 0 discriminator 1
 527 0014 0B4B     		ldr	r3, .L34
 528 0016 1A68     		ldr	r2, [r3]
 529 0018 0123     		mov	r3, #1
 530 001a 1340     		and	r3, r2
 531 001c FB60     		str	r3, [r7, #12]
 394:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }while((status == 0u) && ((retMode & ADC_SAR_SEQ_WAIT_FOR_RESULT) != 0u));
 532              		.loc 1 394 0 discriminator 1
 533 001e FB68     		ldr	r3, [r7, #12]
 534 0020 002B     		cmp	r3, #0
 535 0022 03D1     		bne	.L31
 536 0024 7A68     		ldr	r2, [r7, #4]
 537 0026 0223     		mov	r3, #2
 538 0028 1340     		and	r3, r2
 539 002a F3D1     		bne	.L32
 540              	.L31:
 395:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 396:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if(status != 0u)
 541              		.loc 1 396 0
 542 002c FB68     		ldr	r3, [r7, #12]
 543 002e 002B     		cmp	r3, #0
 544 0030 02D0     		beq	.L30
 397:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 398:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             /* Clear EOS bit */
 399:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ADC_SAR_SEQ_SAR_INTR_REG = ADC_SAR_SEQ_EOS_MASK;
 545              		.loc 1 399 0
 546 0032 044B     		ldr	r3, .L34
 547 0034 0122     		mov	r2, #1
 548 0036 1A60     		str	r2, [r3]
 549              	.L30:
 400:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 401:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 402:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 403:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 404:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((retMode & (ADC_SAR_SEQ_RETURN_STATUS_INJ | ADC_SAR_SEQ_WAIT_FOR_RESULT_INJ)) != 0u)
 405:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 406:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             do
 407:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 408:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 status |= ADC_SAR_SEQ_SAR_INTR_REG & ADC_SAR_SEQ_INJ_EOC_MASK;
 409:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }while(((status & ADC_SAR_SEQ_INJ_EOC_MASK) != 0u) &&
 410:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                    ((retMode & ADC_SAR_SEQ_WAIT_FOR_RESULT_INJ) != 0u));
 411:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 412:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((status & ADC_SAR_SEQ_INJ_EOC_MASK) != 0u)
 413:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 414:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Clear Injection EOS bit */
 415:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_INTR_REG = ADC_SAR_SEQ_INJ_EOC_MASK;
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 18


 416:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 417:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 418:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 419:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 420:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     return (status);
 550              		.loc 1 420 0
 551 0038 FB68     		ldr	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 552              		.loc 1 421 0
 553 003a 181C     		mov	r0, r3
 554 003c BD46     		mov	sp, r7
 555 003e 04B0     		add	sp, sp, #16
 556              		@ sp needed
 557 0040 80BD     		pop	{r7, pc}
 558              	.L35:
 559 0042 C046     		.align	2
 560              	.L34:
 561 0044 10021A40 		.word	1075446288
 562              		.cfi_endproc
 563              	.LFE6:
 564              		.size	ADC_SAR_SEQ_IsEndConversion, .-ADC_SAR_SEQ_IsEndConversion
 565              		.section	.text.ADC_SAR_SEQ_GetResult16,"ax",%progbits
 566              		.align	2
 567              		.global	ADC_SAR_SEQ_GetResult16
 568              		.code	16
 569              		.thumb_func
 570              		.type	ADC_SAR_SEQ_GetResult16, %function
 571              	ADC_SAR_SEQ_GetResult16:
 572              	.LFB7:
 422:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 423:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_GetResult16
 426:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 428:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Gets the data available in the SAR DATA register.
 430:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 431:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 432:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: The ADC channel in which to return the result. The first channel
 433:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 434:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 435:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 436:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Returns converted data as a signed 16-bit integer
 437:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 438:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 439:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** int16 ADC_SAR_SEQ_GetResult16(uint32 chan)
 440:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 573              		.loc 1 440 0
 574              		.cfi_startproc
 575 0000 80B5     		push	{r7, lr}
 576              		.cfi_def_cfa_offset 8
 577              		.cfi_offset 7, -8
 578              		.cfi_offset 14, -4
 579 0002 84B0     		sub	sp, sp, #16
 580              		.cfi_def_cfa_offset 24
 581 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 19


 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
 441:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 result;
 442:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 443:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 444:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 584              		.loc 1 444 0
 585 0008 7B68     		ldr	r3, [r7, #4]
 586 000a 022B     		cmp	r3, #2
 587 000c 02D9     		bls	.L37
 588              		.loc 1 444 0 is_stmt 0 discriminator 1
 589 000e 0020     		mov	r0, #0
 590 0010 FFF7FEFF 		bl	CyHalt
 591              	.L37:
 445:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 446:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if(chan < ADC_SAR_SEQ_SEQUENCED_CHANNELS_NUM)
 592              		.loc 1 446 0 is_stmt 1
 593 0014 7B68     		ldr	r3, [r7, #4]
 594 0016 022B     		cmp	r3, #2
 595 0018 08D8     		bhi	.L38
 447:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 448:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_SEQ_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 596              		.loc 1 448 0
 597 001a 7B68     		ldr	r3, [r7, #4]
 598 001c 9B00     		lsl	r3, r3, #2
 599 001e 084A     		ldr	r2, .L41
 600 0020 9B18     		add	r3, r3, r2
 601 0022 1B68     		ldr	r3, [r3]
 602 0024 1B04     		lsl	r3, r3, #16
 603 0026 1B0C     		lsr	r3, r3, #16
 604 0028 FB60     		str	r3, [r7, #12]
 605 002a 01E0     		b	.L39
 606              	.L38:
 449:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_RESULT_MASK;
 450:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 451:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     else
 452:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 453:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 454:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             result = ADC_SAR_SEQ_SAR_INJ_RESULT_REG & ADC_SAR_SEQ_RESULT_MASK;
 455:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #else
 456:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             result = 0u;
 607              		.loc 1 456 0
 608 002c 0023     		mov	r3, #0
 609 002e FB60     		str	r3, [r7, #12]
 610              	.L39:
 457:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 458:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 459:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 460:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     return ( (int16)result );
 611              		.loc 1 460 0
 612 0030 FB68     		ldr	r3, [r7, #12]
 613 0032 9BB2     		uxth	r3, r3
 614 0034 1BB2     		sxth	r3, r3
 461:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 615              		.loc 1 461 0
 616 0036 181C     		mov	r0, r3
 617 0038 BD46     		mov	sp, r7
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 20


 618 003a 04B0     		add	sp, sp, #16
 619              		@ sp needed
 620 003c 80BD     		pop	{r7, pc}
 621              	.L42:
 622 003e C046     		.align	2
 623              	.L41:
 624 0040 80011A40 		.word	1075446144
 625              		.cfi_endproc
 626              	.LFE7:
 627              		.size	ADC_SAR_SEQ_GetResult16, .-ADC_SAR_SEQ_GetResult16
 628              		.section	.text.ADC_SAR_SEQ_SetChanMask,"ax",%progbits
 629              		.align	2
 630              		.global	ADC_SAR_SEQ_SetChanMask
 631              		.code	16
 632              		.thumb_func
 633              		.type	ADC_SAR_SEQ_SetChanMask, %function
 634              	ADC_SAR_SEQ_SetChanMask:
 635              	.LFB8:
 462:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 463:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 464:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 465:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetChanMask
 466:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 467:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 468:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 469:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel enable mask.
 470:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 471:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 472:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that will be
 473:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  scanned. Setting bits for channels that do not exist will have no
 474:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  effect. For example, if only 6 channels were enabled, setting a
 475:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 476:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This API will not enable the injection channel.
 477:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Examples: If the component is setup to sequence through 8
 478:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 479:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 480:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 481:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 482:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 483:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 484:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetChanMask(uint32 mask)
 485:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 636              		.loc 1 485 0
 637              		.cfi_startproc
 638 0000 80B5     		push	{r7, lr}
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 7, -8
 641              		.cfi_offset 14, -4
 642 0002 82B0     		sub	sp, sp, #8
 643              		.cfi_def_cfa_offset 16
 644 0004 00AF     		add	r7, sp, #0
 645              		.cfi_def_cfa_register 7
 646 0006 7860     		str	r0, [r7, #4]
 486:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CHAN_EN_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 647              		.loc 1 486 0
 648 0008 034B     		ldr	r3, .L44
 649 000a 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 21


 650 000c 0722     		mov	r2, #7
 651 000e 0A40     		and	r2, r1
 652 0010 1A60     		str	r2, [r3]
 487:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 653              		.loc 1 487 0
 654 0012 BD46     		mov	sp, r7
 655 0014 02B0     		add	sp, sp, #8
 656              		@ sp needed
 657 0016 80BD     		pop	{r7, pc}
 658              	.L45:
 659              		.align	2
 660              	.L44:
 661 0018 20001A40 		.word	1075445792
 662              		.cfi_endproc
 663              	.LFE8:
 664              		.size	ADC_SAR_SEQ_SetChanMask, .-ADC_SAR_SEQ_SetChanMask
 665              		.section	.text.ADC_SAR_SEQ_SetLowLimit,"ax",%progbits
 666              		.align	2
 667              		.global	ADC_SAR_SEQ_SetLowLimit
 668              		.code	16
 669              		.thumb_func
 670              		.type	ADC_SAR_SEQ_SetLowLimit, %function
 671              	ADC_SAR_SEQ_SetLowLimit:
 672              	.LFB9:
 488:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 489:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 490:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 491:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 492:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 493:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_EnableInjection
 494:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 495:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 496:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 497:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Enables the injection channel for the next scan only.
 498:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 499:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 500:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  None.
 501:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 502:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 503:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  None.
 504:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 505:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 506:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     void ADC_SAR_SEQ_EnableInjection(void)
 507:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 508:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_SEQ_INJ_CHAN_EN;
 509:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 510:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 511:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 512:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 513:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 514:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 515:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetLowLimit
 516:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 517:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 518:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 519:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the low limit parameter for a limit condition.
 520:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 22


 521:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 522:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  lowLimit: The low limit for a limit condition.
 523:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 524:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 525:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 526:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 527:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 528:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetLowLimit(uint32 lowLimit)
 529:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 673              		.loc 1 529 0
 674              		.cfi_startproc
 675 0000 80B5     		push	{r7, lr}
 676              		.cfi_def_cfa_offset 8
 677              		.cfi_offset 7, -8
 678              		.cfi_offset 14, -4
 679 0002 82B0     		sub	sp, sp, #8
 680              		.cfi_def_cfa_offset 16
 681 0004 00AF     		add	r7, sp, #0
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 530:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_SEQ_RANGE_LOW_MASK);
 684              		.loc 1 530 0
 685 0008 084B     		ldr	r3, .L47
 686 000a 084A     		ldr	r2, .L47
 687 000c 1268     		ldr	r2, [r2]
 688 000e 120C     		lsr	r2, r2, #16
 689 0010 1204     		lsl	r2, r2, #16
 690 0012 1A60     		str	r2, [r3]
 531:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_SEQ_RANGE_LOW_MASK;
 691              		.loc 1 531 0
 692 0014 054B     		ldr	r3, .L47
 693 0016 054A     		ldr	r2, .L47
 694 0018 1168     		ldr	r1, [r2]
 695 001a 7A68     		ldr	r2, [r7, #4]
 696 001c 1204     		lsl	r2, r2, #16
 697 001e 120C     		lsr	r2, r2, #16
 698 0020 0A43     		orr	r2, r1
 699 0022 1A60     		str	r2, [r3]
 532:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 700              		.loc 1 532 0
 701 0024 BD46     		mov	sp, r7
 702 0026 02B0     		add	sp, sp, #8
 703              		@ sp needed
 704 0028 80BD     		pop	{r7, pc}
 705              	.L48:
 706 002a C046     		.align	2
 707              	.L47:
 708 002c 18001A40 		.word	1075445784
 709              		.cfi_endproc
 710              	.LFE9:
 711              		.size	ADC_SAR_SEQ_SetLowLimit, .-ADC_SAR_SEQ_SetLowLimit
 712              		.section	.text.ADC_SAR_SEQ_SetHighLimit,"ax",%progbits
 713              		.align	2
 714              		.global	ADC_SAR_SEQ_SetHighLimit
 715              		.code	16
 716              		.thumb_func
 717              		.type	ADC_SAR_SEQ_SetHighLimit, %function
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 23


 718              	ADC_SAR_SEQ_SetHighLimit:
 719              	.LFB10:
 533:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 534:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 535:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 536:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetHighLimit
 537:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 538:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 539:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 540:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the low limit parameter for a limit condition.
 541:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 542:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 543:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  highLimit: The high limit for a limit condition.
 544:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 545:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetHighLimit(uint32 highLimit)
 550:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 720              		.loc 1 550 0
 721              		.cfi_startproc
 722 0000 80B5     		push	{r7, lr}
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 82B0     		sub	sp, sp, #8
 727              		.cfi_def_cfa_offset 16
 728 0004 00AF     		add	r7, sp, #0
 729              		.cfi_def_cfa_register 7
 730 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_SEQ_RANGE_HIGH_MASK);
 731              		.loc 1 551 0
 732 0008 074B     		ldr	r3, .L50
 733 000a 074A     		ldr	r2, .L50
 734 000c 1268     		ldr	r2, [r2]
 735 000e 1204     		lsl	r2, r2, #16
 736 0010 120C     		lsr	r2, r2, #16
 737 0012 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_SEQ_RANGE_HIGH_OFFSET);
 738              		.loc 1 552 0
 739 0014 044B     		ldr	r3, .L50
 740 0016 044A     		ldr	r2, .L50
 741 0018 1168     		ldr	r1, [r2]
 742 001a 7A68     		ldr	r2, [r7, #4]
 743 001c 1204     		lsl	r2, r2, #16
 744 001e 0A43     		orr	r2, r1
 745 0020 1A60     		str	r2, [r3]
 553:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 746              		.loc 1 553 0
 747 0022 BD46     		mov	sp, r7
 748 0024 02B0     		add	sp, sp, #8
 749              		@ sp needed
 750 0026 80BD     		pop	{r7, pc}
 751              	.L51:
 752              		.align	2
 753              	.L50:
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 24


 754 0028 18001A40 		.word	1075445784
 755              		.cfi_endproc
 756              	.LFE10:
 757              		.size	ADC_SAR_SEQ_SetHighLimit, .-ADC_SAR_SEQ_SetHighLimit
 758              		.section	.text.ADC_SAR_SEQ_SetLimitMask,"ax",%progbits
 759              		.align	2
 760              		.global	ADC_SAR_SEQ_SetLimitMask
 761              		.code	16
 762              		.thumb_func
 763              		.type	ADC_SAR_SEQ_SetLimitMask, %function
 764              	ADC_SAR_SEQ_SetLimitMask:
 765              	.LFB11:
 554:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 555:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 556:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 557:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetLimitMask
 558:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 559:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 560:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 561:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel limit condition mask.
 562:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 563:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 564:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that may cause a
 565:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 566:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  will have no effect. For example, if only 6 channels were enabled,
 567:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 568:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 569:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 570:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 571:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 572:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 573:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetLimitMask(uint32 mask)
 574:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 766              		.loc 1 574 0
 767              		.cfi_startproc
 768 0000 80B5     		push	{r7, lr}
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 7, -8
 771              		.cfi_offset 14, -4
 772 0002 82B0     		sub	sp, sp, #8
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 575:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 777              		.loc 1 575 0
 778 0008 034B     		ldr	r3, .L53
 779 000a 7968     		ldr	r1, [r7, #4]
 780 000c 0722     		mov	r2, #7
 781 000e 0A40     		and	r2, r1
 782 0010 1A60     		str	r2, [r3]
 576:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 783              		.loc 1 576 0
 784 0012 BD46     		mov	sp, r7
 785 0014 02B0     		add	sp, sp, #8
 786              		@ sp needed
 787 0016 80BD     		pop	{r7, pc}
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 25


 788              	.L54:
 789              		.align	2
 790              	.L53:
 791 0018 38021A40 		.word	1075446328
 792              		.cfi_endproc
 793              	.LFE11:
 794              		.size	ADC_SAR_SEQ_SetLimitMask, .-ADC_SAR_SEQ_SetLimitMask
 795              		.section	.text.ADC_SAR_SEQ_SetSatMask,"ax",%progbits
 796              		.align	2
 797              		.global	ADC_SAR_SEQ_SetSatMask
 798              		.code	16
 799              		.thumb_func
 800              		.type	ADC_SAR_SEQ_SetSatMask, %function
 801              	ADC_SAR_SEQ_SetSatMask:
 802              	.LFB12:
 577:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 578:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetSatMask
 581:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 583:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel saturation event mask.
 585:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 586:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that may cause a
 588:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 589:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  will have no effect. For example, if only 8 channels were enabled,
 590:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 591:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 592:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 593:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 594:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 595:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 596:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetSatMask(uint32 mask)
 597:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 803              		.loc 1 597 0
 804              		.cfi_startproc
 805 0000 80B5     		push	{r7, lr}
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 7, -8
 808              		.cfi_offset 14, -4
 809 0002 82B0     		sub	sp, sp, #8
 810              		.cfi_def_cfa_offset 16
 811 0004 00AF     		add	r7, sp, #0
 812              		.cfi_def_cfa_register 7
 813 0006 7860     		str	r0, [r7, #4]
 598:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 814              		.loc 1 598 0
 815 0008 034B     		ldr	r3, .L56
 816 000a 7968     		ldr	r1, [r7, #4]
 817 000c 0722     		mov	r2, #7
 818 000e 0A40     		and	r2, r1
 819 0010 1A60     		str	r2, [r3]
 599:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 820              		.loc 1 599 0
 821 0012 BD46     		mov	sp, r7
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 26


 822 0014 02B0     		add	sp, sp, #8
 823              		@ sp needed
 824 0016 80BD     		pop	{r7, pc}
 825              	.L57:
 826              		.align	2
 827              	.L56:
 828 0018 28021A40 		.word	1075446312
 829              		.cfi_endproc
 830              	.LFE12:
 831              		.size	ADC_SAR_SEQ_SetSatMask, .-ADC_SAR_SEQ_SetSatMask
 832              		.section	.text.ADC_SAR_SEQ_SetOffset,"ax",%progbits
 833              		.align	2
 834              		.global	ADC_SAR_SEQ_SetOffset
 835              		.code	16
 836              		.thumb_func
 837              		.type	ADC_SAR_SEQ_SetOffset, %function
 838              	ADC_SAR_SEQ_SetOffset:
 839              	.LFB13:
 600:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 601:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 602:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 603:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetOffset
 604:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 605:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 606:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 607:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   Description: Sets the ADC offset which is used by the functions
 608:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 609:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   to substract the offset from the given reading
 610:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   before calculating the voltage conversion.
 611:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 612:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 613:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: ADC channel number.
 614:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  offset: This value is a measured value when the
 615:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *          inputs are shorted or connected to the same input voltage.
 616:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 617:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 618:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 619:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 620:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
 621:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Offset:  Modified to set the user provided offset.
 622:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 623:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 624:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetOffset(uint32 chan, int16 offset)
 625:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 840              		.loc 1 625 0
 841              		.cfi_startproc
 842 0000 80B5     		push	{r7, lr}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 82B0     		sub	sp, sp, #8
 847              		.cfi_def_cfa_offset 16
 848 0004 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 851 0008 0A1C     		mov	r2, r1
 852 000a BB1C     		add	r3, r7, #2
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 27


 853 000c 1A80     		strh	r2, [r3]
 626:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 627:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 854              		.loc 1 627 0
 855 000e 7B68     		ldr	r3, [r7, #4]
 856 0010 022B     		cmp	r3, #2
 857 0012 02D9     		bls	.L59
 858              		.loc 1 627 0 is_stmt 0 discriminator 1
 859 0014 0020     		mov	r0, #0
 860 0016 FFF7FEFF 		bl	CyHalt
 861              	.L59:
 628:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 629:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_offset[chan] = offset;
 862              		.loc 1 629 0 is_stmt 1
 863 001a 044B     		ldr	r3, .L60
 864 001c 7A68     		ldr	r2, [r7, #4]
 865 001e 5200     		lsl	r2, r2, #1
 866 0020 B91C     		add	r1, r7, #2
 867 0022 0988     		ldrh	r1, [r1]
 868 0024 D152     		strh	r1, [r2, r3]
 630:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 869              		.loc 1 630 0
 870 0026 BD46     		mov	sp, r7
 871 0028 02B0     		add	sp, sp, #8
 872              		@ sp needed
 873 002a 80BD     		pop	{r7, pc}
 874              	.L61:
 875              		.align	2
 876              	.L60:
 877 002c 00000000 		.word	ADC_SAR_SEQ_offset
 878              		.cfi_endproc
 879              	.LFE13:
 880              		.size	ADC_SAR_SEQ_SetOffset, .-ADC_SAR_SEQ_SetOffset
 881              		.section	.text.ADC_SAR_SEQ_SetGain,"ax",%progbits
 882              		.align	2
 883              		.global	ADC_SAR_SEQ_SetGain
 884              		.code	16
 885              		.thumb_func
 886              		.type	ADC_SAR_SEQ_SetGain, %function
 887              	ADC_SAR_SEQ_SetGain:
 888              	.LFB14:
 631:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 632:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 633:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 634:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetGain
 635:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 636:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 637:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 638:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 639:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  conversion functions below. This value is set by default by the
 640:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  reference and input range settings. It should only be used to further
 641:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  calibrate the ADC with a known input or if an external reference is
 642:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 643:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 644:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  conversion between ADC counts and voltage.
 645:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 646:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 28


 647:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: ADC channel number.
 648:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  adcGain: ADC gain in counts per 10 volts.
 649:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 650:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 653:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
 654:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_CountsPer10Volt:  modified to set the ADC gain in counts 
 655:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   per 10 volt.
 656:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 657:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 658:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetGain(uint32 chan, int32 adcGain)
 659:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 889              		.loc 1 659 0
 890              		.cfi_startproc
 891 0000 80B5     		push	{r7, lr}
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 7, -8
 894              		.cfi_offset 14, -4
 895 0002 82B0     		sub	sp, sp, #8
 896              		.cfi_def_cfa_offset 16
 897 0004 00AF     		add	r7, sp, #0
 898              		.cfi_def_cfa_register 7
 899 0006 7860     		str	r0, [r7, #4]
 900 0008 3960     		str	r1, [r7]
 660:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 661:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 901              		.loc 1 661 0
 902 000a 7B68     		ldr	r3, [r7, #4]
 903 000c 022B     		cmp	r3, #2
 904 000e 02D9     		bls	.L63
 905              		.loc 1 661 0 is_stmt 0 discriminator 1
 906 0010 0020     		mov	r0, #0
 907 0012 FFF7FEFF 		bl	CyHalt
 908              	.L63:
 662:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 663:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_countsPer10Volt[chan] = adcGain;
 909              		.loc 1 663 0 is_stmt 1
 910 0016 044B     		ldr	r3, .L64
 911 0018 7A68     		ldr	r2, [r7, #4]
 912 001a 9200     		lsl	r2, r2, #2
 913 001c 3968     		ldr	r1, [r7]
 914 001e D150     		str	r1, [r2, r3]
 664:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 915              		.loc 1 664 0
 916 0020 BD46     		mov	sp, r7
 917 0022 02B0     		add	sp, sp, #8
 918              		@ sp needed
 919 0024 80BD     		pop	{r7, pc}
 920              	.L65:
 921 0026 C046     		.align	2
 922              	.L64:
 923 0028 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 924              		.cfi_endproc
 925              	.LFE14:
 926              		.size	ADC_SAR_SEQ_SetGain, .-ADC_SAR_SEQ_SetGain
 927              		.global	__aeabi_idiv
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 29


 928              		.section	.text.ADC_SAR_SEQ_CountsTo_mVolts,"ax",%progbits
 929              		.align	2
 930              		.global	ADC_SAR_SEQ_CountsTo_mVolts
 931              		.code	16
 932              		.thumb_func
 933              		.type	ADC_SAR_SEQ_CountsTo_mVolts, %function
 934              	ADC_SAR_SEQ_CountsTo_mVolts:
 935              	.LFB15:
 665:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 666:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #if(ADC_SAR_SEQ_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_SEQ__RIGHT)
 668:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 669:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 670:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 671:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_mVolts
 672:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 673:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 674:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 675:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function converts ADC counts to mVolts
 676:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 677:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 678:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 679:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 680:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  adcCounts: Result from the ADC conversion
 681:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 682:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 683:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in mVolts
 684:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 685:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 686:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to mVolts.
 687:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts 
 688:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 689:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 690:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int16 ADC_SAR_SEQ_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 692:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 936              		.loc 1 692 0
 937              		.cfi_startproc
 938 0000 80B5     		push	{r7, lr}
 939              		.cfi_def_cfa_offset 8
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0002 84B0     		sub	sp, sp, #16
 943              		.cfi_def_cfa_offset 24
 944 0004 00AF     		add	r7, sp, #0
 945              		.cfi_def_cfa_register 7
 946 0006 7860     		str	r0, [r7, #4]
 947 0008 0A1C     		mov	r2, r1
 948 000a BB1C     		add	r3, r7, #2
 949 000c 1A80     		strh	r2, [r3]
 693:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         int16 mVolts;
 694:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 695:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 696:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 950              		.loc 1 696 0
 951 000e 7B68     		ldr	r3, [r7, #4]
 952 0010 022B     		cmp	r3, #2
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 30


 953 0012 02D9     		bls	.L67
 954              		.loc 1 696 0 is_stmt 0 discriminator 1
 955 0014 0020     		mov	r0, #0
 956 0016 FFF7FEFF 		bl	CyHalt
 957              	.L67:
 697:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 699:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 700:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 701:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 702:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 703:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }    
 704:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 705:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 706:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 707:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 958              		.loc 1 707 0 is_stmt 1
 959 001a BB1C     		add	r3, r7, #2
 960 001c 1A88     		ldrh	r2, [r3]
 961 001e 1E4B     		ldr	r3, .L73
 962 0020 7968     		ldr	r1, [r7, #4]
 963 0022 4900     		lsl	r1, r1, #1
 964 0024 CB5A     		ldrh	r3, [r1, r3]
 965 0026 9BB2     		uxth	r3, r3
 966 0028 9BB2     		uxth	r3, r3
 967 002a D31A     		sub	r3, r2, r3
 968 002c 9AB2     		uxth	r2, r3
 969 002e BB1C     		add	r3, r7, #2
 970 0030 1A80     		strh	r2, [r3]
 708:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 709:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_SEQ_10MV_COUNTS) + ( (adcCounts > 0) ? 
 971              		.loc 1 709 0
 972 0032 BB1C     		add	r3, r7, #2
 973 0034 0021     		mov	r1, #0
 974 0036 5B5E     		ldrsh	r3, [r3, r1]
 975 0038 184A     		ldr	r2, .L73+4
 976 003a 5A43     		mul	r2, r3
 710:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (ADC_SAR_SEQ_countsPer10Volt[chan] / 2) : (-(ADC_SAR_SEQ_countsPer10Volt[chan] / 2
 977              		.loc 1 710 0
 978 003c BB1C     		add	r3, r7, #2
 979 003e 0021     		mov	r1, #0
 980 0040 5B5E     		ldrsh	r3, [r3, r1]
 981 0042 002B     		cmp	r3, #0
 982 0044 08DD     		ble	.L68
 983              		.loc 1 710 0 is_stmt 0 discriminator 1
 984 0046 164B     		ldr	r3, .L73+8
 985 0048 7968     		ldr	r1, [r7, #4]
 986 004a 8900     		lsl	r1, r1, #2
 987 004c CB58     		ldr	r3, [r1, r3]
 988 004e 002B     		cmp	r3, #0
 989 0050 00DA     		bge	.L69
 990 0052 0133     		add	r3, r3, #1
 991              	.L69:
 992 0054 5B10     		asr	r3, r3, #1
 993 0056 08E0     		b	.L70
 994              	.L68:
 995              		.loc 1 710 0 discriminator 2
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 31


 996 0058 114B     		ldr	r3, .L73+8
 997 005a 7968     		ldr	r1, [r7, #4]
 998 005c 8900     		lsl	r1, r1, #2
 999 005e CB58     		ldr	r3, [r1, r3]
 1000 0060 002B     		cmp	r3, #0
 1001 0062 00DA     		bge	.L71
 1002 0064 0133     		add	r3, r3, #1
 1003              	.L71:
 1004 0066 5B10     		asr	r3, r3, #1
 1005 0068 5B42     		neg	r3, r3
 1006              	.L70:
 709:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_SEQ_10MV_COUNTS) + ( (adcCounts > 0) ? 
 1007              		.loc 1 709 0 is_stmt 1
 1008 006a D218     		add	r2, r2, r3
 711:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  / ADC_SAR_SEQ_countsPer10Volt[chan]);
 1009              		.loc 1 711 0
 1010 006c 0C4B     		ldr	r3, .L73+8
 1011 006e 7968     		ldr	r1, [r7, #4]
 1012 0070 8900     		lsl	r1, r1, #2
 1013 0072 CB58     		ldr	r3, [r1, r3]
 1014 0074 101C     		mov	r0, r2
 1015 0076 191C     		mov	r1, r3
 1016 0078 FFF7FEFF 		bl	__aeabi_idiv
 1017 007c 031C     		mov	r3, r0
 1018 007e 1A1C     		mov	r2, r3
 709:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_SEQ_10MV_COUNTS) + ( (adcCounts > 0) ? 
 1019              		.loc 1 709 0
 1020 0080 3B1C     		mov	r3, r7
 1021 0082 0E33     		add	r3, r3, #14
 1022 0084 1A80     		strh	r2, [r3]
 712:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 713:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( mVolts );
 1023              		.loc 1 713 0
 1024 0086 3B1C     		mov	r3, r7
 1025 0088 0E33     		add	r3, r3, #14
 1026 008a 1B88     		ldrh	r3, [r3]
 1027 008c 1BB2     		sxth	r3, r3
 714:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1028              		.loc 1 714 0
 1029 008e 181C     		mov	r0, r3
 1030 0090 BD46     		mov	sp, r7
 1031 0092 04B0     		add	sp, sp, #16
 1032              		@ sp needed
 1033 0094 80BD     		pop	{r7, pc}
 1034              	.L74:
 1035 0096 C046     		.align	2
 1036              	.L73:
 1037 0098 00000000 		.word	ADC_SAR_SEQ_offset
 1038 009c 10270000 		.word	10000
 1039 00a0 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1040              		.cfi_endproc
 1041              	.LFE15:
 1042              		.size	ADC_SAR_SEQ_CountsTo_mVolts, .-ADC_SAR_SEQ_CountsTo_mVolts
 1043              		.global	__aeabi_lmul
 1044              		.global	__aeabi_ldivmod
 1045              		.section	.text.ADC_SAR_SEQ_CountsTo_uVolts,"ax",%progbits
 1046              		.align	2
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 32


 1047              		.global	ADC_SAR_SEQ_CountsTo_uVolts
 1048              		.code	16
 1049              		.thumb_func
 1050              		.type	ADC_SAR_SEQ_CountsTo_uVolts, %function
 1051              	ADC_SAR_SEQ_CountsTo_uVolts:
 1052              	.LFB16:
 715:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 716:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 717:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 718:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_uVolts
 719:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 720:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 721:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 722:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function converts ADC counts to micro Volts
 723:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 724:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 725:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 726:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 727:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  adcCounts: Result from the ADC conversion
 728:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 729:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 730:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in uVolts
 731:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 732:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 733:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to uVolts.
 734:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts 
 735:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 736:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 737:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Theory: 
 738:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 739:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  number in the conversion to uVolts and at the same time not loose 
 740:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  resolution.
 741:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 742:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  on 10 million and later divide on gain in counts per 10V. 
 743:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 744:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 745:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int32 ADC_SAR_SEQ_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 746:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 1053              		.loc 1 746 0
 1054              		.cfi_startproc
 1055 0000 B0B5     		push	{r4, r5, r7, lr}
 1056              		.cfi_def_cfa_offset 16
 1057              		.cfi_offset 4, -16
 1058              		.cfi_offset 5, -12
 1059              		.cfi_offset 7, -8
 1060              		.cfi_offset 14, -4
 1061 0002 86B0     		sub	sp, sp, #24
 1062              		.cfi_def_cfa_offset 40
 1063 0004 00AF     		add	r7, sp, #0
 1064              		.cfi_def_cfa_register 7
 1065 0006 F860     		str	r0, [r7, #12]
 1066 0008 0A1C     		mov	r2, r1
 1067 000a 3B1C     		mov	r3, r7
 1068 000c 0A33     		add	r3, r3, #10
 1069 000e 1A80     		strh	r2, [r3]
 747:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         int64 uVolts;
 748:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 33


 749:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 750:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1070              		.loc 1 750 0
 1071 0010 FB68     		ldr	r3, [r7, #12]
 1072 0012 022B     		cmp	r3, #2
 1073 0014 02D9     		bls	.L76
 1074              		.loc 1 750 0 is_stmt 0 discriminator 1
 1075 0016 0020     		mov	r0, #0
 1076 0018 FFF7FEFF 		bl	CyHalt
 1077              	.L76:
 751:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 752:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 753:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 754:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 755:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 756:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 757:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }    
 758:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 759:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 760:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 761:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 1078              		.loc 1 761 0 is_stmt 1
 1079 001c 3B1C     		mov	r3, r7
 1080 001e 0A33     		add	r3, r3, #10
 1081 0020 1A88     		ldrh	r2, [r3]
 1082 0022 1B4B     		ldr	r3, .L78+8
 1083 0024 F968     		ldr	r1, [r7, #12]
 1084 0026 4900     		lsl	r1, r1, #1
 1085 0028 CB5A     		ldrh	r3, [r1, r3]
 1086 002a 9BB2     		uxth	r3, r3
 1087 002c 9BB2     		uxth	r3, r3
 1088 002e D31A     		sub	r3, r2, r3
 1089 0030 9AB2     		uxth	r2, r3
 1090 0032 3B1C     		mov	r3, r7
 1091 0034 0A33     		add	r3, r3, #10
 1092 0036 1A80     		strh	r2, [r3]
 762:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 763:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         uVolts = ((int64)adcCounts * ADC_SAR_SEQ_10UV_COUNTS) / ADC_SAR_SEQ_countsPer10Volt[chan];
 1093              		.loc 1 763 0
 1094 0038 3B1C     		mov	r3, r7
 1095 003a 0A33     		add	r3, r3, #10
 1096 003c 1B88     		ldrh	r3, [r3]
 1097 003e 1BB2     		sxth	r3, r3
 1098 0040 3B60     		str	r3, [r7]
 1099 0042 DB17     		asr	r3, r3, #31
 1100 0044 7B60     		str	r3, [r7, #4]
 1101 0046 3868     		ldr	r0, [r7]
 1102 0048 7968     		ldr	r1, [r7, #4]
 1103 004a 104B     		ldr	r3, .L78+4
 1104 004c 0E4A     		ldr	r2, .L78
 1105 004e FFF7FEFF 		bl	__aeabi_lmul
 1106 0052 021C     		mov	r2, r0
 1107 0054 0B1C     		mov	r3, r1
 1108 0056 0F49     		ldr	r1, .L78+12
 1109 0058 F868     		ldr	r0, [r7, #12]
 1110 005a 8000     		lsl	r0, r0, #2
 1111 005c 4158     		ldr	r1, [r0, r1]
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 34


 1112 005e 0C1C     		mov	r4, r1
 1113 0060 C917     		asr	r1, r1, #31
 1114 0062 0D1C     		mov	r5, r1
 1115 0064 101C     		mov	r0, r2
 1116 0066 191C     		mov	r1, r3
 1117 0068 221C     		mov	r2, r4
 1118 006a 2B1C     		mov	r3, r5
 1119 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1120 0070 031C     		mov	r3, r0
 1121 0072 0C1C     		mov	r4, r1
 1122 0074 3B61     		str	r3, [r7, #16]
 1123 0076 7C61     		str	r4, [r7, #20]
 764:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 765:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( (int32)uVolts );
 1124              		.loc 1 765 0
 1125 0078 3B69     		ldr	r3, [r7, #16]
 766:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1126              		.loc 1 766 0
 1127 007a 181C     		mov	r0, r3
 1128 007c BD46     		mov	sp, r7
 1129 007e 06B0     		add	sp, sp, #24
 1130              		@ sp needed
 1131 0080 B0BD     		pop	{r4, r5, r7, pc}
 1132              	.L79:
 1133 0082 C046C046 		.align	3
 1133      C046
 1134              	.L78:
 1135 0088 80969800 		.word	10000000
 1136 008c 00000000 		.word	0
 1137 0090 00000000 		.word	ADC_SAR_SEQ_offset
 1138 0094 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1139              		.cfi_endproc
 1140              	.LFE16:
 1141              		.size	ADC_SAR_SEQ_CountsTo_uVolts, .-ADC_SAR_SEQ_CountsTo_uVolts
 1142              		.global	__aeabi_i2f
 1143              		.global	__aeabi_fmul
 1144              		.global	__aeabi_fdiv
 1145              		.section	.text.ADC_SAR_SEQ_CountsTo_Volts,"ax",%progbits
 1146              		.align	2
 1147              		.global	ADC_SAR_SEQ_CountsTo_Volts
 1148              		.code	16
 1149              		.thumb_func
 1150              		.type	ADC_SAR_SEQ_CountsTo_Volts, %function
 1151              	ADC_SAR_SEQ_CountsTo_Volts:
 1152              	.LFB17:
 767:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 768:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 769:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 770:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_Volts
 771:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 772:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 773:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 774:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Converts the ADC output to Volts as a floating point number.
 775:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 776:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 777:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 778:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 35


 779:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Result from the ADC conversion
 780:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 781:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 782:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in Volts
 783:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 784:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 785:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to Volts.
 786:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts 
 787:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 788:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 789:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     float32 ADC_SAR_SEQ_CountsTo_Volts(uint32 chan, int16 adcCounts)
 791:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 1153              		.loc 1 791 0
 1154              		.cfi_startproc
 1155 0000 90B5     		push	{r4, r7, lr}
 1156              		.cfi_def_cfa_offset 12
 1157              		.cfi_offset 4, -12
 1158              		.cfi_offset 7, -8
 1159              		.cfi_offset 14, -4
 1160 0002 85B0     		sub	sp, sp, #20
 1161              		.cfi_def_cfa_offset 32
 1162 0004 00AF     		add	r7, sp, #0
 1163              		.cfi_def_cfa_register 7
 1164 0006 7860     		str	r0, [r7, #4]
 1165 0008 0A1C     		mov	r2, r1
 1166 000a BB1C     		add	r3, r7, #2
 1167 000c 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         float32 volts;
 793:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 794:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 795:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1168              		.loc 1 795 0
 1169 000e 7B68     		ldr	r3, [r7, #4]
 1170 0010 022B     		cmp	r3, #2
 1171 0012 02D9     		bls	.L81
 1172              		.loc 1 795 0 is_stmt 0 discriminator 1
 1173 0014 0020     		mov	r0, #0
 1174 0016 FFF7FEFF 		bl	CyHalt
 1175              	.L81:
 796:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 797:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 798:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 799:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 800:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 801:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 802:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }    
 803:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 804:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 805:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 806:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 1176              		.loc 1 806 0 is_stmt 1
 1177 001a BB1C     		add	r3, r7, #2
 1178 001c 1A88     		ldrh	r2, [r3]
 1179 001e 154B     		ldr	r3, .L83
 1180 0020 7968     		ldr	r1, [r7, #4]
 1181 0022 4900     		lsl	r1, r1, #1
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 36


 1182 0024 CB5A     		ldrh	r3, [r1, r3]
 1183 0026 9BB2     		uxth	r3, r3
 1184 0028 9BB2     		uxth	r3, r3
 1185 002a D31A     		sub	r3, r2, r3
 1186 002c 9AB2     		uxth	r2, r3
 1187 002e BB1C     		add	r3, r7, #2
 1188 0030 1A80     		strh	r2, [r3]
 807:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 808:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         volts = ((float32)adcCounts * ADC_SAR_SEQ_10V_COUNTS) / (float32)ADC_SAR_SEQ_countsPer10Vol
 1189              		.loc 1 808 0
 1190 0032 BB1C     		add	r3, r7, #2
 1191 0034 0022     		mov	r2, #0
 1192 0036 9B5E     		ldrsh	r3, [r3, r2]
 1193 0038 181C     		mov	r0, r3
 1194 003a FFF7FEFF 		bl	__aeabi_i2f
 1195 003e 031C     		add	r3, r0, #0
 1196 0040 181C     		add	r0, r3, #0
 1197 0042 0D49     		ldr	r1, .L83+4
 1198 0044 FFF7FEFF 		bl	__aeabi_fmul
 1199 0048 031C     		add	r3, r0, #0
 1200 004a 1C1C     		add	r4, r3, #0
 1201 004c 0B4B     		ldr	r3, .L83+8
 1202 004e 7A68     		ldr	r2, [r7, #4]
 1203 0050 9200     		lsl	r2, r2, #2
 1204 0052 D358     		ldr	r3, [r2, r3]
 1205 0054 181C     		mov	r0, r3
 1206 0056 FFF7FEFF 		bl	__aeabi_i2f
 1207 005a 031C     		add	r3, r0, #0
 1208 005c 201C     		add	r0, r4, #0
 1209 005e 191C     		add	r1, r3, #0
 1210 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1211 0064 031C     		add	r3, r0, #0
 1212 0066 FB60     		str	r3, [r7, #12]
 809:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 810:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( volts );
 1213              		.loc 1 810 0
 1214 0068 FB68     		ldr	r3, [r7, #12]
 811:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1215              		.loc 1 811 0
 1216 006a 181C     		add	r0, r3, #0
 1217 006c BD46     		mov	sp, r7
 1218 006e 05B0     		add	sp, sp, #20
 1219              		@ sp needed
 1220 0070 90BD     		pop	{r4, r7, pc}
 1221              	.L84:
 1222 0072 C046     		.align	2
 1223              	.L83:
 1224 0074 00000000 		.word	ADC_SAR_SEQ_offset
 1225 0078 00002041 		.word	1092616192
 1226 007c 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1227              		.cfi_endproc
 1228              	.LFE17:
 1229              		.size	ADC_SAR_SEQ_CountsTo_Volts, .-ADC_SAR_SEQ_CountsTo_Volts
 1230              		.section	.rodata
 1231              		.align	2
 1232              		.type	ADC_SAR_SEQ_InputsPlacement.4681, %object
 1233              		.size	ADC_SAR_SEQ_InputsPlacement.4681, 3
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 37


 1234              	ADC_SAR_SEQ_InputsPlacement.4681:
 1235 000c 07       		.byte	7
 1236 000d 06       		.byte	6
 1237 000e 12       		.byte	18
 1238 000f 00       		.text
 1239              	.Letext0:
 1240              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1241              		.section	.debug_info,"",%progbits
 1242              	.Ldebug_info0:
 1243 0000 95040000 		.4byte	0x495
 1244 0004 0400     		.2byte	0x4
 1245 0006 00000000 		.4byte	.Ldebug_abbrev0
 1246 000a 04       		.byte	0x4
 1247 000b 01       		.uleb128 0x1
 1248 000c 2A020000 		.4byte	.LASF60
 1249 0010 01       		.byte	0x1
 1250 0011 52000000 		.4byte	.LASF61
 1251 0015 9E010000 		.4byte	.LASF62
 1252 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1253 001d 00000000 		.4byte	0
 1254 0021 00000000 		.4byte	.Ldebug_line0
 1255 0025 02       		.uleb128 0x2
 1256 0026 01       		.byte	0x1
 1257 0027 06       		.byte	0x6
 1258 0028 C9000000 		.4byte	.LASF0
 1259 002c 02       		.uleb128 0x2
 1260 002d 01       		.byte	0x1
 1261 002e 08       		.byte	0x8
 1262 002f 7D030000 		.4byte	.LASF1
 1263 0033 02       		.uleb128 0x2
 1264 0034 02       		.byte	0x2
 1265 0035 05       		.byte	0x5
 1266 0036 8B030000 		.4byte	.LASF2
 1267 003a 02       		.uleb128 0x2
 1268 003b 02       		.byte	0x2
 1269 003c 07       		.byte	0x7
 1270 003d 8B010000 		.4byte	.LASF3
 1271 0041 02       		.uleb128 0x2
 1272 0042 04       		.byte	0x4
 1273 0043 05       		.byte	0x5
 1274 0044 DB000000 		.4byte	.LASF4
 1275 0048 02       		.uleb128 0x2
 1276 0049 04       		.byte	0x4
 1277 004a 07       		.byte	0x7
 1278 004b 69010000 		.4byte	.LASF5
 1279 004f 02       		.uleb128 0x2
 1280 0050 08       		.byte	0x8
 1281 0051 05       		.byte	0x5
 1282 0052 BB000000 		.4byte	.LASF6
 1283 0056 02       		.uleb128 0x2
 1284 0057 08       		.byte	0x8
 1285 0058 07       		.byte	0x7
 1286 0059 79000000 		.4byte	.LASF7
 1287 005d 03       		.uleb128 0x3
 1288 005e 04       		.byte	0x4
 1289 005f 05       		.byte	0x5
 1290 0060 696E7400 		.ascii	"int\000"
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 38


 1291 0064 02       		.uleb128 0x2
 1292 0065 04       		.byte	0x4
 1293 0066 07       		.byte	0x7
 1294 0067 39010000 		.4byte	.LASF8
 1295 006b 04       		.uleb128 0x4
 1296 006c E4000000 		.4byte	.LASF9
 1297 0070 02       		.byte	0x2
 1298 0071 5B       		.byte	0x5b
 1299 0072 2C000000 		.4byte	0x2c
 1300 0076 04       		.uleb128 0x4
 1301 0077 00000000 		.4byte	.LASF10
 1302 007b 02       		.byte	0x2
 1303 007c 5C       		.byte	0x5c
 1304 007d 3A000000 		.4byte	0x3a
 1305 0081 04       		.uleb128 0x4
 1306 0082 25010000 		.4byte	.LASF11
 1307 0086 02       		.byte	0x2
 1308 0087 5D       		.byte	0x5d
 1309 0088 48000000 		.4byte	0x48
 1310 008c 04       		.uleb128 0x4
 1311 008d 75040000 		.4byte	.LASF12
 1312 0091 02       		.byte	0x2
 1313 0092 5F       		.byte	0x5f
 1314 0093 33000000 		.4byte	0x33
 1315 0097 04       		.uleb128 0x4
 1316 0098 D5000000 		.4byte	.LASF13
 1317 009c 02       		.byte	0x2
 1318 009d 60       		.byte	0x60
 1319 009e 41000000 		.4byte	0x41
 1320 00a2 04       		.uleb128 0x4
 1321 00a3 F9020000 		.4byte	.LASF14
 1322 00a7 02       		.byte	0x2
 1323 00a8 61       		.byte	0x61
 1324 00a9 AD000000 		.4byte	0xad
 1325 00ad 02       		.uleb128 0x2
 1326 00ae 04       		.byte	0x4
 1327 00af 04       		.byte	0x4
 1328 00b0 54030000 		.4byte	.LASF15
 1329 00b4 02       		.uleb128 0x2
 1330 00b5 08       		.byte	0x8
 1331 00b6 04       		.byte	0x4
 1332 00b7 02010000 		.4byte	.LASF16
 1333 00bb 04       		.uleb128 0x4
 1334 00bc 2A030000 		.4byte	.LASF17
 1335 00c0 02       		.byte	0x2
 1336 00c1 66       		.byte	0x66
 1337 00c2 4F000000 		.4byte	0x4f
 1338 00c6 02       		.uleb128 0x2
 1339 00c7 01       		.byte	0x1
 1340 00c8 08       		.byte	0x8
 1341 00c9 27040000 		.4byte	.LASF18
 1342 00cd 04       		.uleb128 0x4
 1343 00ce F3020000 		.4byte	.LASF19
 1344 00d2 02       		.byte	0x2
 1345 00d3 F2       		.byte	0xf2
 1346 00d4 D8000000 		.4byte	0xd8
 1347 00d8 05       		.uleb128 0x5
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 39


 1348 00d9 81000000 		.4byte	0x81
 1349 00dd 02       		.uleb128 0x2
 1350 00de 04       		.byte	0x4
 1351 00df 07       		.byte	0x7
 1352 00e0 01030000 		.4byte	.LASF20
 1353 00e4 06       		.uleb128 0x6
 1354 00e5 40000000 		.4byte	.LASF25
 1355 00e9 01       		.byte	0x1
 1356 00ea 40       		.byte	0x40
 1357 00eb 00000000 		.4byte	.LFB0
 1358 00ef 24000000 		.4byte	.LFE0-.LFB0
 1359 00f3 01       		.uleb128 0x1
 1360 00f4 9C       		.byte	0x9c
 1361 00f5 07       		.uleb128 0x7
 1362 00f6 7B040000 		.4byte	.LASF36
 1363 00fa 01       		.byte	0x1
 1364 00fb 5F       		.byte	0x5f
 1365 00fc 00000000 		.4byte	.LFB1
 1366 0100 E4010000 		.4byte	.LFE1-.LFB1
 1367 0104 01       		.uleb128 0x1
 1368 0105 9C       		.byte	0x9c
 1369 0106 46010000 		.4byte	0x146
 1370 010a 08       		.uleb128 0x8
 1371 010b ED030000 		.4byte	.LASF21
 1372 010f 01       		.byte	0x1
 1373 0110 61       		.byte	0x61
 1374 0111 81000000 		.4byte	0x81
 1375 0115 02       		.uleb128 0x2
 1376 0116 91       		.byte	0x91
 1377 0117 6C       		.sleb128 -20
 1378 0118 08       		.uleb128 0x8
 1379 0119 81010000 		.4byte	.LASF22
 1380 011d 01       		.byte	0x1
 1381 011e 62       		.byte	0x62
 1382 011f 81000000 		.4byte	0x81
 1383 0123 02       		.uleb128 0x2
 1384 0124 91       		.byte	0x91
 1385 0125 64       		.sleb128 -28
 1386 0126 08       		.uleb128 0x8
 1387 0127 0F000000 		.4byte	.LASF23
 1388 012b 01       		.byte	0x1
 1389 012c 63       		.byte	0x63
 1390 012d 97000000 		.4byte	0x97
 1391 0131 02       		.uleb128 0x2
 1392 0132 91       		.byte	0x91
 1393 0133 68       		.sleb128 -24
 1394 0134 08       		.uleb128 0x8
 1395 0135 09010000 		.4byte	.LASF24
 1396 0139 01       		.byte	0x1
 1397 013a 66       		.byte	0x66
 1398 013b 56010000 		.4byte	0x156
 1399 013f 05       		.uleb128 0x5
 1400 0140 03       		.byte	0x3
 1401 0141 0C000000 		.4byte	ADC_SAR_SEQ_InputsPlacement.4681
 1402 0145 00       		.byte	0
 1403 0146 09       		.uleb128 0x9
 1404 0147 6B000000 		.4byte	0x6b
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 40


 1405 014b 56010000 		.4byte	0x156
 1406 014f 0A       		.uleb128 0xa
 1407 0150 DD000000 		.4byte	0xdd
 1408 0154 02       		.byte	0x2
 1409 0155 00       		.byte	0
 1410 0156 0B       		.uleb128 0xb
 1411 0157 46010000 		.4byte	0x146
 1412 015b 0C       		.uleb128 0xc
 1413 015c 41030000 		.4byte	.LASF26
 1414 0160 01       		.byte	0x1
 1415 0161 1501     		.2byte	0x115
 1416 0163 00000000 		.4byte	.LFB2
 1417 0167 20000000 		.4byte	.LFE2-.LFB2
 1418 016b 01       		.uleb128 0x1
 1419 016c 9C       		.byte	0x9c
 1420 016d 0D       		.uleb128 0xd
 1421 016e 30030000 		.4byte	.LASF27
 1422 0172 01       		.byte	0x1
 1423 0173 2C01     		.2byte	0x12c
 1424 0175 00000000 		.4byte	.LFB3
 1425 0179 18000000 		.4byte	.LFE3-.LFB3
 1426 017d 01       		.uleb128 0x1
 1427 017e 9C       		.byte	0x9c
 1428 017f 0D       		.uleb128 0xd
 1429 0180 D4030000 		.4byte	.LASF28
 1430 0184 01       		.byte	0x1
 1431 0185 4601     		.2byte	0x146
 1432 0187 00000000 		.4byte	.LFB4
 1433 018b 1C000000 		.4byte	.LFE4-.LFB4
 1434 018f 01       		.uleb128 0x1
 1435 0190 9C       		.byte	0x9c
 1436 0191 0D       		.uleb128 0xd
 1437 0192 EA000000 		.4byte	.LASF29
 1438 0196 01       		.byte	0x1
 1439 0197 5F01     		.2byte	0x15f
 1440 0199 00000000 		.4byte	.LFB5
 1441 019d 1C000000 		.4byte	.LFE5-.LFB5
 1442 01a1 01       		.uleb128 0x1
 1443 01a2 9C       		.byte	0x9c
 1444 01a3 0E       		.uleb128 0xe
 1445 01a4 95030000 		.4byte	.LASF31
 1446 01a8 01       		.byte	0x1
 1447 01a9 8101     		.2byte	0x181
 1448 01ab 81000000 		.4byte	0x81
 1449 01af 00000000 		.4byte	.LFB6
 1450 01b3 48000000 		.4byte	.LFE6-.LFB6
 1451 01b7 01       		.uleb128 0x1
 1452 01b8 9C       		.byte	0x9c
 1453 01b9 DC010000 		.4byte	0x1dc
 1454 01bd 0F       		.uleb128 0xf
 1455 01be 31010000 		.4byte	.LASF33
 1456 01c2 01       		.byte	0x1
 1457 01c3 8101     		.2byte	0x181
 1458 01c5 81000000 		.4byte	0x81
 1459 01c9 02       		.uleb128 0x2
 1460 01ca 91       		.byte	0x91
 1461 01cb 6C       		.sleb128 -20
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 41


 1462 01cc 10       		.uleb128 0x10
 1463 01cd 6E040000 		.4byte	.LASF30
 1464 01d1 01       		.byte	0x1
 1465 01d2 8301     		.2byte	0x183
 1466 01d4 81000000 		.4byte	0x81
 1467 01d8 02       		.uleb128 0x2
 1468 01d9 91       		.byte	0x91
 1469 01da 74       		.sleb128 -12
 1470 01db 00       		.byte	0
 1471 01dc 11       		.uleb128 0x11
 1472 01dd 2C040000 		.4byte	.LASF32
 1473 01e1 01       		.byte	0x1
 1474 01e2 B701     		.2byte	0x1b7
 1475 01e4 8C000000 		.4byte	0x8c
 1476 01e8 00000000 		.4byte	.LFB7
 1477 01ec 44000000 		.4byte	.LFE7-.LFB7
 1478 01f0 01       		.uleb128 0x1
 1479 01f1 9C       		.byte	0x9c
 1480 01f2 15020000 		.4byte	0x215
 1481 01f6 0F       		.uleb128 0xf
 1482 01f7 22040000 		.4byte	.LASF34
 1483 01fb 01       		.byte	0x1
 1484 01fc B701     		.2byte	0x1b7
 1485 01fe 81000000 		.4byte	0x81
 1486 0202 02       		.uleb128 0x2
 1487 0203 91       		.byte	0x91
 1488 0204 6C       		.sleb128 -20
 1489 0205 10       		.uleb128 0x10
 1490 0206 8C040000 		.4byte	.LASF35
 1491 020a 01       		.byte	0x1
 1492 020b B901     		.2byte	0x1b9
 1493 020d 81000000 		.4byte	0x81
 1494 0211 02       		.uleb128 0x2
 1495 0212 91       		.byte	0x91
 1496 0213 74       		.sleb128 -12
 1497 0214 00       		.byte	0
 1498 0215 12       		.uleb128 0x12
 1499 0216 A3000000 		.4byte	.LASF37
 1500 021a 01       		.byte	0x1
 1501 021b E401     		.2byte	0x1e4
 1502 021d 00000000 		.4byte	.LFB8
 1503 0221 1C000000 		.4byte	.LFE8-.LFB8
 1504 0225 01       		.uleb128 0x1
 1505 0226 9C       		.byte	0x9c
 1506 0227 3B020000 		.4byte	0x23b
 1507 022b 0F       		.uleb128 0xf
 1508 022c 2C010000 		.4byte	.LASF38
 1509 0230 01       		.byte	0x1
 1510 0231 E401     		.2byte	0x1e4
 1511 0233 81000000 		.4byte	0x81
 1512 0237 02       		.uleb128 0x2
 1513 0238 91       		.byte	0x91
 1514 0239 74       		.sleb128 -12
 1515 023a 00       		.byte	0
 1516 023b 12       		.uleb128 0x12
 1517 023c 12020000 		.4byte	.LASF39
 1518 0240 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 42


 1519 0241 1002     		.2byte	0x210
 1520 0243 00000000 		.4byte	.LFB9
 1521 0247 30000000 		.4byte	.LFE9-.LFB9
 1522 024b 01       		.uleb128 0x1
 1523 024c 9C       		.byte	0x9c
 1524 024d 61020000 		.4byte	0x261
 1525 0251 0F       		.uleb128 0xf
 1526 0252 0A030000 		.4byte	.LASF40
 1527 0256 01       		.byte	0x1
 1528 0257 1002     		.2byte	0x210
 1529 0259 81000000 		.4byte	0x81
 1530 025d 02       		.uleb128 0x2
 1531 025e 91       		.byte	0x91
 1532 025f 74       		.sleb128 -12
 1533 0260 00       		.byte	0
 1534 0261 12       		.uleb128 0x12
 1535 0262 4B040000 		.4byte	.LASF41
 1536 0266 01       		.byte	0x1
 1537 0267 2502     		.2byte	0x225
 1538 0269 00000000 		.4byte	.LFB10
 1539 026d 2C000000 		.4byte	.LFE10-.LFB10
 1540 0271 01       		.uleb128 0x1
 1541 0272 9C       		.byte	0x9c
 1542 0273 87020000 		.4byte	0x287
 1543 0277 0F       		.uleb128 0xf
 1544 0278 5A030000 		.4byte	.LASF42
 1545 027c 01       		.byte	0x1
 1546 027d 2502     		.2byte	0x225
 1547 027f 81000000 		.4byte	0x81
 1548 0283 02       		.uleb128 0x2
 1549 0284 91       		.byte	0x91
 1550 0285 74       		.sleb128 -12
 1551 0286 00       		.byte	0
 1552 0287 12       		.uleb128 0x12
 1553 0288 64030000 		.4byte	.LASF43
 1554 028c 01       		.byte	0x1
 1555 028d 3D02     		.2byte	0x23d
 1556 028f 00000000 		.4byte	.LFB11
 1557 0293 1C000000 		.4byte	.LFE11-.LFB11
 1558 0297 01       		.uleb128 0x1
 1559 0298 9C       		.byte	0x9c
 1560 0299 AD020000 		.4byte	0x2ad
 1561 029d 0F       		.uleb128 0xf
 1562 029e 2C010000 		.4byte	.LASF38
 1563 02a2 01       		.byte	0x1
 1564 02a3 3D02     		.2byte	0x23d
 1565 02a5 81000000 		.4byte	0x81
 1566 02a9 02       		.uleb128 0x2
 1567 02aa 91       		.byte	0x91
 1568 02ab 74       		.sleb128 -12
 1569 02ac 00       		.byte	0
 1570 02ad 12       		.uleb128 0x12
 1571 02ae 13030000 		.4byte	.LASF44
 1572 02b2 01       		.byte	0x1
 1573 02b3 5402     		.2byte	0x254
 1574 02b5 00000000 		.4byte	.LFB12
 1575 02b9 1C000000 		.4byte	.LFE12-.LFB12
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 43


 1576 02bd 01       		.uleb128 0x1
 1577 02be 9C       		.byte	0x9c
 1578 02bf D3020000 		.4byte	0x2d3
 1579 02c3 0F       		.uleb128 0xf
 1580 02c4 2C010000 		.4byte	.LASF38
 1581 02c8 01       		.byte	0x1
 1582 02c9 5402     		.2byte	0x254
 1583 02cb 81000000 		.4byte	0x81
 1584 02cf 02       		.uleb128 0x2
 1585 02d0 91       		.byte	0x91
 1586 02d1 74       		.sleb128 -12
 1587 02d2 00       		.byte	0
 1588 02d3 13       		.uleb128 0x13
 1589 02d4 2A000000 		.4byte	.LASF45
 1590 02d8 01       		.byte	0x1
 1591 02d9 7002     		.2byte	0x270
 1592 02db 00000000 		.4byte	.LFB13
 1593 02df 30000000 		.4byte	.LFE13-.LFB13
 1594 02e3 01       		.uleb128 0x1
 1595 02e4 9C       		.byte	0x9c
 1596 02e5 08030000 		.4byte	0x308
 1597 02e9 0F       		.uleb128 0xf
 1598 02ea 22040000 		.4byte	.LASF34
 1599 02ee 01       		.byte	0x1
 1600 02ef 7002     		.2byte	0x270
 1601 02f1 81000000 		.4byte	0x81
 1602 02f5 02       		.uleb128 0x2
 1603 02f6 91       		.byte	0x91
 1604 02f7 74       		.sleb128 -12
 1605 02f8 0F       		.uleb128 0xf
 1606 02f9 44040000 		.4byte	.LASF46
 1607 02fd 01       		.byte	0x1
 1608 02fe 7002     		.2byte	0x270
 1609 0300 8C000000 		.4byte	0x8c
 1610 0304 02       		.uleb128 0x2
 1611 0305 91       		.byte	0x91
 1612 0306 72       		.sleb128 -14
 1613 0307 00       		.byte	0
 1614 0308 13       		.uleb128 0x13
 1615 0309 16000000 		.4byte	.LASF47
 1616 030d 01       		.byte	0x1
 1617 030e 9202     		.2byte	0x292
 1618 0310 00000000 		.4byte	.LFB14
 1619 0314 2C000000 		.4byte	.LFE14-.LFB14
 1620 0318 01       		.uleb128 0x1
 1621 0319 9C       		.byte	0x9c
 1622 031a 3D030000 		.4byte	0x33d
 1623 031e 0F       		.uleb128 0xf
 1624 031f 22040000 		.4byte	.LASF34
 1625 0323 01       		.byte	0x1
 1626 0324 9202     		.2byte	0x292
 1627 0326 81000000 		.4byte	0x81
 1628 032a 02       		.uleb128 0x2
 1629 032b 91       		.byte	0x91
 1630 032c 74       		.sleb128 -12
 1631 032d 0F       		.uleb128 0xf
 1632 032e 07000000 		.4byte	.LASF48
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 44


 1633 0332 01       		.byte	0x1
 1634 0333 9202     		.2byte	0x292
 1635 0335 97000000 		.4byte	0x97
 1636 0339 02       		.uleb128 0x2
 1637 033a 91       		.byte	0x91
 1638 033b 70       		.sleb128 -16
 1639 033c 00       		.byte	0
 1640 033d 11       		.uleb128 0x11
 1641 033e F6010000 		.4byte	.LASF49
 1642 0342 01       		.byte	0x1
 1643 0343 B302     		.2byte	0x2b3
 1644 0345 8C000000 		.4byte	0x8c
 1645 0349 00000000 		.4byte	.LFB15
 1646 034d A4000000 		.4byte	.LFE15-.LFB15
 1647 0351 01       		.uleb128 0x1
 1648 0352 9C       		.byte	0x9c
 1649 0353 85030000 		.4byte	0x385
 1650 0357 0F       		.uleb128 0xf
 1651 0358 22040000 		.4byte	.LASF34
 1652 035c 01       		.byte	0x1
 1653 035d B302     		.2byte	0x2b3
 1654 035f 81000000 		.4byte	0x81
 1655 0363 02       		.uleb128 0x2
 1656 0364 91       		.byte	0x91
 1657 0365 6C       		.sleb128 -20
 1658 0366 0F       		.uleb128 0xf
 1659 0367 64040000 		.4byte	.LASF50
 1660 036b 01       		.byte	0x1
 1661 036c B302     		.2byte	0x2b3
 1662 036e 8C000000 		.4byte	0x8c
 1663 0372 02       		.uleb128 0x2
 1664 0373 91       		.byte	0x91
 1665 0374 6A       		.sleb128 -22
 1666 0375 10       		.uleb128 0x10
 1667 0376 B1030000 		.4byte	.LASF51
 1668 037a 01       		.byte	0x1
 1669 037b B502     		.2byte	0x2b5
 1670 037d 8C000000 		.4byte	0x8c
 1671 0381 02       		.uleb128 0x2
 1672 0382 91       		.byte	0x91
 1673 0383 76       		.sleb128 -10
 1674 0384 00       		.byte	0
 1675 0385 11       		.uleb128 0x11
 1676 0386 46010000 		.4byte	.LASF52
 1677 038a 01       		.byte	0x1
 1678 038b E902     		.2byte	0x2e9
 1679 038d 97000000 		.4byte	0x97
 1680 0391 00000000 		.4byte	.LFB16
 1681 0395 98000000 		.4byte	.LFE16-.LFB16
 1682 0399 01       		.uleb128 0x1
 1683 039a 9C       		.byte	0x9c
 1684 039b CD030000 		.4byte	0x3cd
 1685 039f 0F       		.uleb128 0xf
 1686 03a0 22040000 		.4byte	.LASF34
 1687 03a4 01       		.byte	0x1
 1688 03a5 E902     		.2byte	0x2e9
 1689 03a7 81000000 		.4byte	0x81
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 45


 1690 03ab 02       		.uleb128 0x2
 1691 03ac 91       		.byte	0x91
 1692 03ad 64       		.sleb128 -28
 1693 03ae 0F       		.uleb128 0xf
 1694 03af 64040000 		.4byte	.LASF50
 1695 03b3 01       		.byte	0x1
 1696 03b4 E902     		.2byte	0x2e9
 1697 03b6 8C000000 		.4byte	0x8c
 1698 03ba 02       		.uleb128 0x2
 1699 03bb 91       		.byte	0x91
 1700 03bc 62       		.sleb128 -30
 1701 03bd 10       		.uleb128 0x10
 1702 03be 62010000 		.4byte	.LASF53
 1703 03c2 01       		.byte	0x1
 1704 03c3 EB02     		.2byte	0x2eb
 1705 03c5 BB000000 		.4byte	0xbb
 1706 03c9 02       		.uleb128 0x2
 1707 03ca 91       		.byte	0x91
 1708 03cb 68       		.sleb128 -24
 1709 03cc 00       		.byte	0
 1710 03cd 11       		.uleb128 0x11
 1711 03ce 93040000 		.4byte	.LASF54
 1712 03d2 01       		.byte	0x1
 1713 03d3 1603     		.2byte	0x316
 1714 03d5 A2000000 		.4byte	0xa2
 1715 03d9 00000000 		.4byte	.LFB17
 1716 03dd 80000000 		.4byte	.LFE17-.LFB17
 1717 03e1 01       		.uleb128 0x1
 1718 03e2 9C       		.byte	0x9c
 1719 03e3 15040000 		.4byte	0x415
 1720 03e7 0F       		.uleb128 0xf
 1721 03e8 22040000 		.4byte	.LASF34
 1722 03ec 01       		.byte	0x1
 1723 03ed 1603     		.2byte	0x316
 1724 03ef 81000000 		.4byte	0x81
 1725 03f3 02       		.uleb128 0x2
 1726 03f4 91       		.byte	0x91
 1727 03f5 64       		.sleb128 -28
 1728 03f6 0F       		.uleb128 0xf
 1729 03f7 64040000 		.4byte	.LASF50
 1730 03fb 01       		.byte	0x1
 1731 03fc 1603     		.2byte	0x316
 1732 03fe 8C000000 		.4byte	0x8c
 1733 0402 02       		.uleb128 0x2
 1734 0403 91       		.byte	0x91
 1735 0404 62       		.sleb128 -30
 1736 0405 10       		.uleb128 0x10
 1737 0406 7B010000 		.4byte	.LASF55
 1738 040a 01       		.byte	0x1
 1739 040b 1803     		.2byte	0x318
 1740 040d A2000000 		.4byte	0xa2
 1741 0411 02       		.uleb128 0x2
 1742 0412 91       		.byte	0x91
 1743 0413 6C       		.sleb128 -20
 1744 0414 00       		.byte	0
 1745 0415 09       		.uleb128 0x9
 1746 0416 81000000 		.4byte	0x81
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 46


 1747 041a 25040000 		.4byte	0x425
 1748 041e 0A       		.uleb128 0xa
 1749 041f DD000000 		.4byte	0xdd
 1750 0423 02       		.byte	0x2
 1751 0424 00       		.byte	0
 1752 0425 08       		.uleb128 0x8
 1753 0426 F3030000 		.4byte	.LASF56
 1754 042a 01       		.byte	0x1
 1755 042b 22       		.byte	0x22
 1756 042c 36040000 		.4byte	0x436
 1757 0430 05       		.uleb128 0x5
 1758 0431 03       		.byte	0x3
 1759 0432 00000000 		.4byte	ADC_SAR_SEQ_channelsConfig
 1760 0436 0B       		.uleb128 0xb
 1761 0437 15040000 		.4byte	0x415
 1762 043b 14       		.uleb128 0x14
 1763 043c 0E040000 		.4byte	.LASF57
 1764 0440 01       		.byte	0x1
 1765 0441 19       		.byte	0x19
 1766 0442 6B000000 		.4byte	0x6b
 1767 0446 05       		.uleb128 0x5
 1768 0447 03       		.byte	0x3
 1769 0448 00000000 		.4byte	ADC_SAR_SEQ_initVar
 1770 044c 09       		.uleb128 0x9
 1771 044d 8C000000 		.4byte	0x8c
 1772 0451 5C040000 		.4byte	0x45c
 1773 0455 0A       		.uleb128 0xa
 1774 0456 DD000000 		.4byte	0xdd
 1775 045a 02       		.byte	0x2
 1776 045b 00       		.byte	0
 1777 045c 14       		.uleb128 0x14
 1778 045d 90000000 		.4byte	.LASF58
 1779 0461 01       		.byte	0x1
 1780 0462 1A       		.byte	0x1a
 1781 0463 6D040000 		.4byte	0x46d
 1782 0467 05       		.uleb128 0x5
 1783 0468 03       		.byte	0x3
 1784 0469 00000000 		.4byte	ADC_SAR_SEQ_offset
 1785 046d 05       		.uleb128 0x5
 1786 046e 4C040000 		.4byte	0x44c
 1787 0472 09       		.uleb128 0x9
 1788 0473 97000000 		.4byte	0x97
 1789 0477 82040000 		.4byte	0x482
 1790 047b 0A       		.uleb128 0xa
 1791 047c DD000000 		.4byte	0xdd
 1792 0480 02       		.byte	0x2
 1793 0481 00       		.byte	0
 1794 0482 14       		.uleb128 0x14
 1795 0483 B8030000 		.4byte	.LASF59
 1796 0487 01       		.byte	0x1
 1797 0488 1B       		.byte	0x1b
 1798 0489 93040000 		.4byte	0x493
 1799 048d 05       		.uleb128 0x5
 1800 048e 03       		.byte	0x3
 1801 048f 00000000 		.4byte	ADC_SAR_SEQ_countsPer10Volt
 1802 0493 05       		.uleb128 0x5
 1803 0494 72040000 		.4byte	0x472
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 47


 1804 0498 00       		.byte	0
 1805              		.section	.debug_abbrev,"",%progbits
 1806              	.Ldebug_abbrev0:
 1807 0000 01       		.uleb128 0x1
 1808 0001 11       		.uleb128 0x11
 1809 0002 01       		.byte	0x1
 1810 0003 25       		.uleb128 0x25
 1811 0004 0E       		.uleb128 0xe
 1812 0005 13       		.uleb128 0x13
 1813 0006 0B       		.uleb128 0xb
 1814 0007 03       		.uleb128 0x3
 1815 0008 0E       		.uleb128 0xe
 1816 0009 1B       		.uleb128 0x1b
 1817 000a 0E       		.uleb128 0xe
 1818 000b 55       		.uleb128 0x55
 1819 000c 17       		.uleb128 0x17
 1820 000d 11       		.uleb128 0x11
 1821 000e 01       		.uleb128 0x1
 1822 000f 10       		.uleb128 0x10
 1823 0010 17       		.uleb128 0x17
 1824 0011 00       		.byte	0
 1825 0012 00       		.byte	0
 1826 0013 02       		.uleb128 0x2
 1827 0014 24       		.uleb128 0x24
 1828 0015 00       		.byte	0
 1829 0016 0B       		.uleb128 0xb
 1830 0017 0B       		.uleb128 0xb
 1831 0018 3E       		.uleb128 0x3e
 1832 0019 0B       		.uleb128 0xb
 1833 001a 03       		.uleb128 0x3
 1834 001b 0E       		.uleb128 0xe
 1835 001c 00       		.byte	0
 1836 001d 00       		.byte	0
 1837 001e 03       		.uleb128 0x3
 1838 001f 24       		.uleb128 0x24
 1839 0020 00       		.byte	0
 1840 0021 0B       		.uleb128 0xb
 1841 0022 0B       		.uleb128 0xb
 1842 0023 3E       		.uleb128 0x3e
 1843 0024 0B       		.uleb128 0xb
 1844 0025 03       		.uleb128 0x3
 1845 0026 08       		.uleb128 0x8
 1846 0027 00       		.byte	0
 1847 0028 00       		.byte	0
 1848 0029 04       		.uleb128 0x4
 1849 002a 16       		.uleb128 0x16
 1850 002b 00       		.byte	0
 1851 002c 03       		.uleb128 0x3
 1852 002d 0E       		.uleb128 0xe
 1853 002e 3A       		.uleb128 0x3a
 1854 002f 0B       		.uleb128 0xb
 1855 0030 3B       		.uleb128 0x3b
 1856 0031 0B       		.uleb128 0xb
 1857 0032 49       		.uleb128 0x49
 1858 0033 13       		.uleb128 0x13
 1859 0034 00       		.byte	0
 1860 0035 00       		.byte	0
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 48


 1861 0036 05       		.uleb128 0x5
 1862 0037 35       		.uleb128 0x35
 1863 0038 00       		.byte	0
 1864 0039 49       		.uleb128 0x49
 1865 003a 13       		.uleb128 0x13
 1866 003b 00       		.byte	0
 1867 003c 00       		.byte	0
 1868 003d 06       		.uleb128 0x6
 1869 003e 2E       		.uleb128 0x2e
 1870 003f 00       		.byte	0
 1871 0040 3F       		.uleb128 0x3f
 1872 0041 19       		.uleb128 0x19
 1873 0042 03       		.uleb128 0x3
 1874 0043 0E       		.uleb128 0xe
 1875 0044 3A       		.uleb128 0x3a
 1876 0045 0B       		.uleb128 0xb
 1877 0046 3B       		.uleb128 0x3b
 1878 0047 0B       		.uleb128 0xb
 1879 0048 27       		.uleb128 0x27
 1880 0049 19       		.uleb128 0x19
 1881 004a 11       		.uleb128 0x11
 1882 004b 01       		.uleb128 0x1
 1883 004c 12       		.uleb128 0x12
 1884 004d 06       		.uleb128 0x6
 1885 004e 40       		.uleb128 0x40
 1886 004f 18       		.uleb128 0x18
 1887 0050 9642     		.uleb128 0x2116
 1888 0052 19       		.uleb128 0x19
 1889 0053 00       		.byte	0
 1890 0054 00       		.byte	0
 1891 0055 07       		.uleb128 0x7
 1892 0056 2E       		.uleb128 0x2e
 1893 0057 01       		.byte	0x1
 1894 0058 3F       		.uleb128 0x3f
 1895 0059 19       		.uleb128 0x19
 1896 005a 03       		.uleb128 0x3
 1897 005b 0E       		.uleb128 0xe
 1898 005c 3A       		.uleb128 0x3a
 1899 005d 0B       		.uleb128 0xb
 1900 005e 3B       		.uleb128 0x3b
 1901 005f 0B       		.uleb128 0xb
 1902 0060 27       		.uleb128 0x27
 1903 0061 19       		.uleb128 0x19
 1904 0062 11       		.uleb128 0x11
 1905 0063 01       		.uleb128 0x1
 1906 0064 12       		.uleb128 0x12
 1907 0065 06       		.uleb128 0x6
 1908 0066 40       		.uleb128 0x40
 1909 0067 18       		.uleb128 0x18
 1910 0068 9642     		.uleb128 0x2116
 1911 006a 19       		.uleb128 0x19
 1912 006b 01       		.uleb128 0x1
 1913 006c 13       		.uleb128 0x13
 1914 006d 00       		.byte	0
 1915 006e 00       		.byte	0
 1916 006f 08       		.uleb128 0x8
 1917 0070 34       		.uleb128 0x34
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 49


 1918 0071 00       		.byte	0
 1919 0072 03       		.uleb128 0x3
 1920 0073 0E       		.uleb128 0xe
 1921 0074 3A       		.uleb128 0x3a
 1922 0075 0B       		.uleb128 0xb
 1923 0076 3B       		.uleb128 0x3b
 1924 0077 0B       		.uleb128 0xb
 1925 0078 49       		.uleb128 0x49
 1926 0079 13       		.uleb128 0x13
 1927 007a 02       		.uleb128 0x2
 1928 007b 18       		.uleb128 0x18
 1929 007c 00       		.byte	0
 1930 007d 00       		.byte	0
 1931 007e 09       		.uleb128 0x9
 1932 007f 01       		.uleb128 0x1
 1933 0080 01       		.byte	0x1
 1934 0081 49       		.uleb128 0x49
 1935 0082 13       		.uleb128 0x13
 1936 0083 01       		.uleb128 0x1
 1937 0084 13       		.uleb128 0x13
 1938 0085 00       		.byte	0
 1939 0086 00       		.byte	0
 1940 0087 0A       		.uleb128 0xa
 1941 0088 21       		.uleb128 0x21
 1942 0089 00       		.byte	0
 1943 008a 49       		.uleb128 0x49
 1944 008b 13       		.uleb128 0x13
 1945 008c 2F       		.uleb128 0x2f
 1946 008d 0B       		.uleb128 0xb
 1947 008e 00       		.byte	0
 1948 008f 00       		.byte	0
 1949 0090 0B       		.uleb128 0xb
 1950 0091 26       		.uleb128 0x26
 1951 0092 00       		.byte	0
 1952 0093 49       		.uleb128 0x49
 1953 0094 13       		.uleb128 0x13
 1954 0095 00       		.byte	0
 1955 0096 00       		.byte	0
 1956 0097 0C       		.uleb128 0xc
 1957 0098 2E       		.uleb128 0x2e
 1958 0099 00       		.byte	0
 1959 009a 3F       		.uleb128 0x3f
 1960 009b 19       		.uleb128 0x19
 1961 009c 03       		.uleb128 0x3
 1962 009d 0E       		.uleb128 0xe
 1963 009e 3A       		.uleb128 0x3a
 1964 009f 0B       		.uleb128 0xb
 1965 00a0 3B       		.uleb128 0x3b
 1966 00a1 05       		.uleb128 0x5
 1967 00a2 27       		.uleb128 0x27
 1968 00a3 19       		.uleb128 0x19
 1969 00a4 11       		.uleb128 0x11
 1970 00a5 01       		.uleb128 0x1
 1971 00a6 12       		.uleb128 0x12
 1972 00a7 06       		.uleb128 0x6
 1973 00a8 40       		.uleb128 0x40
 1974 00a9 18       		.uleb128 0x18
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 50


 1975 00aa 9642     		.uleb128 0x2116
 1976 00ac 19       		.uleb128 0x19
 1977 00ad 00       		.byte	0
 1978 00ae 00       		.byte	0
 1979 00af 0D       		.uleb128 0xd
 1980 00b0 2E       		.uleb128 0x2e
 1981 00b1 00       		.byte	0
 1982 00b2 3F       		.uleb128 0x3f
 1983 00b3 19       		.uleb128 0x19
 1984 00b4 03       		.uleb128 0x3
 1985 00b5 0E       		.uleb128 0xe
 1986 00b6 3A       		.uleb128 0x3a
 1987 00b7 0B       		.uleb128 0xb
 1988 00b8 3B       		.uleb128 0x3b
 1989 00b9 05       		.uleb128 0x5
 1990 00ba 27       		.uleb128 0x27
 1991 00bb 19       		.uleb128 0x19
 1992 00bc 11       		.uleb128 0x11
 1993 00bd 01       		.uleb128 0x1
 1994 00be 12       		.uleb128 0x12
 1995 00bf 06       		.uleb128 0x6
 1996 00c0 40       		.uleb128 0x40
 1997 00c1 18       		.uleb128 0x18
 1998 00c2 9742     		.uleb128 0x2117
 1999 00c4 19       		.uleb128 0x19
 2000 00c5 00       		.byte	0
 2001 00c6 00       		.byte	0
 2002 00c7 0E       		.uleb128 0xe
 2003 00c8 2E       		.uleb128 0x2e
 2004 00c9 01       		.byte	0x1
 2005 00ca 3F       		.uleb128 0x3f
 2006 00cb 19       		.uleb128 0x19
 2007 00cc 03       		.uleb128 0x3
 2008 00cd 0E       		.uleb128 0xe
 2009 00ce 3A       		.uleb128 0x3a
 2010 00cf 0B       		.uleb128 0xb
 2011 00d0 3B       		.uleb128 0x3b
 2012 00d1 05       		.uleb128 0x5
 2013 00d2 27       		.uleb128 0x27
 2014 00d3 19       		.uleb128 0x19
 2015 00d4 49       		.uleb128 0x49
 2016 00d5 13       		.uleb128 0x13
 2017 00d6 11       		.uleb128 0x11
 2018 00d7 01       		.uleb128 0x1
 2019 00d8 12       		.uleb128 0x12
 2020 00d9 06       		.uleb128 0x6
 2021 00da 40       		.uleb128 0x40
 2022 00db 18       		.uleb128 0x18
 2023 00dc 9742     		.uleb128 0x2117
 2024 00de 19       		.uleb128 0x19
 2025 00df 01       		.uleb128 0x1
 2026 00e0 13       		.uleb128 0x13
 2027 00e1 00       		.byte	0
 2028 00e2 00       		.byte	0
 2029 00e3 0F       		.uleb128 0xf
 2030 00e4 05       		.uleb128 0x5
 2031 00e5 00       		.byte	0
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 51


 2032 00e6 03       		.uleb128 0x3
 2033 00e7 0E       		.uleb128 0xe
 2034 00e8 3A       		.uleb128 0x3a
 2035 00e9 0B       		.uleb128 0xb
 2036 00ea 3B       		.uleb128 0x3b
 2037 00eb 05       		.uleb128 0x5
 2038 00ec 49       		.uleb128 0x49
 2039 00ed 13       		.uleb128 0x13
 2040 00ee 02       		.uleb128 0x2
 2041 00ef 18       		.uleb128 0x18
 2042 00f0 00       		.byte	0
 2043 00f1 00       		.byte	0
 2044 00f2 10       		.uleb128 0x10
 2045 00f3 34       		.uleb128 0x34
 2046 00f4 00       		.byte	0
 2047 00f5 03       		.uleb128 0x3
 2048 00f6 0E       		.uleb128 0xe
 2049 00f7 3A       		.uleb128 0x3a
 2050 00f8 0B       		.uleb128 0xb
 2051 00f9 3B       		.uleb128 0x3b
 2052 00fa 05       		.uleb128 0x5
 2053 00fb 49       		.uleb128 0x49
 2054 00fc 13       		.uleb128 0x13
 2055 00fd 02       		.uleb128 0x2
 2056 00fe 18       		.uleb128 0x18
 2057 00ff 00       		.byte	0
 2058 0100 00       		.byte	0
 2059 0101 11       		.uleb128 0x11
 2060 0102 2E       		.uleb128 0x2e
 2061 0103 01       		.byte	0x1
 2062 0104 3F       		.uleb128 0x3f
 2063 0105 19       		.uleb128 0x19
 2064 0106 03       		.uleb128 0x3
 2065 0107 0E       		.uleb128 0xe
 2066 0108 3A       		.uleb128 0x3a
 2067 0109 0B       		.uleb128 0xb
 2068 010a 3B       		.uleb128 0x3b
 2069 010b 05       		.uleb128 0x5
 2070 010c 27       		.uleb128 0x27
 2071 010d 19       		.uleb128 0x19
 2072 010e 49       		.uleb128 0x49
 2073 010f 13       		.uleb128 0x13
 2074 0110 11       		.uleb128 0x11
 2075 0111 01       		.uleb128 0x1
 2076 0112 12       		.uleb128 0x12
 2077 0113 06       		.uleb128 0x6
 2078 0114 40       		.uleb128 0x40
 2079 0115 18       		.uleb128 0x18
 2080 0116 9642     		.uleb128 0x2116
 2081 0118 19       		.uleb128 0x19
 2082 0119 01       		.uleb128 0x1
 2083 011a 13       		.uleb128 0x13
 2084 011b 00       		.byte	0
 2085 011c 00       		.byte	0
 2086 011d 12       		.uleb128 0x12
 2087 011e 2E       		.uleb128 0x2e
 2088 011f 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 52


 2089 0120 3F       		.uleb128 0x3f
 2090 0121 19       		.uleb128 0x19
 2091 0122 03       		.uleb128 0x3
 2092 0123 0E       		.uleb128 0xe
 2093 0124 3A       		.uleb128 0x3a
 2094 0125 0B       		.uleb128 0xb
 2095 0126 3B       		.uleb128 0x3b
 2096 0127 05       		.uleb128 0x5
 2097 0128 27       		.uleb128 0x27
 2098 0129 19       		.uleb128 0x19
 2099 012a 11       		.uleb128 0x11
 2100 012b 01       		.uleb128 0x1
 2101 012c 12       		.uleb128 0x12
 2102 012d 06       		.uleb128 0x6
 2103 012e 40       		.uleb128 0x40
 2104 012f 18       		.uleb128 0x18
 2105 0130 9742     		.uleb128 0x2117
 2106 0132 19       		.uleb128 0x19
 2107 0133 01       		.uleb128 0x1
 2108 0134 13       		.uleb128 0x13
 2109 0135 00       		.byte	0
 2110 0136 00       		.byte	0
 2111 0137 13       		.uleb128 0x13
 2112 0138 2E       		.uleb128 0x2e
 2113 0139 01       		.byte	0x1
 2114 013a 3F       		.uleb128 0x3f
 2115 013b 19       		.uleb128 0x19
 2116 013c 03       		.uleb128 0x3
 2117 013d 0E       		.uleb128 0xe
 2118 013e 3A       		.uleb128 0x3a
 2119 013f 0B       		.uleb128 0xb
 2120 0140 3B       		.uleb128 0x3b
 2121 0141 05       		.uleb128 0x5
 2122 0142 27       		.uleb128 0x27
 2123 0143 19       		.uleb128 0x19
 2124 0144 11       		.uleb128 0x11
 2125 0145 01       		.uleb128 0x1
 2126 0146 12       		.uleb128 0x12
 2127 0147 06       		.uleb128 0x6
 2128 0148 40       		.uleb128 0x40
 2129 0149 18       		.uleb128 0x18
 2130 014a 9642     		.uleb128 0x2116
 2131 014c 19       		.uleb128 0x19
 2132 014d 01       		.uleb128 0x1
 2133 014e 13       		.uleb128 0x13
 2134 014f 00       		.byte	0
 2135 0150 00       		.byte	0
 2136 0151 14       		.uleb128 0x14
 2137 0152 34       		.uleb128 0x34
 2138 0153 00       		.byte	0
 2139 0154 03       		.uleb128 0x3
 2140 0155 0E       		.uleb128 0xe
 2141 0156 3A       		.uleb128 0x3a
 2142 0157 0B       		.uleb128 0xb
 2143 0158 3B       		.uleb128 0x3b
 2144 0159 0B       		.uleb128 0xb
 2145 015a 49       		.uleb128 0x49
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 53


 2146 015b 13       		.uleb128 0x13
 2147 015c 3F       		.uleb128 0x3f
 2148 015d 19       		.uleb128 0x19
 2149 015e 02       		.uleb128 0x2
 2150 015f 18       		.uleb128 0x18
 2151 0160 00       		.byte	0
 2152 0161 00       		.byte	0
 2153 0162 00       		.byte	0
 2154              		.section	.debug_aranges,"",%progbits
 2155 0000 A4000000 		.4byte	0xa4
 2156 0004 0200     		.2byte	0x2
 2157 0006 00000000 		.4byte	.Ldebug_info0
 2158 000a 04       		.byte	0x4
 2159 000b 00       		.byte	0
 2160 000c 0000     		.2byte	0
 2161 000e 0000     		.2byte	0
 2162 0010 00000000 		.4byte	.LFB0
 2163 0014 24000000 		.4byte	.LFE0-.LFB0
 2164 0018 00000000 		.4byte	.LFB1
 2165 001c E4010000 		.4byte	.LFE1-.LFB1
 2166 0020 00000000 		.4byte	.LFB2
 2167 0024 20000000 		.4byte	.LFE2-.LFB2
 2168 0028 00000000 		.4byte	.LFB3
 2169 002c 18000000 		.4byte	.LFE3-.LFB3
 2170 0030 00000000 		.4byte	.LFB4
 2171 0034 1C000000 		.4byte	.LFE4-.LFB4
 2172 0038 00000000 		.4byte	.LFB5
 2173 003c 1C000000 		.4byte	.LFE5-.LFB5
 2174 0040 00000000 		.4byte	.LFB6
 2175 0044 48000000 		.4byte	.LFE6-.LFB6
 2176 0048 00000000 		.4byte	.LFB7
 2177 004c 44000000 		.4byte	.LFE7-.LFB7
 2178 0050 00000000 		.4byte	.LFB8
 2179 0054 1C000000 		.4byte	.LFE8-.LFB8
 2180 0058 00000000 		.4byte	.LFB9
 2181 005c 30000000 		.4byte	.LFE9-.LFB9
 2182 0060 00000000 		.4byte	.LFB10
 2183 0064 2C000000 		.4byte	.LFE10-.LFB10
 2184 0068 00000000 		.4byte	.LFB11
 2185 006c 1C000000 		.4byte	.LFE11-.LFB11
 2186 0070 00000000 		.4byte	.LFB12
 2187 0074 1C000000 		.4byte	.LFE12-.LFB12
 2188 0078 00000000 		.4byte	.LFB13
 2189 007c 30000000 		.4byte	.LFE13-.LFB13
 2190 0080 00000000 		.4byte	.LFB14
 2191 0084 2C000000 		.4byte	.LFE14-.LFB14
 2192 0088 00000000 		.4byte	.LFB15
 2193 008c A4000000 		.4byte	.LFE15-.LFB15
 2194 0090 00000000 		.4byte	.LFB16
 2195 0094 98000000 		.4byte	.LFE16-.LFB16
 2196 0098 00000000 		.4byte	.LFB17
 2197 009c 80000000 		.4byte	.LFE17-.LFB17
 2198 00a0 00000000 		.4byte	0
 2199 00a4 00000000 		.4byte	0
 2200              		.section	.debug_ranges,"",%progbits
 2201              	.Ldebug_ranges0:
 2202 0000 00000000 		.4byte	.LFB0
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 54


 2203 0004 24000000 		.4byte	.LFE0
 2204 0008 00000000 		.4byte	.LFB1
 2205 000c E4010000 		.4byte	.LFE1
 2206 0010 00000000 		.4byte	.LFB2
 2207 0014 20000000 		.4byte	.LFE2
 2208 0018 00000000 		.4byte	.LFB3
 2209 001c 18000000 		.4byte	.LFE3
 2210 0020 00000000 		.4byte	.LFB4
 2211 0024 1C000000 		.4byte	.LFE4
 2212 0028 00000000 		.4byte	.LFB5
 2213 002c 1C000000 		.4byte	.LFE5
 2214 0030 00000000 		.4byte	.LFB6
 2215 0034 48000000 		.4byte	.LFE6
 2216 0038 00000000 		.4byte	.LFB7
 2217 003c 44000000 		.4byte	.LFE7
 2218 0040 00000000 		.4byte	.LFB8
 2219 0044 1C000000 		.4byte	.LFE8
 2220 0048 00000000 		.4byte	.LFB9
 2221 004c 30000000 		.4byte	.LFE9
 2222 0050 00000000 		.4byte	.LFB10
 2223 0054 2C000000 		.4byte	.LFE10
 2224 0058 00000000 		.4byte	.LFB11
 2225 005c 1C000000 		.4byte	.LFE11
 2226 0060 00000000 		.4byte	.LFB12
 2227 0064 1C000000 		.4byte	.LFE12
 2228 0068 00000000 		.4byte	.LFB13
 2229 006c 30000000 		.4byte	.LFE13
 2230 0070 00000000 		.4byte	.LFB14
 2231 0074 2C000000 		.4byte	.LFE14
 2232 0078 00000000 		.4byte	.LFB15
 2233 007c A4000000 		.4byte	.LFE15
 2234 0080 00000000 		.4byte	.LFB16
 2235 0084 98000000 		.4byte	.LFE16
 2236 0088 00000000 		.4byte	.LFB17
 2237 008c 80000000 		.4byte	.LFE17
 2238 0090 00000000 		.4byte	0
 2239 0094 00000000 		.4byte	0
 2240              		.section	.debug_line,"",%progbits
 2241              	.Ldebug_line0:
 2242 0000 33020000 		.section	.debug_str,"MS",%progbits,1
 2242      02004A00 
 2242      00000201 
 2242      FB0E0D00 
 2242      01010101 
 2243              	.LASF10:
 2244 0000 75696E74 		.ascii	"uint16\000"
 2244      313600
 2245              	.LASF48:
 2246 0007 61646347 		.ascii	"adcGain\000"
 2246      61696E00 
 2247              	.LASF23:
 2248 000f 636F756E 		.ascii	"counts\000"
 2248      747300
 2249              	.LASF47:
 2250 0016 4144435F 		.ascii	"ADC_SAR_SEQ_SetGain\000"
 2250      5341525F 
 2250      5345515F 
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 55


 2250      53657447 
 2250      61696E00 
 2251              	.LASF45:
 2252 002a 4144435F 		.ascii	"ADC_SAR_SEQ_SetOffset\000"
 2252      5341525F 
 2252      5345515F 
 2252      5365744F 
 2252      66667365 
 2253              	.LASF25:
 2254 0040 4144435F 		.ascii	"ADC_SAR_SEQ_Start\000"
 2254      5341525F 
 2254      5345515F 
 2254      53746172 
 2254      7400
 2255              	.LASF61:
 2256 0052 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_SEQ.c\000"
 2256      6E657261 
 2256      7465645F 
 2256      536F7572 
 2256      63655C50 
 2257              	.LASF7:
 2258 0079 6C6F6E67 		.ascii	"long long unsigned int\000"
 2258      206C6F6E 
 2258      6720756E 
 2258      7369676E 
 2258      65642069 
 2259              	.LASF58:
 2260 0090 4144435F 		.ascii	"ADC_SAR_SEQ_offset\000"
 2260      5341525F 
 2260      5345515F 
 2260      6F666673 
 2260      657400
 2261              	.LASF37:
 2262 00a3 4144435F 		.ascii	"ADC_SAR_SEQ_SetChanMask\000"
 2262      5341525F 
 2262      5345515F 
 2262      53657443 
 2262      68616E4D 
 2263              	.LASF6:
 2264 00bb 6C6F6E67 		.ascii	"long long int\000"
 2264      206C6F6E 
 2264      6720696E 
 2264      7400
 2265              	.LASF0:
 2266 00c9 7369676E 		.ascii	"signed char\000"
 2266      65642063 
 2266      68617200 
 2267              	.LASF13:
 2268 00d5 696E7433 		.ascii	"int32\000"
 2268      3200
 2269              	.LASF4:
 2270 00db 6C6F6E67 		.ascii	"long int\000"
 2270      20696E74 
 2270      00
 2271              	.LASF9:
 2272 00e4 75696E74 		.ascii	"uint8\000"
 2272      3800
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 56


 2273              	.LASF29:
 2274 00ea 4144435F 		.ascii	"ADC_SAR_SEQ_StopConvert\000"
 2274      5341525F 
 2274      5345515F 
 2274      53746F70 
 2274      436F6E76 
 2275              	.LASF16:
 2276 0102 646F7562 		.ascii	"double\000"
 2276      6C6500
 2277              	.LASF24:
 2278 0109 4144435F 		.ascii	"ADC_SAR_SEQ_InputsPlacement\000"
 2278      5341525F 
 2278      5345515F 
 2278      496E7075 
 2278      7473506C 
 2279              	.LASF11:
 2280 0125 75696E74 		.ascii	"uint32\000"
 2280      333200
 2281              	.LASF38:
 2282 012c 6D61736B 		.ascii	"mask\000"
 2282      00
 2283              	.LASF33:
 2284 0131 7265744D 		.ascii	"retMode\000"
 2284      6F646500 
 2285              	.LASF8:
 2286 0139 756E7369 		.ascii	"unsigned int\000"
 2286      676E6564 
 2286      20696E74 
 2286      00
 2287              	.LASF52:
 2288 0146 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_uVolts\000"
 2288      5341525F 
 2288      5345515F 
 2288      436F756E 
 2288      7473546F 
 2289              	.LASF53:
 2290 0162 75566F6C 		.ascii	"uVolts\000"
 2290      747300
 2291              	.LASF5:
 2292 0169 6C6F6E67 		.ascii	"long unsigned int\000"
 2292      20756E73 
 2292      69676E65 
 2292      6420696E 
 2292      7400
 2293              	.LASF55:
 2294 017b 766F6C74 		.ascii	"volts\000"
 2294      7300
 2295              	.LASF22:
 2296 0181 746D7052 		.ascii	"tmpRegVal\000"
 2296      65675661 
 2296      6C00
 2297              	.LASF3:
 2298 018b 73686F72 		.ascii	"short unsigned int\000"
 2298      7420756E 
 2298      7369676E 
 2298      65642069 
 2298      6E7400
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 57


 2299              	.LASF62:
 2300 019e 433A5C44 		.ascii	"C:\\Documents and Settings\\Chuck\\My Documents\\PS"
 2300      6F63756D 
 2300      656E7473 
 2300      20616E64 
 2300      20536574 
 2301 01cd 6F432043 		.ascii	"oC Creator\\RosOnAStick\\RosOnAStick.cydsn\000"
 2301      72656174 
 2301      6F725C52 
 2301      6F734F6E 
 2301      41537469 
 2302              	.LASF49:
 2303 01f6 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_mVolts\000"
 2303      5341525F 
 2303      5345515F 
 2303      436F756E 
 2303      7473546F 
 2304              	.LASF39:
 2305 0212 4144435F 		.ascii	"ADC_SAR_SEQ_SetLowLimit\000"
 2305      5341525F 
 2305      5345515F 
 2305      5365744C 
 2305      6F774C69 
 2306              	.LASF60:
 2307 022a 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2307      4320342E 
 2307      382E3420 
 2307      32303134 
 2307      30353236 
 2308 025d 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2308      20726576 
 2308      6973696F 
 2308      6E203231 
 2308      31333538 
 2309 0290 30202D66 		.ascii	"0 -ffunction-sections -fno-rtti -fno-exceptions -fu"
 2309      66756E63 
 2309      74696F6E 
 2309      2D736563 
 2309      74696F6E 
 2310 02c3 6E736967 		.ascii	"nsigned-char -funsigned-bitfields -fshort-enums\000"
 2310      6E65642D 
 2310      63686172 
 2310      202D6675 
 2310      6E736967 
 2311              	.LASF19:
 2312 02f3 72656733 		.ascii	"reg32\000"
 2312      3200
 2313              	.LASF14:
 2314 02f9 666C6F61 		.ascii	"float32\000"
 2314      74333200 
 2315              	.LASF20:
 2316 0301 73697A65 		.ascii	"sizetype\000"
 2316      74797065 
 2316      00
 2317              	.LASF40:
 2318 030a 6C6F774C 		.ascii	"lowLimit\000"
 2318      696D6974 
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 58


 2318      00
 2319              	.LASF44:
 2320 0313 4144435F 		.ascii	"ADC_SAR_SEQ_SetSatMask\000"
 2320      5341525F 
 2320      5345515F 
 2320      53657453 
 2320      61744D61 
 2321              	.LASF17:
 2322 032a 696E7436 		.ascii	"int64\000"
 2322      3400
 2323              	.LASF27:
 2324 0330 4144435F 		.ascii	"ADC_SAR_SEQ_Stop\000"
 2324      5341525F 
 2324      5345515F 
 2324      53746F70 
 2324      00
 2325              	.LASF26:
 2326 0341 4144435F 		.ascii	"ADC_SAR_SEQ_Enable\000"
 2326      5341525F 
 2326      5345515F 
 2326      456E6162 
 2326      6C6500
 2327              	.LASF15:
 2328 0354 666C6F61 		.ascii	"float\000"
 2328      7400
 2329              	.LASF42:
 2330 035a 68696768 		.ascii	"highLimit\000"
 2330      4C696D69 
 2330      7400
 2331              	.LASF43:
 2332 0364 4144435F 		.ascii	"ADC_SAR_SEQ_SetLimitMask\000"
 2332      5341525F 
 2332      5345515F 
 2332      5365744C 
 2332      696D6974 
 2333              	.LASF1:
 2334 037d 756E7369 		.ascii	"unsigned char\000"
 2334      676E6564 
 2334      20636861 
 2334      7200
 2335              	.LASF2:
 2336 038b 73686F72 		.ascii	"short int\000"
 2336      7420696E 
 2336      7400
 2337              	.LASF31:
 2338 0395 4144435F 		.ascii	"ADC_SAR_SEQ_IsEndConversion\000"
 2338      5341525F 
 2338      5345515F 
 2338      4973456E 
 2338      64436F6E 
 2339              	.LASF51:
 2340 03b1 6D566F6C 		.ascii	"mVolts\000"
 2340      747300
 2341              	.LASF59:
 2342 03b8 4144435F 		.ascii	"ADC_SAR_SEQ_countsPer10Volt\000"
 2342      5341525F 
 2342      5345515F 
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 59


 2342      636F756E 
 2342      74735065 
 2343              	.LASF28:
 2344 03d4 4144435F 		.ascii	"ADC_SAR_SEQ_StartConvert\000"
 2344      5341525F 
 2344      5345515F 
 2344      53746172 
 2344      74436F6E 
 2345              	.LASF21:
 2346 03ed 63684E75 		.ascii	"chNum\000"
 2346      6D00
 2347              	.LASF56:
 2348 03f3 4144435F 		.ascii	"ADC_SAR_SEQ_channelsConfig\000"
 2348      5341525F 
 2348      5345515F 
 2348      6368616E 
 2348      6E656C73 
 2349              	.LASF57:
 2350 040e 4144435F 		.ascii	"ADC_SAR_SEQ_initVar\000"
 2350      5341525F 
 2350      5345515F 
 2350      696E6974 
 2350      56617200 
 2351              	.LASF34:
 2352 0422 6368616E 		.ascii	"chan\000"
 2352      00
 2353              	.LASF18:
 2354 0427 63686172 		.ascii	"char\000"
 2354      00
 2355              	.LASF32:
 2356 042c 4144435F 		.ascii	"ADC_SAR_SEQ_GetResult16\000"
 2356      5341525F 
 2356      5345515F 
 2356      47657452 
 2356      6573756C 
 2357              	.LASF46:
 2358 0444 6F666673 		.ascii	"offset\000"
 2358      657400
 2359              	.LASF41:
 2360 044b 4144435F 		.ascii	"ADC_SAR_SEQ_SetHighLimit\000"
 2360      5341525F 
 2360      5345515F 
 2360      53657448 
 2360      6967684C 
 2361              	.LASF50:
 2362 0464 61646343 		.ascii	"adcCounts\000"
 2362      6F756E74 
 2362      7300
 2363              	.LASF30:
 2364 046e 73746174 		.ascii	"status\000"
 2364      757300
 2365              	.LASF12:
 2366 0475 696E7431 		.ascii	"int16\000"
 2366      3600
 2367              	.LASF36:
 2368 047b 4144435F 		.ascii	"ADC_SAR_SEQ_Init\000"
 2368      5341525F 
ARM GAS  C:\DOCUME~1\Chuck\LOCALS~1\Temp\ccipCYff.s 			page 60


 2368      5345515F 
 2368      496E6974 
 2368      00
 2369              	.LASF35:
 2370 048c 72657375 		.ascii	"result\000"
 2370      6C7400
 2371              	.LASF54:
 2372 0493 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_Volts\000"
 2372      5341525F 
 2372      5345515F 
 2372      436F756E 
 2372      7473546F 
 2373              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
