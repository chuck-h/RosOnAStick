ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_SEQ.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_SEQ_initVar
  18              		.bss
  19              		.type	ADC_SAR_SEQ_initVar, %object
  20              		.size	ADC_SAR_SEQ_initVar, 1
  21              	ADC_SAR_SEQ_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_SEQ_offset,6,4
  24              		.comm	ADC_SAR_SEQ_countsPer10Volt,12,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_SEQ_channelsConfig, %object
  28              		.size	ADC_SAR_SEQ_channelsConfig, 12
  29              	ADC_SAR_SEQ_channelsConfig:
  30 0000 00000000 		.space	12
  30      00000000 
  30      00000000 
  31              		.section	.text.ADC_SAR_SEQ_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_SEQ_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_SEQ_Start, %function
  37              	ADC_SAR_SEQ_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_SEQ.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * File Name: ADC_SAR_SEQ.c
   3:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Version 1.10
   4:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 2


  17:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #include "ADC_SAR_SEQ.h"
  20:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  22:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /***************************************
  23:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global data allocation
  24:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ***************************************/
  25:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** uint8 ADC_SAR_SEQ_initVar = 0u;
  26:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** volatile int16 ADC_SAR_SEQ_offset[ADC_SAR_SEQ_TOTAL_CHANNELS_NUM];
  27:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** volatile int32 ADC_SAR_SEQ_countsPer10Volt[ADC_SAR_SEQ_TOTAL_CHANNELS_NUM];   /* Gain compensation 
  28:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  30:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /***************************************
  31:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Local data allocation
  32:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ***************************************/
  33:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /* Channels configuration generated by customiser */
  34:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** static const uint32 CYCODE ADC_SAR_SEQ_channelsConfig[] = { 0x00000000u, 0x00000000u, 0x00000000u }
  35:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  37:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
  38:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Start
  39:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  40:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  41:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
  42:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Performs all required initialization for this component
  43:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  and enables the power. The power will be set to the appropriate
  44:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  power based on the clock frequency.
  45:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  46:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
  47:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  48:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  49:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
  50:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  51:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  52:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
  53:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  The ADC_SAR_SEQ_initVar variable is used to indicate when/if initial
  54:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  configuration of this component has happened. The variable is initialized to
  55:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  56:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  57:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start() routine.
  58:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If re-initialization of the component is required the variable should be set
  59:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  to zero before call of ADC_SAR_SEQ_Start() routine, or the user may call
  60:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Init() and ADC_SAR_SEQ_Enable() as done in the
  61:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start() routine.
  62:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  63:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
  64:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Start(void)
  65:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
  40              		.loc 1 65 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 3


  66:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* If not Initialized then initialize all required hardware and software */
  67:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if(ADC_SAR_SEQ_initVar == 0u)
  48              		.loc 1 67 0
  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  68:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
  69:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_Init();
  53              		.loc 1 69 0
  54 000c FFF7FEFF 		bl	ADC_SAR_SEQ_Init
  70:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_initVar = 1u;
  55              		.loc 1 70 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  71:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
  72:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_Enable();
  60              		.loc 1 72 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_SEQ_Enable
  73:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
  62              		.loc 1 73 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_SEQ_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_SAR_SEQ_Start, .-ADC_SAR_SEQ_Start
  73              		.section	.text.ADC_SAR_SEQ_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_SAR_SEQ_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_SAR_SEQ_Init, %function
  79              	ADC_SAR_SEQ_Init:
  80              	.LFB1:
  74:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
  76:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
  77:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Init
  78:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
  79:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  80:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
  81:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Initialize component's parameters to the parameters set by user in the
  82:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  customizer of the component placed onto schematic. Usually called in
  83:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Start().
  84:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  85:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
  86:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
  87:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  88:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
  89:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 4


  90:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  91:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
  92:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  The ADC_SAR_SEQ_offset variable is initialized.
  93:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
  94:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Init(void)
  96:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
  81              		.loc 1 96 0
  82              		.cfi_startproc
  83 0000 80B5     		push	{r7, lr}
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 84B0     		sub	sp, sp, #16
  88              		.cfi_def_cfa_offset 24
  89 0004 00AF     		add	r7, sp, #0
  90              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 chNum;
  98:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 tmpRegVal;
  99:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int32 counts;
 100:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 101:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 102:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         static const uint8 CYCODE ADC_SAR_SEQ_InputsPlacement[] =
 103:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 104:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 105:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_0_PIN
 106:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 107:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****              (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_1_PIN
 108:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 2u)
 109:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 110:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_2_PIN
 111:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 2u */
 112:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 3u)
 113:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 114:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_3_PIN
 115:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 3u */
 116:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 4u)
 117:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 118:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_4_PIN
 119:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 4u */
 120:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 5u)
 121:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 122:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_5_PIN
 123:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 5u */
 124:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 6u)
 125:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 126:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_6_PIN
 127:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 6u */
 128:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 7u)
 129:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 130:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_7_PIN
 131:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 7u */
 132:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 8u)
 133:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ,(uint8)(ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 134:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (uint8)ADC_SAR_SEQ_cy_psoc4_sarmux_8__CH_8_PIN
 135:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 8u */
 136:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         };
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 5


 137:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 138:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 139:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_IRQ_REMOVE == 0u)
 140:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Start and set interrupt vector */
 141:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CyIntSetPriority(ADC_SAR_SEQ_INTC_NUMBER, ADC_SAR_SEQ_INTC_PRIOR_NUMBER);
  91              		.loc 1 141 0
  92 0006 0E20     		mov	r0, #14
  93 0008 0321     		mov	r1, #3
  94 000a FFF7FEFF 		bl	CyIntSetPriority
 142:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         (void)CyIntSetVector(ADC_SAR_SEQ_INTC_NUMBER, &ADC_SAR_SEQ_ISR);
  95              		.loc 1 142 0
  96 000e 5C4B     		ldr	r3, .L15
  97 0010 0E20     		mov	r0, #14
  98 0012 191C     		mov	r1, r3
  99 0014 FFF7FEFF 		bl	CyIntSetVector
 143:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif   /* End ADC_SAR_SEQ_IRQ_REMOVE */
 144:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 145:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Init SAR and MUX registers */
 146:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CHAN_EN_REG = ADC_SAR_SEQ_DEFAULT_EN_CHANNELS;
 100              		.loc 1 146 0
 101 0018 5A4B     		ldr	r3, .L15+4
 102 001a 0722     		mov	r2, #7
 103 001c 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG = ADC_SAR_SEQ_DEFAULT_CTRL_REG_CFG;
 104              		.loc 1 147 0
 105 001e 5A4B     		ldr	r3, .L15+8
 106 0020 5A4A     		ldr	r2, .L15+12
 107 0022 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_CTRL_REG_CFG;
 108              		.loc 1 148 0
 109 0024 5A4B     		ldr	r3, .L15+16
 110 0026 5B4A     		ldr	r2, .L15+20
 111 0028 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG = ADC_SAR_SEQ_DEFAULT_RANGE_THRES_REG_CFG;
 112              		.loc 1 149 0
 113 002a 5B4B     		ldr	r3, .L15+24
 114 002c 5B4A     		ldr	r2, .L15+28
 115 002e 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_COND_REG  = ADC_SAR_SEQ_COMPARE_MODE;
 116              		.loc 1 150 0
 117 0030 5B4B     		ldr	r3, .L15+32
 118 0032 0022     		mov	r2, #0
 119 0034 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_TIME01_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_TIME01_REG_CFG;
 120              		.loc 1 151 0
 121 0036 5B4B     		ldr	r3, .L15+36
 122 0038 5B4A     		ldr	r2, .L15+40
 123 003a 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SAMPLE_TIME23_REG = ADC_SAR_SEQ_DEFAULT_SAMPLE_TIME23_REG_CFG;
 124              		.loc 1 152 0
 125 003c 5B4B     		ldr	r3, .L15+44
 126 003e 5A4A     		ldr	r2, .L15+40
 127 0040 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_MUX_SWITCH0_REG |= ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0; 
 128              		.loc 1 155 0
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 6


 129 0042 5B4B     		ldr	r3, .L15+48
 130 0044 5A4A     		ldr	r2, .L15+48
 131 0046 1268     		ldr	r2, [r2]
 132 0048 8021     		mov	r1, #128
 133 004a 4902     		lsl	r1, r1, #9
 134 004c 0A43     		orr	r2, r1
 135 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ADC_SAR_SEQ_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_SEQ_DEFAULT_MUX_SWITCH0; 
 136              		.loc 1 158 0
 137 0050 584B     		ldr	r3, .L15+52
 138 0052 584A     		ldr	r2, .L15+52
 139 0054 1268     		ldr	r2, [r2]
 140 0056 8021     		mov	r1, #128
 141 0058 4902     		lsl	r1, r1, #9
 142 005a 0A43     		orr	r2, r1
 143 005c 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /*ADC_SAR_SEQ_CHANNELS_MODE !=0 */    
 161:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 162:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG = 0u;
 144              		.loc 1 162 0
 145 005e 564B     		ldr	r3, .L15+56
 146 0060 0022     		mov	r2, #0
 147 0062 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG = 0u;
 148              		.loc 1 163 0
 149 0064 554B     		ldr	r3, .L15+60
 150 0066 0022     		mov	r2, #0
 151 0068 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_INTR_MASK_REG = ADC_SAR_SEQ_SAR_INTR_MASK;
 152              		.loc 1 164 0
 153 006a 554B     		ldr	r3, .L15+64
 154 006c 0122     		mov	r2, #1
 155 006e 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_ANA_TRIM_REG = ADC_SAR_SEQ_TRIM_COEF;
 156              		.loc 1 165 0
 157 0070 544B     		ldr	r3, .L15+68
 158 0072 0222     		mov	r2, #2
 159 0074 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     
 167:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Read and modify default configuration based on characterization */
 168:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     tmpRegVal = ADC_SAR_SEQ_SAR_DFT_CTRL_REG;
 160              		.loc 1 168 0
 161 0076 544B     		ldr	r3, .L15+72
 162 0078 1B68     		ldr	r3, [r3]
 163 007a 7B60     		str	r3, [r7, #4]
 169:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_NOMINAL_CLOCK_FREQ > (ADC_SAR_SEQ_MAX_FREQUENCY / 2))
 170:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal &= (uint32)~ADC_SAR_SEQ_DCEN;
 171:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal |= ADC_SAR_SEQ_SEL_CSEL_DFT_CHAR;
 172:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #else  /* clock speed < 9 Mhz */  
 173:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal |= ADC_SAR_SEQ_DLY_INC;
 164              		.loc 1 173 0
 165 007c 7B68     		ldr	r3, [r7, #4]
 166 007e 0122     		mov	r2, #1
 167 0080 1343     		orr	r3, r2
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 7


 168 0082 7B60     		str	r3, [r7, #4]
 174:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* clock speed > 9 Mhz */
 175:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_DFT_CTRL_REG = tmpRegVal;
 169              		.loc 1 175 0
 170 0084 504B     		ldr	r3, .L15+72
 171 0086 7A68     		ldr	r2, [r7, #4]
 172 0088 1A60     		str	r2, [r3]
 176:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     
 177:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12)
 178:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_WOUNDING_REG = ADC_SAR_SEQ_ALT_WOUNDING;
 179:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12 */
 180:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 181:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     for(chNum = 0u; chNum < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM; chNum++)
 173              		.loc 1 181 0
 174 008a 0023     		mov	r3, #0
 175 008c FB60     		str	r3, [r7, #12]
 176 008e 70E0     		b	.L6
 177              	.L14:
 182:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 183:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         tmpRegVal = (ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_CHANNEL_CONFIG_MASK);
 178              		.loc 1 183 0
 179 0090 4E4B     		ldr	r3, .L15+76
 180 0092 FA68     		ldr	r2, [r7, #12]
 181 0094 9200     		lsl	r2, r2, #2
 182 0096 D258     		ldr	r2, [r2, r3]
 183 0098 DC23     		mov	r3, #220
 184 009a 9B01     		lsl	r3, r3, #6
 185 009c 1340     		and	r3, r2
 186 009e 7B60     		str	r3, [r7, #4]
 184:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u)
 185:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal |= ADC_SAR_SEQ_InputsPlacement[chNum];
 187              		.loc 1 185 0
 188 00a0 4B4A     		ldr	r2, .L15+80
 189 00a2 FB68     		ldr	r3, [r7, #12]
 190 00a4 D318     		add	r3, r2, r3
 191 00a6 1B78     		ldrb	r3, [r3]
 192 00a8 1A1C     		mov	r2, r3
 193 00aa 7B68     		ldr	r3, [r7, #4]
 194 00ac 1343     		orr	r3, r2
 195 00ae 7B60     		str	r3, [r7, #4]
 186:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* End ADC_SAR_SEQ_TOTAL_CHANNELS_NUM > 1u */
 187:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* When the part is wounded to 10-bit then the SUB_RESOLUTION bit 
 188:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit 
 189:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         *  (0) and 8-bit (1) resolution.
 190:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         */
 191:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if((ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12) && \
 192:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             (ADC_SAR_SEQ_ALT_WOUNDING == ADC_SAR_SEQ_WOUNDING_10BIT))
 193:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             tmpRegVal &= (uint32)(~ADC_SAR_SEQ_ALT_RESOLUTION_ON);
 194:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_MAX_RESOLUTION != ADC_SAR_SEQ_RESOLUTION_12 */
 195:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 196:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 197:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if(chNum < ADC_SAR_SEQ_SEQUENCED_CHANNELS_NUM)
 198:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 199:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 200:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_SEQ_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegV
 196              		.loc 1 200 0
 197 00b0 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 8


 198 00b2 9B00     		lsl	r3, r3, #2
 199 00b4 474A     		ldr	r2, .L15+84
 200 00b6 9446     		mov	ip, r2
 201 00b8 6344     		add	r3, r3, ip
 202 00ba 7A68     		ldr	r2, [r7, #4]
 203 00bc 1A60     		str	r2, [r3]
 201:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 202:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_SATURATE_EN_MASK) != 0u)
 204              		.loc 1 202 0
 205 00be 434B     		ldr	r3, .L15+76
 206 00c0 FA68     		ldr	r2, [r7, #12]
 207 00c2 9200     		lsl	r2, r2, #2
 208 00c4 D358     		ldr	r3, [r2, r3]
 209 00c6 0122     		mov	r2, #1
 210 00c8 1340     		and	r3, r2
 211 00ca 09D0     		beq	.L7
 203:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 204:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 212              		.loc 1 204 0
 213 00cc 3A4B     		ldr	r3, .L15+56
 214 00ce 3A4A     		ldr	r2, .L15+56
 215 00d0 1268     		ldr	r2, [r2]
 216 00d2 F968     		ldr	r1, [r7, #12]
 217 00d4 0120     		mov	r0, #1
 218 00d6 8840     		lsl	r0, r0, r1
 219 00d8 011C     		mov	r1, r0
 220 00da 89B2     		uxth	r1, r1
 221 00dc 0A43     		orr	r2, r1
 222 00de 1A60     		str	r2, [r3]
 223              	.L7:
 205:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 206:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 207:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_RANGE_CTRL_EN_MASK) != 0u)
 224              		.loc 1 207 0
 225 00e0 3A4B     		ldr	r3, .L15+76
 226 00e2 FA68     		ldr	r2, [r7, #12]
 227 00e4 9200     		lsl	r2, r2, #2
 228 00e6 D358     		ldr	r3, [r2, r3]
 229 00e8 0222     		mov	r2, #2
 230 00ea 1340     		and	r3, r2
 231 00ec 09D0     		beq	.L8
 208:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 209:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 232              		.loc 1 209 0
 233 00ee 334B     		ldr	r3, .L15+60
 234 00f0 324A     		ldr	r2, .L15+60
 235 00f2 1268     		ldr	r2, [r2]
 236 00f4 F968     		ldr	r1, [r7, #12]
 237 00f6 0120     		mov	r0, #1
 238 00f8 8840     		lsl	r0, r0, r1
 239 00fa 011C     		mov	r1, r0
 240 00fc 89B2     		uxth	r1, r1
 241 00fe 0A43     		orr	r2, r1
 242 0100 1A60     		str	r2, [r3]
 243              	.L8:
 210:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 211:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 9


 212:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 213:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             else
 214:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 215:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 CY_SET_REG32(ADC_SAR_SEQ_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_SEQ_INJ_TAILG
 216:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 217:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_SATURATE_EN_MASK) != 0u)
 218:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 {
 219:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                     ADC_SAR_SEQ_SAR_INTR_MASK_REG |= ADC_SAR_SEQ_INJ_SATURATE_MASK;
 220:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 }
 221:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 222:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_IS_RANGE_CTRL_EN_MASK) != 0u)
 223:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 {
 224:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                     ADC_SAR_SEQ_SAR_INTR_MASK_REG |= ADC_SAR_SEQ_INJ_RANGE_MASK;
 225:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 }
 226:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 227:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 228:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 229:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_ALT_RESOLUTION_ON) != 0u)
 244              		.loc 1 229 0
 245 0102 324B     		ldr	r3, .L15+76
 246 0104 FA68     		ldr	r2, [r7, #12]
 247 0106 9200     		lsl	r2, r2, #2
 248 0108 D258     		ldr	r2, [r2, r3]
 249 010a 8023     		mov	r3, #128
 250 010c 9B00     		lsl	r3, r3, #2
 251 010e 1340     		and	r3, r2
 252 0110 03D0     		beq	.L9
 230:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 231:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                counts = (int32)ADC_SAR_SEQ_DEFAULT_MAX_WRK_ALT;
 253              		.loc 1 231 0
 254 0112 8023     		mov	r3, #128
 255 0114 5B00     		lsl	r3, r3, #1
 256 0116 BB60     		str	r3, [r7, #8]
 257 0118 02E0     		b	.L10
 258              	.L9:
 232:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 233:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         else
 234:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 235:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                counts = (int32)ADC_SAR_SEQ_SAR_WRK_MAX_12BIT;
 259              		.loc 1 235 0
 260 011a 8023     		mov	r3, #128
 261 011c 5B01     		lsl	r3, r3, #5
 262 011e BB60     		str	r3, [r7, #8]
 263              	.L10:
 236:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 237:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 238:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((ADC_SAR_SEQ_channelsConfig[chNum] & ADC_SAR_SEQ_DIFFERENTIAL_EN) == 0u)
 264              		.loc 1 238 0
 265 0120 2A4B     		ldr	r3, .L15+76
 266 0122 FA68     		ldr	r2, [r7, #12]
 267 0124 9200     		lsl	r2, r2, #2
 268 0126 D258     		ldr	r2, [r2, r3]
 269 0128 8023     		mov	r3, #128
 270 012a 5B00     		lsl	r3, r3, #1
 271 012c 1340     		and	r3, r2
 272 012e 05D1     		bne	.L11
 239:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {  
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 10


 240:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if((ADC_SAR_SEQ_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FSIGNED) && \
 241:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 (ADC_SAR_SEQ_DEFAULT_NEG_INPUT_SEL == ADC_SAR_SEQ__VREF))
 242:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 243:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = (int16)(counts / -2);
 244:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #else    
 245:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = 0;
 273              		.loc 1 245 0
 274 0130 294B     		ldr	r3, .L15+88
 275 0132 FA68     		ldr	r2, [r7, #12]
 276 0134 5200     		lsl	r2, r2, #1
 277 0136 0021     		mov	r1, #0
 278 0138 D152     		strh	r1, [r2, r3]
 279 013a 04E0     		b	.L12
 280              	.L11:
 246:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FSIGNED */    
 247:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 248:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         else    /* Differential channel */
 249:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 250:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #if(ADC_SAR_SEQ_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FUNSIGNED)
 251:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Set offset to the half scale to convert results to signed format */
 252:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = (int16)(counts / 2);
 253:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #else    
 254:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_offset[chNum] = 0;
 281              		.loc 1 254 0
 282 013c 264B     		ldr	r3, .L15+88
 283 013e FA68     		ldr	r2, [r7, #12]
 284 0140 5200     		lsl	r2, r2, #1
 285 0142 0021     		mov	r1, #0
 286 0144 D152     		strh	r1, [r2, r3]
 287              	.L12:
 255:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             #endif /* end ADC_SAR_SEQ_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_SEQ__FUNSIGNED */  
 256:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 257:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Calculate gain in counts per 10 volts with rounding */
 258:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_SEQ_10MV_COUNTS) + 
 288              		.loc 1 258 0 discriminator 2
 289 0146 BB68     		ldr	r3, [r7, #8]
 290 0148 244A     		ldr	r2, .L15+92
 291 014a 5343     		mul	r3, r2
 292 014c 8022     		mov	r2, #128
 293 014e D200     		lsl	r2, r2, #3
 294 0150 9446     		mov	ip, r2
 295 0152 6344     		add	r3, r3, ip
 259:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                             ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE
 296              		.loc 1 259 0 discriminator 2
 297 0154 002B     		cmp	r3, #0
 298 0156 02DA     		bge	.L13
 299 0158 214A     		ldr	r2, .L15+96
 300 015a 9446     		mov	ip, r2
 301 015c 6344     		add	r3, r3, ip
 302              	.L13:
 303 015e DB12     		asr	r3, r3, #11
 258:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                             ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_SEQ_DEFAULT_VREF_MV_VALUE
 304              		.loc 1 258 0 discriminator 2
 305 0160 9BB2     		uxth	r3, r3
 306 0162 19B2     		sxth	r1, r3
 307 0164 1F4B     		ldr	r3, .L15+100
 308 0166 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 11


 309 0168 9200     		lsl	r2, r2, #2
 310 016a D150     		str	r1, [r2, r3]
 181:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 311              		.loc 1 181 0 discriminator 2
 312 016c FB68     		ldr	r3, [r7, #12]
 313 016e 0133     		add	r3, r3, #1
 314 0170 FB60     		str	r3, [r7, #12]
 315              	.L6:
 181:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 316              		.loc 1 181 0 is_stmt 0 discriminator 1
 317 0172 FB68     		ldr	r3, [r7, #12]
 318 0174 022B     		cmp	r3, #2
 319 0176 8BD9     		bls	.L14
 260:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 261:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 320              		.loc 1 261 0 is_stmt 1
 321 0178 BD46     		mov	sp, r7
 322 017a 04B0     		add	sp, sp, #16
 323              		@ sp needed
 324 017c 80BD     		pop	{r7, pc}
 325              	.L16:
 326 017e C046     		.align	2
 327              	.L15:
 328 0180 00000000 		.word	ADC_SAR_SEQ_ISR
 329 0184 20001A40 		.word	1075445792
 330 0188 00001A40 		.word	1075445760
 331 018c C0200010 		.word	268443840
 332 0190 04001A40 		.word	1075445764
 333 0194 8C000080 		.word	-2147483508
 334 0198 18001A40 		.word	1075445784
 335 019c 0000FF07 		.word	134152192
 336 01a0 1C001A40 		.word	1075445788
 337 01a4 10001A40 		.word	1075445776
 338 01a8 04000400 		.word	262148
 339 01ac 14001A40 		.word	1075445780
 340 01b0 00031A40 		.word	1075446528
 341 01b4 40031A40 		.word	1075446592
 342 01b8 28021A40 		.word	1075446312
 343 01bc 38021A40 		.word	1075446328
 344 01c0 18021A40 		.word	1075446296
 345 01c4 000F1A40 		.word	1075449600
 346 01c8 30001A40 		.word	1075445808
 347 01cc 00000000 		.word	ADC_SAR_SEQ_channelsConfig
 348 01d0 0C000000 		.word	ADC_SAR_SEQ_InputsPlacement.4678
 349 01d4 80001A40 		.word	1075445888
 350 01d8 00000000 		.word	ADC_SAR_SEQ_offset
 351 01dc 10270000 		.word	10000
 352 01e0 FF070000 		.word	2047
 353 01e4 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 354              		.cfi_endproc
 355              	.LFE1:
 356              		.size	ADC_SAR_SEQ_Init, .-ADC_SAR_SEQ_Init
 357              		.section	.text.ADC_SAR_SEQ_Enable,"ax",%progbits
 358              		.align	2
 359              		.global	ADC_SAR_SEQ_Enable
 360              		.code	16
 361              		.thumb_func
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 12


 362              		.type	ADC_SAR_SEQ_Enable, %function
 363              	ADC_SAR_SEQ_Enable:
 364              	.LFB2:
 262:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 263:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 264:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_1_Enable
 265:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 266:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 267:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 268:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Enables the clock and analog power for SAR ADC.
 269:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 270:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 271:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 272:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 273:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 274:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 275:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 276:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 277:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Enable(void)
 278:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 365              		.loc 1 278 0
 366              		.cfi_startproc
 367 0000 80B5     		push	{r7, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 00AF     		add	r7, sp, #0
 372              		.cfi_def_cfa_register 7
 279:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG |= ADC_SAR_SEQ_ENABLE;
 373              		.loc 1 279 0
 374 0004 054B     		ldr	r3, .L18
 375 0006 054A     		ldr	r2, .L18
 376 0008 1268     		ldr	r2, [r2]
 377 000a 8021     		mov	r1, #128
 378 000c 0906     		lsl	r1, r1, #24
 379 000e 0A43     		orr	r2, r1
 380 0010 1A60     		str	r2, [r3]
 280:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* The block is ready to use 10 us after the enable signal is set high. */
 281:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CyDelayUs(ADC_SAR_SEQ_10US_DELAY);
 381              		.loc 1 281 0
 382 0012 0A20     		mov	r0, #10
 383 0014 FFF7FEFF 		bl	CyDelayUs
 282:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 384              		.loc 1 282 0
 385 0018 BD46     		mov	sp, r7
 386              		@ sp needed
 387 001a 80BD     		pop	{r7, pc}
 388              	.L19:
 389              		.align	2
 390              	.L18:
 391 001c 00001A40 		.word	1075445760
 392              		.cfi_endproc
 393              	.LFE2:
 394              		.size	ADC_SAR_SEQ_Enable, .-ADC_SAR_SEQ_Enable
 395              		.section	.text.ADC_SAR_SEQ_Stop,"ax",%progbits
 396              		.align	2
 397              		.global	ADC_SAR_SEQ_Stop
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 13


 398              		.code	16
 399              		.thumb_func
 400              		.type	ADC_SAR_SEQ_Stop, %function
 401              	ADC_SAR_SEQ_Stop:
 402              	.LFB3:
 283:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 284:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 285:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 286:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_Stop
 287:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 288:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 289:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 290:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 291:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mode.
 292:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 293:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 294:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 295:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 296:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 297:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 298:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 299:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 300:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_Stop(void)
 301:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 403              		.loc 1 301 0
 404              		.cfi_startproc
 405 0000 80B5     		push	{r7, lr}
 406              		.cfi_def_cfa_offset 8
 407              		.cfi_offset 7, -8
 408              		.cfi_offset 14, -4
 409 0002 00AF     		add	r7, sp, #0
 410              		.cfi_def_cfa_register 7
 302:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CTRL_REG &= (uint32)~ADC_SAR_SEQ_ENABLE;
 411              		.loc 1 302 0
 412 0004 034B     		ldr	r3, .L21
 413 0006 034A     		ldr	r2, .L21
 414 0008 1268     		ldr	r2, [r2]
 415 000a 5200     		lsl	r2, r2, #1
 416 000c 5208     		lsr	r2, r2, #1
 417 000e 1A60     		str	r2, [r3]
 303:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 418              		.loc 1 303 0
 419 0010 BD46     		mov	sp, r7
 420              		@ sp needed
 421 0012 80BD     		pop	{r7, pc}
 422              	.L22:
 423              		.align	2
 424              	.L21:
 425 0014 00001A40 		.word	1075445760
 426              		.cfi_endproc
 427              	.LFE3:
 428              		.size	ADC_SAR_SEQ_Stop, .-ADC_SAR_SEQ_Stop
 429              		.section	.text.ADC_SAR_SEQ_StartConvert,"ax",%progbits
 430              		.align	2
 431              		.global	ADC_SAR_SEQ_StartConvert
 432              		.code	16
 433              		.thumb_func
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 14


 434              		.type	ADC_SAR_SEQ_StartConvert, %function
 435              	ADC_SAR_SEQ_StartConvert:
 436              	.LFB4:
 304:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 305:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 306:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 307:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_StartConvert
 308:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 309:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 310:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 311:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description:
 312:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  For free running mode, this API starts the conversion process and it
 313:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  runs continuously.
 314:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 315:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  In a triggered mode, this routine triggers every conversion by
 316:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 317:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  every conversion has to start by this API.
 318:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 319:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 320:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 321:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 322:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 323:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 324:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 325:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 326:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_StartConvert(void)
 327:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 437              		.loc 1 327 0
 438              		.cfi_startproc
 439 0000 80B5     		push	{r7, lr}
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 7, -8
 442              		.cfi_offset 14, -4
 443 0002 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 328:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_SEQ__FREERUNNING)
 329:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG |= ADC_SAR_SEQ_CONTINUOUS_EN;
 445              		.loc 1 329 0
 446 0004 044B     		ldr	r3, .L24
 447 0006 044A     		ldr	r2, .L24
 448 0008 1268     		ldr	r2, [r2]
 449 000a 8021     		mov	r1, #128
 450 000c 4902     		lsl	r1, r1, #9
 451 000e 0A43     		orr	r2, r1
 452 0010 1A60     		str	r2, [r3]
 330:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #else /* Firmware trigger */
 331:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_START_CTRL_REG = ADC_SAR_SEQ_FW_TRIGGER;
 332:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* End ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE == ADC_SAR_SEQ__FREERUNNING */
 333:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 334:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 453              		.loc 1 334 0
 454 0012 BD46     		mov	sp, r7
 455              		@ sp needed
 456 0014 80BD     		pop	{r7, pc}
 457              	.L25:
 458 0016 C046     		.align	2
 459              	.L24:
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 15


 460 0018 04001A40 		.word	1075445764
 461              		.cfi_endproc
 462              	.LFE4:
 463              		.size	ADC_SAR_SEQ_StartConvert, .-ADC_SAR_SEQ_StartConvert
 464              		.section	.text.ADC_SAR_SEQ_StopConvert,"ax",%progbits
 465              		.align	2
 466              		.global	ADC_SAR_SEQ_StopConvert
 467              		.code	16
 468              		.thumb_func
 469              		.type	ADC_SAR_SEQ_StopConvert, %function
 470              	ADC_SAR_SEQ_StopConvert:
 471              	.LFB5:
 335:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 337:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 338:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_StopConvert
 339:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 340:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 341:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 342:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Forces the ADC to stop all conversions.
 343:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 344:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 345:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 346:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 347:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 348:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 349:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 350:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 351:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_StopConvert(void)
 352:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 472              		.loc 1 352 0
 473              		.cfi_startproc
 474 0000 80B5     		push	{r7, lr}
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 7, -8
 477              		.cfi_offset 14, -4
 478 0002 00AF     		add	r7, sp, #0
 479              		.cfi_def_cfa_register 7
 353:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_SEQ__FREERUNNING)
 354:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_SEQ_CONTINUOUS_EN);
 480              		.loc 1 354 0
 481 0004 034B     		ldr	r3, .L27
 482 0006 034A     		ldr	r2, .L27
 483 0008 1268     		ldr	r2, [r2]
 484 000a 0349     		ldr	r1, .L27+4
 485 000c 0A40     		and	r2, r1
 486 000e 1A60     		str	r2, [r3]
 355:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_DEFAULT_SAMPLE_MODE == ADC_SAR_SEQ__FREERUNNING */
 356:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 487              		.loc 1 356 0
 488 0010 BD46     		mov	sp, r7
 489              		@ sp needed
 490 0012 80BD     		pop	{r7, pc}
 491              	.L28:
 492              		.align	2
 493              	.L27:
 494 0014 04001A40 		.word	1075445764
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 16


 495 0018 FFFFFEFF 		.word	-65537
 496              		.cfi_endproc
 497              	.LFE5:
 498              		.size	ADC_SAR_SEQ_StopConvert, .-ADC_SAR_SEQ_StopConvert
 499              		.section	.text.ADC_SAR_SEQ_IsEndConversion,"ax",%progbits
 500              		.align	2
 501              		.global	ADC_SAR_SEQ_IsEndConversion
 502              		.code	16
 503              		.thumb_func
 504              		.type	ADC_SAR_SEQ_IsEndConversion, %function
 505              	ADC_SAR_SEQ_IsEndConversion:
 506              	.LFB6:
 357:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 358:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 359:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 360:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_IsEndConversion
 361:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 362:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 363:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 364:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description: Checks for ADC end of conversion for the case one
 365:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  channel and end of scan for the case of multiple channels. It acts
 366:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  as a software version of the EOC. This function provides the
 367:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  programmer with two options. In one mode this function
 368:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  immediately returns with the conversion status. In the other mode,
 369:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  the function does not return (blocking) until the conversion has
 370:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  completed.
 371:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 372:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 373:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 374:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 375:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 376:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *                              for injection channel
 377:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 378:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *                              channel conversion
 379:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 382:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 383:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 384:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 385:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** uint32 ADC_SAR_SEQ_IsEndConversion(uint32 retMode)
 386:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 507              		.loc 1 386 0
 508              		.cfi_startproc
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 84B0     		sub	sp, sp, #16
 514              		.cfi_def_cfa_offset 24
 515 0004 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517 0006 7860     		str	r0, [r7, #4]
 387:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 status = 0u;
 518              		.loc 1 387 0
 519 0008 0023     		mov	r3, #0
 520 000a FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 17


 388:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 389:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if((retMode & (ADC_SAR_SEQ_RETURN_STATUS | ADC_SAR_SEQ_WAIT_FOR_RESULT)) != 0u)
 521              		.loc 1 389 0
 522 000c 7B68     		ldr	r3, [r7, #4]
 523 000e 0322     		mov	r2, #3
 524 0010 1340     		and	r3, r2
 525 0012 11D0     		beq	.L30
 526              	.L32:
 390:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 391:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         do
 392:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 393:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             status = ADC_SAR_SEQ_SAR_INTR_REG & ADC_SAR_SEQ_EOS_MASK;
 527              		.loc 1 393 0 discriminator 2
 528 0014 0B4B     		ldr	r3, .L34
 529 0016 1B68     		ldr	r3, [r3]
 530 0018 0122     		mov	r2, #1
 531 001a 1340     		and	r3, r2
 532 001c FB60     		str	r3, [r7, #12]
 394:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }while((status == 0u) && ((retMode & ADC_SAR_SEQ_WAIT_FOR_RESULT) != 0u));
 533              		.loc 1 394 0 discriminator 2
 534 001e FB68     		ldr	r3, [r7, #12]
 535 0020 002B     		cmp	r3, #0
 536 0022 03D1     		bne	.L31
 537              		.loc 1 394 0 is_stmt 0 discriminator 1
 538 0024 7B68     		ldr	r3, [r7, #4]
 539 0026 0222     		mov	r2, #2
 540 0028 1340     		and	r3, r2
 541 002a F3D1     		bne	.L32
 542              	.L31:
 395:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 396:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if(status != 0u)
 543              		.loc 1 396 0 is_stmt 1
 544 002c FB68     		ldr	r3, [r7, #12]
 545 002e 002B     		cmp	r3, #0
 546 0030 02D0     		beq	.L30
 397:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 398:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             /* Clear EOS bit */
 399:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             ADC_SAR_SEQ_SAR_INTR_REG = ADC_SAR_SEQ_EOS_MASK;
 547              		.loc 1 399 0
 548 0032 044B     		ldr	r3, .L34
 549 0034 0122     		mov	r2, #1
 550 0036 1A60     		str	r2, [r3]
 551              	.L30:
 400:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 401:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 402:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 403:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 404:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         if((retMode & (ADC_SAR_SEQ_RETURN_STATUS_INJ | ADC_SAR_SEQ_WAIT_FOR_RESULT_INJ)) != 0u)
 405:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         {
 406:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             do
 407:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 408:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 status |= ADC_SAR_SEQ_SAR_INTR_REG & ADC_SAR_SEQ_INJ_EOC_MASK;
 409:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }while(((status & ADC_SAR_SEQ_INJ_EOC_MASK) != 0u) &&
 410:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                    ((retMode & ADC_SAR_SEQ_WAIT_FOR_RESULT_INJ) != 0u));
 411:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 412:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((status & ADC_SAR_SEQ_INJ_EOC_MASK) != 0u)
 413:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 18


 414:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 /* Clear Injection EOS bit */
 415:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_SAR_INTR_REG = ADC_SAR_SEQ_INJ_EOC_MASK;
 416:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }
 417:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         }
 418:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 419:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 420:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     return (status);
 552              		.loc 1 420 0
 553 0038 FB68     		ldr	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 554              		.loc 1 421 0
 555 003a 181C     		mov	r0, r3
 556 003c BD46     		mov	sp, r7
 557 003e 04B0     		add	sp, sp, #16
 558              		@ sp needed
 559 0040 80BD     		pop	{r7, pc}
 560              	.L35:
 561 0042 C046     		.align	2
 562              	.L34:
 563 0044 10021A40 		.word	1075446288
 564              		.cfi_endproc
 565              	.LFE6:
 566              		.size	ADC_SAR_SEQ_IsEndConversion, .-ADC_SAR_SEQ_IsEndConversion
 567              		.section	.text.ADC_SAR_SEQ_GetResult16,"ax",%progbits
 568              		.align	2
 569              		.global	ADC_SAR_SEQ_GetResult16
 570              		.code	16
 571              		.thumb_func
 572              		.type	ADC_SAR_SEQ_GetResult16, %function
 573              	ADC_SAR_SEQ_GetResult16:
 574              	.LFB7:
 422:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 423:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_GetResult16
 426:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 428:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Gets the data available in the SAR DATA register.
 430:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 431:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 432:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: The ADC channel in which to return the result. The first channel
 433:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 434:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 435:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 436:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Returns converted data as a signed 16-bit integer
 437:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 438:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 439:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** int16 ADC_SAR_SEQ_GetResult16(uint32 chan)
 440:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 575              		.loc 1 440 0
 576              		.cfi_startproc
 577 0000 80B5     		push	{r7, lr}
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 7, -8
 580              		.cfi_offset 14, -4
 581 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 19


 582              		.cfi_def_cfa_offset 24
 583 0004 00AF     		add	r7, sp, #0
 584              		.cfi_def_cfa_register 7
 585 0006 7860     		str	r0, [r7, #4]
 441:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     uint32 result;
 442:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 443:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 444:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 586              		.loc 1 444 0
 587 0008 7B68     		ldr	r3, [r7, #4]
 588 000a 022B     		cmp	r3, #2
 589 000c 02D9     		bls	.L37
 590              		.loc 1 444 0 is_stmt 0 discriminator 1
 591 000e 0020     		mov	r0, #0
 592 0010 FFF7FEFF 		bl	CyHalt
 593              	.L37:
 445:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 446:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     if(chan < ADC_SAR_SEQ_SEQUENCED_CHANNELS_NUM)
 594              		.loc 1 446 0 is_stmt 1
 595 0014 7B68     		ldr	r3, [r7, #4]
 596 0016 022B     		cmp	r3, #2
 597 0018 09D8     		bhi	.L38
 447:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 448:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_SEQ_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 598              		.loc 1 448 0
 599 001a 7B68     		ldr	r3, [r7, #4]
 600 001c 9B00     		lsl	r3, r3, #2
 601 001e 084A     		ldr	r2, .L41
 602 0020 9446     		mov	ip, r2
 603 0022 6344     		add	r3, r3, ip
 604 0024 1B68     		ldr	r3, [r3]
 605 0026 1B04     		lsl	r3, r3, #16
 606 0028 1B0C     		lsr	r3, r3, #16
 607 002a FB60     		str	r3, [r7, #12]
 608 002c 01E0     		b	.L39
 609              	.L38:
 449:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 ADC_SAR_SEQ_RESULT_MASK;
 450:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 451:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     else
 452:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 453:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 454:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             result = ADC_SAR_SEQ_SAR_INJ_RESULT_REG & ADC_SAR_SEQ_RESULT_MASK;
 455:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #else
 456:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             result = 0u;
 610              		.loc 1 456 0
 611 002e 0023     		mov	r3, #0
 612 0030 FB60     		str	r3, [r7, #12]
 613              	.L39:
 457:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 458:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 459:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 460:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     return ( (int16)result );
 614              		.loc 1 460 0
 615 0032 FB68     		ldr	r3, [r7, #12]
 616 0034 9BB2     		uxth	r3, r3
 617 0036 1BB2     		sxth	r3, r3
 461:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 20


 618              		.loc 1 461 0
 619 0038 181C     		mov	r0, r3
 620 003a BD46     		mov	sp, r7
 621 003c 04B0     		add	sp, sp, #16
 622              		@ sp needed
 623 003e 80BD     		pop	{r7, pc}
 624              	.L42:
 625              		.align	2
 626              	.L41:
 627 0040 80011A40 		.word	1075446144
 628              		.cfi_endproc
 629              	.LFE7:
 630              		.size	ADC_SAR_SEQ_GetResult16, .-ADC_SAR_SEQ_GetResult16
 631              		.section	.text.ADC_SAR_SEQ_SetChanMask,"ax",%progbits
 632              		.align	2
 633              		.global	ADC_SAR_SEQ_SetChanMask
 634              		.code	16
 635              		.thumb_func
 636              		.type	ADC_SAR_SEQ_SetChanMask, %function
 637              	ADC_SAR_SEQ_SetChanMask:
 638              	.LFB8:
 462:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 463:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 464:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 465:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetChanMask
 466:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 467:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 468:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 469:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel enable mask.
 470:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 471:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 472:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that will be
 473:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  scanned. Setting bits for channels that do not exist will have no
 474:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  effect. For example, if only 6 channels were enabled, setting a
 475:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 476:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  This API will not enable the injection channel.
 477:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Examples: If the component is setup to sequence through 8
 478:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 479:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 480:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 481:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 482:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 483:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 484:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetChanMask(uint32 mask)
 485:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 639              		.loc 1 485 0
 640              		.cfi_startproc
 641 0000 80B5     		push	{r7, lr}
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 82B0     		sub	sp, sp, #8
 646              		.cfi_def_cfa_offset 16
 647 0004 00AF     		add	r7, sp, #0
 648              		.cfi_def_cfa_register 7
 649 0006 7860     		str	r0, [r7, #4]
 486:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_CHAN_EN_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 21


 650              		.loc 1 486 0
 651 0008 034B     		ldr	r3, .L44
 652 000a 7A68     		ldr	r2, [r7, #4]
 653 000c 0721     		mov	r1, #7
 654 000e 0A40     		and	r2, r1
 655 0010 1A60     		str	r2, [r3]
 487:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 656              		.loc 1 487 0
 657 0012 BD46     		mov	sp, r7
 658 0014 02B0     		add	sp, sp, #8
 659              		@ sp needed
 660 0016 80BD     		pop	{r7, pc}
 661              	.L45:
 662              		.align	2
 663              	.L44:
 664 0018 20001A40 		.word	1075445792
 665              		.cfi_endproc
 666              	.LFE8:
 667              		.size	ADC_SAR_SEQ_SetChanMask, .-ADC_SAR_SEQ_SetChanMask
 668              		.section	.text.ADC_SAR_SEQ_SetLowLimit,"ax",%progbits
 669              		.align	2
 670              		.global	ADC_SAR_SEQ_SetLowLimit
 671              		.code	16
 672              		.thumb_func
 673              		.type	ADC_SAR_SEQ_SetLowLimit, %function
 674              	ADC_SAR_SEQ_SetLowLimit:
 675              	.LFB9:
 488:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 489:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #if(ADC_SAR_SEQ_INJ_CHANNEL_ENABLED)
 490:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 491:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 492:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 493:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_EnableInjection
 494:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 495:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 496:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 497:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Enables the injection channel for the next scan only.
 498:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 499:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 500:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  None.
 501:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 502:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 503:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  None.
 504:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 505:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 506:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     void ADC_SAR_SEQ_EnableInjection(void)
 507:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 508:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         ADC_SAR_SEQ_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_SEQ_INJ_CHAN_EN;
 509:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 510:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 511:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #endif /* ADC_SAR_SEQ_INJ_CHANNEL_ENABLED */
 512:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 513:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 514:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 515:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetLowLimit
 516:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 517:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 22


 518:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 519:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the low limit parameter for a limit condition.
 520:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 521:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 522:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  lowLimit: The low limit for a limit condition.
 523:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 524:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 525:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 526:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 527:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 528:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetLowLimit(uint32 lowLimit)
 529:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 676              		.loc 1 529 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              		.cfi_def_cfa_offset 8
 680              		.cfi_offset 7, -8
 681              		.cfi_offset 14, -4
 682 0002 82B0     		sub	sp, sp, #8
 683              		.cfi_def_cfa_offset 16
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 7860     		str	r0, [r7, #4]
 530:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_SEQ_RANGE_LOW_MASK);
 687              		.loc 1 530 0
 688 0008 084B     		ldr	r3, .L47
 689 000a 084A     		ldr	r2, .L47
 690 000c 1268     		ldr	r2, [r2]
 691 000e 120C     		lsr	r2, r2, #16
 692 0010 1204     		lsl	r2, r2, #16
 693 0012 1A60     		str	r2, [r3]
 531:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_SEQ_RANGE_LOW_MASK;
 694              		.loc 1 531 0
 695 0014 054B     		ldr	r3, .L47
 696 0016 054A     		ldr	r2, .L47
 697 0018 1168     		ldr	r1, [r2]
 698 001a 7A68     		ldr	r2, [r7, #4]
 699 001c 1204     		lsl	r2, r2, #16
 700 001e 120C     		lsr	r2, r2, #16
 701 0020 0A43     		orr	r2, r1
 702 0022 1A60     		str	r2, [r3]
 532:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 703              		.loc 1 532 0
 704 0024 BD46     		mov	sp, r7
 705 0026 02B0     		add	sp, sp, #8
 706              		@ sp needed
 707 0028 80BD     		pop	{r7, pc}
 708              	.L48:
 709 002a C046     		.align	2
 710              	.L47:
 711 002c 18001A40 		.word	1075445784
 712              		.cfi_endproc
 713              	.LFE9:
 714              		.size	ADC_SAR_SEQ_SetLowLimit, .-ADC_SAR_SEQ_SetLowLimit
 715              		.section	.text.ADC_SAR_SEQ_SetHighLimit,"ax",%progbits
 716              		.align	2
 717              		.global	ADC_SAR_SEQ_SetHighLimit
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 23


 718              		.code	16
 719              		.thumb_func
 720              		.type	ADC_SAR_SEQ_SetHighLimit, %function
 721              	ADC_SAR_SEQ_SetHighLimit:
 722              	.LFB10:
 533:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 534:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 535:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 536:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetHighLimit
 537:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 538:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 539:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 540:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the low limit parameter for a limit condition.
 541:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 542:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 543:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  highLimit: The high limit for a limit condition.
 544:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 545:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetHighLimit(uint32 highLimit)
 550:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 723              		.loc 1 550 0
 724              		.cfi_startproc
 725 0000 80B5     		push	{r7, lr}
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 7, -8
 728              		.cfi_offset 14, -4
 729 0002 82B0     		sub	sp, sp, #8
 730              		.cfi_def_cfa_offset 16
 731 0004 00AF     		add	r7, sp, #0
 732              		.cfi_def_cfa_register 7
 733 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_SEQ_RANGE_HIGH_MASK);
 734              		.loc 1 551 0
 735 0008 074B     		ldr	r3, .L50
 736 000a 074A     		ldr	r2, .L50
 737 000c 1268     		ldr	r2, [r2]
 738 000e 1204     		lsl	r2, r2, #16
 739 0010 120C     		lsr	r2, r2, #16
 740 0012 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_SEQ_RANGE_HIGH_OFFSET);
 741              		.loc 1 552 0
 742 0014 044B     		ldr	r3, .L50
 743 0016 044A     		ldr	r2, .L50
 744 0018 1168     		ldr	r1, [r2]
 745 001a 7A68     		ldr	r2, [r7, #4]
 746 001c 1204     		lsl	r2, r2, #16
 747 001e 0A43     		orr	r2, r1
 748 0020 1A60     		str	r2, [r3]
 553:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 749              		.loc 1 553 0
 750 0022 BD46     		mov	sp, r7
 751 0024 02B0     		add	sp, sp, #8
 752              		@ sp needed
 753 0026 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 24


 754              	.L51:
 755              		.align	2
 756              	.L50:
 757 0028 18001A40 		.word	1075445784
 758              		.cfi_endproc
 759              	.LFE10:
 760              		.size	ADC_SAR_SEQ_SetHighLimit, .-ADC_SAR_SEQ_SetHighLimit
 761              		.section	.text.ADC_SAR_SEQ_SetLimitMask,"ax",%progbits
 762              		.align	2
 763              		.global	ADC_SAR_SEQ_SetLimitMask
 764              		.code	16
 765              		.thumb_func
 766              		.type	ADC_SAR_SEQ_SetLimitMask, %function
 767              	ADC_SAR_SEQ_SetLimitMask:
 768              	.LFB11:
 554:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 555:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 556:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 557:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetLimitMask
 558:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 559:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 560:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 561:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel limit condition mask.
 562:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 563:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 564:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that may cause a
 565:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 566:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  will have no effect. For example, if only 6 channels were enabled,
 567:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 568:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 569:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 570:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 571:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 572:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 573:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetLimitMask(uint32 mask)
 574:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 769              		.loc 1 574 0
 770              		.cfi_startproc
 771 0000 80B5     		push	{r7, lr}
 772              		.cfi_def_cfa_offset 8
 773              		.cfi_offset 7, -8
 774              		.cfi_offset 14, -4
 775 0002 82B0     		sub	sp, sp, #8
 776              		.cfi_def_cfa_offset 16
 777 0004 00AF     		add	r7, sp, #0
 778              		.cfi_def_cfa_register 7
 779 0006 7860     		str	r0, [r7, #4]
 575:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 780              		.loc 1 575 0
 781 0008 034B     		ldr	r3, .L53
 782 000a 7A68     		ldr	r2, [r7, #4]
 783 000c 0721     		mov	r1, #7
 784 000e 0A40     		and	r2, r1
 785 0010 1A60     		str	r2, [r3]
 576:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 786              		.loc 1 576 0
 787 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 25


 788 0014 02B0     		add	sp, sp, #8
 789              		@ sp needed
 790 0016 80BD     		pop	{r7, pc}
 791              	.L54:
 792              		.align	2
 793              	.L53:
 794 0018 38021A40 		.word	1075446328
 795              		.cfi_endproc
 796              	.LFE11:
 797              		.size	ADC_SAR_SEQ_SetLimitMask, .-ADC_SAR_SEQ_SetLimitMask
 798              		.section	.text.ADC_SAR_SEQ_SetSatMask,"ax",%progbits
 799              		.align	2
 800              		.global	ADC_SAR_SEQ_SetSatMask
 801              		.code	16
 802              		.thumb_func
 803              		.type	ADC_SAR_SEQ_SetSatMask, %function
 804              	ADC_SAR_SEQ_SetSatMask:
 805              	.LFB12:
 577:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 578:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetSatMask
 581:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 583:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Sets the channel saturation event mask.
 585:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 586:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  mask: Sets which channels that may cause a
 588:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 589:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  will have no effect. For example, if only 8 channels were enabled,
 590:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 591:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 592:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 593:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 594:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 595:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 596:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetSatMask(uint32 mask)
 597:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 806              		.loc 1 597 0
 807              		.cfi_startproc
 808 0000 80B5     		push	{r7, lr}
 809              		.cfi_def_cfa_offset 8
 810              		.cfi_offset 7, -8
 811              		.cfi_offset 14, -4
 812 0002 82B0     		sub	sp, sp, #8
 813              		.cfi_def_cfa_offset 16
 814 0004 00AF     		add	r7, sp, #0
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
 598:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_SEQ_MAX_CHANNELS_EN_MASK;
 817              		.loc 1 598 0
 818 0008 034B     		ldr	r3, .L56
 819 000a 7A68     		ldr	r2, [r7, #4]
 820 000c 0721     		mov	r1, #7
 821 000e 0A40     		and	r2, r1
 822 0010 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 26


 599:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 823              		.loc 1 599 0
 824 0012 BD46     		mov	sp, r7
 825 0014 02B0     		add	sp, sp, #8
 826              		@ sp needed
 827 0016 80BD     		pop	{r7, pc}
 828              	.L57:
 829              		.align	2
 830              	.L56:
 831 0018 28021A40 		.word	1075446312
 832              		.cfi_endproc
 833              	.LFE12:
 834              		.size	ADC_SAR_SEQ_SetSatMask, .-ADC_SAR_SEQ_SetSatMask
 835              		.section	.text.ADC_SAR_SEQ_SetOffset,"ax",%progbits
 836              		.align	2
 837              		.global	ADC_SAR_SEQ_SetOffset
 838              		.code	16
 839              		.thumb_func
 840              		.type	ADC_SAR_SEQ_SetOffset, %function
 841              	ADC_SAR_SEQ_SetOffset:
 842              	.LFB13:
 600:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 601:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 602:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 603:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetOffset
 604:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 605:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 606:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 607:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   Description: Sets the ADC offset which is used by the functions
 608:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 609:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   to substract the offset from the given reading
 610:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   before calculating the voltage conversion.
 611:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 612:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 613:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: ADC channel number.
 614:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  offset: This value is a measured value when the
 615:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *          inputs are shorted or connected to the same input voltage.
 616:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 617:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 618:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 619:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 620:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
 621:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_Offset:  Modified to set the user provided offset.
 622:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 623:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 624:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetOffset(uint32 chan, int16 offset)
 625:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 843              		.loc 1 625 0
 844              		.cfi_startproc
 845 0000 80B5     		push	{r7, lr}
 846              		.cfi_def_cfa_offset 8
 847              		.cfi_offset 7, -8
 848              		.cfi_offset 14, -4
 849 0002 82B0     		sub	sp, sp, #8
 850              		.cfi_def_cfa_offset 16
 851 0004 00AF     		add	r7, sp, #0
 852              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 27


 853 0006 7860     		str	r0, [r7, #4]
 854 0008 0A1C     		mov	r2, r1
 855 000a BB1C     		add	r3, r7, #2
 856 000c 1A80     		strh	r2, [r3]
 626:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 627:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 857              		.loc 1 627 0
 858 000e 7B68     		ldr	r3, [r7, #4]
 859 0010 022B     		cmp	r3, #2
 860 0012 02D9     		bls	.L59
 861              		.loc 1 627 0 is_stmt 0 discriminator 1
 862 0014 0020     		mov	r0, #0
 863 0016 FFF7FEFF 		bl	CyHalt
 864              	.L59:
 628:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 629:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_offset[chan] = offset;
 865              		.loc 1 629 0 is_stmt 1
 866 001a 044B     		ldr	r3, .L60
 867 001c 7A68     		ldr	r2, [r7, #4]
 868 001e 5200     		lsl	r2, r2, #1
 869 0020 B91C     		add	r1, r7, #2
 870 0022 0988     		ldrh	r1, [r1]
 871 0024 D152     		strh	r1, [r2, r3]
 630:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 872              		.loc 1 630 0
 873 0026 BD46     		mov	sp, r7
 874 0028 02B0     		add	sp, sp, #8
 875              		@ sp needed
 876 002a 80BD     		pop	{r7, pc}
 877              	.L61:
 878              		.align	2
 879              	.L60:
 880 002c 00000000 		.word	ADC_SAR_SEQ_offset
 881              		.cfi_endproc
 882              	.LFE13:
 883              		.size	ADC_SAR_SEQ_SetOffset, .-ADC_SAR_SEQ_SetOffset
 884              		.section	.text.ADC_SAR_SEQ_SetGain,"ax",%progbits
 885              		.align	2
 886              		.global	ADC_SAR_SEQ_SetGain
 887              		.code	16
 888              		.thumb_func
 889              		.type	ADC_SAR_SEQ_SetGain, %function
 890              	ADC_SAR_SEQ_SetGain:
 891              	.LFB14:
 631:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 632:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 633:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** /*******************************************************************************
 634:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Function Name: ADC_SAR_SEQ_SetGain
 635:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** ********************************************************************************
 636:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 637:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Summary:
 638:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 639:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  conversion functions below. This value is set by default by the
 640:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  reference and input range settings. It should only be used to further
 641:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  calibrate the ADC with a known input or if an external reference is
 642:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 643:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 28


 644:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  conversion between ADC counts and voltage.
 645:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 646:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Parameters:
 647:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  chan: ADC channel number.
 648:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  adcGain: ADC gain in counts per 10 volts.
 649:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 650:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 653:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** * Global variables:
 654:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *  ADC_SAR_SEQ_CountsPer10Volt:  modified to set the ADC gain in counts 
 655:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *   per 10 volt.
 656:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *
 657:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** *******************************************************************************/
 658:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** void ADC_SAR_SEQ_SetGain(uint32 chan, int32 adcGain)
 659:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** {
 892              		.loc 1 659 0
 893              		.cfi_startproc
 894 0000 80B5     		push	{r7, lr}
 895              		.cfi_def_cfa_offset 8
 896              		.cfi_offset 7, -8
 897              		.cfi_offset 14, -4
 898 0002 82B0     		sub	sp, sp, #8
 899              		.cfi_def_cfa_offset 16
 900 0004 00AF     		add	r7, sp, #0
 901              		.cfi_def_cfa_register 7
 902 0006 7860     		str	r0, [r7, #4]
 903 0008 3960     		str	r1, [r7]
 660:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 661:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 904              		.loc 1 661 0
 905 000a 7B68     		ldr	r3, [r7, #4]
 906 000c 022B     		cmp	r3, #2
 907 000e 02D9     		bls	.L63
 908              		.loc 1 661 0 is_stmt 0 discriminator 1
 909 0010 0020     		mov	r0, #0
 910 0012 FFF7FEFF 		bl	CyHalt
 911              	.L63:
 662:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 663:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ADC_SAR_SEQ_countsPer10Volt[chan] = adcGain;
 912              		.loc 1 663 0 is_stmt 1
 913 0016 044B     		ldr	r3, .L64
 914 0018 7A68     		ldr	r2, [r7, #4]
 915 001a 9200     		lsl	r2, r2, #2
 916 001c 3968     		ldr	r1, [r7]
 917 001e D150     		str	r1, [r2, r3]
 664:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** }
 918              		.loc 1 664 0
 919 0020 BD46     		mov	sp, r7
 920 0022 02B0     		add	sp, sp, #8
 921              		@ sp needed
 922 0024 80BD     		pop	{r7, pc}
 923              	.L65:
 924 0026 C046     		.align	2
 925              	.L64:
 926 0028 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 927              		.cfi_endproc
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 29


 928              	.LFE14:
 929              		.size	ADC_SAR_SEQ_SetGain, .-ADC_SAR_SEQ_SetGain
 930              		.global	__aeabi_idiv
 931              		.section	.text.ADC_SAR_SEQ_CountsTo_mVolts,"ax",%progbits
 932              		.align	2
 933              		.global	ADC_SAR_SEQ_CountsTo_mVolts
 934              		.code	16
 935              		.thumb_func
 936              		.type	ADC_SAR_SEQ_CountsTo_mVolts, %function
 937              	ADC_SAR_SEQ_CountsTo_mVolts:
 938              	.LFB15:
 665:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 666:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** #if(ADC_SAR_SEQ_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_SEQ__RIGHT)
 668:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 669:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 670:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 671:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_mVolts
 672:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 673:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 674:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 675:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function converts ADC counts to mVolts
 676:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 677:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 678:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 679:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 680:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  adcCounts: Result from the ADC conversion
 681:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 682:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 683:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in mVolts
 684:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 685:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 686:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to mVolts.
 687:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts 
 688:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 689:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 690:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int16 ADC_SAR_SEQ_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 692:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 939              		.loc 1 692 0
 940              		.cfi_startproc
 941 0000 80B5     		push	{r7, lr}
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 7, -8
 944              		.cfi_offset 14, -4
 945 0002 84B0     		sub	sp, sp, #16
 946              		.cfi_def_cfa_offset 24
 947 0004 00AF     		add	r7, sp, #0
 948              		.cfi_def_cfa_register 7
 949 0006 7860     		str	r0, [r7, #4]
 950 0008 0A1C     		mov	r2, r1
 951 000a BB1C     		add	r3, r7, #2
 952 000c 1A80     		strh	r2, [r3]
 693:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         int16 mVolts;
 694:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 695:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 696:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 30


 953              		.loc 1 696 0
 954 000e 7B68     		ldr	r3, [r7, #4]
 955 0010 022B     		cmp	r3, #2
 956 0012 02D9     		bls	.L67
 957              		.loc 1 696 0 is_stmt 0 discriminator 1
 958 0014 0020     		mov	r0, #0
 959 0016 FFF7FEFF 		bl	CyHalt
 960              	.L67:
 697:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 699:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 700:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 701:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 702:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 703:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }    
 704:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 705:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 706:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 707:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 961              		.loc 1 707 0 is_stmt 1
 962 001a 1F4B     		ldr	r3, .L73
 963 001c 7A68     		ldr	r2, [r7, #4]
 964 001e 5200     		lsl	r2, r2, #1
 965 0020 D35A     		ldrh	r3, [r2, r3]
 966 0022 99B2     		uxth	r1, r3
 967 0024 BB1C     		add	r3, r7, #2
 968 0026 1A88     		ldrh	r2, [r3]
 969 0028 8BB2     		uxth	r3, r1
 970 002a D31A     		sub	r3, r2, r3
 971 002c 9AB2     		uxth	r2, r3
 972 002e BB1C     		add	r3, r7, #2
 973 0030 1A80     		strh	r2, [r3]
 708:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 709:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_SEQ_10MV_COUNTS) + ( (adcCounts > 0) ? 
 974              		.loc 1 709 0
 975 0032 BB1C     		add	r3, r7, #2
 976 0034 0022     		mov	r2, #0
 977 0036 9B5E     		ldrsh	r3, [r3, r2]
 978 0038 184A     		ldr	r2, .L73+4
 979 003a 5A43     		mul	r2, r3
 710:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (ADC_SAR_SEQ_countsPer10Volt[chan] / 2) : (-(ADC_SAR_SEQ_countsPer10Volt[chan] / 2
 980              		.loc 1 710 0
 981 003c BB1C     		add	r3, r7, #2
 982 003e 0021     		mov	r1, #0
 983 0040 5B5E     		ldrsh	r3, [r3, r1]
 984 0042 002B     		cmp	r3, #0
 985 0044 08DD     		ble	.L68
 986              		.loc 1 710 0 is_stmt 0 discriminator 1
 987 0046 164B     		ldr	r3, .L73+8
 988 0048 7968     		ldr	r1, [r7, #4]
 989 004a 8900     		lsl	r1, r1, #2
 990 004c CB58     		ldr	r3, [r1, r3]
 991 004e 002B     		cmp	r3, #0
 992 0050 00DA     		bge	.L69
 993 0052 0133     		add	r3, r3, #1
 994              	.L69:
 995 0054 5B10     		asr	r3, r3, #1
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 31


 996 0056 08E0     		b	.L70
 997              	.L68:
 998              		.loc 1 710 0 discriminator 2
 999 0058 114B     		ldr	r3, .L73+8
 1000 005a 7968     		ldr	r1, [r7, #4]
 1001 005c 8900     		lsl	r1, r1, #2
 1002 005e CB58     		ldr	r3, [r1, r3]
 1003 0060 002B     		cmp	r3, #0
 1004 0062 00DA     		bge	.L71
 1005 0064 0133     		add	r3, r3, #1
 1006              	.L71:
 1007 0066 5B10     		asr	r3, r3, #1
 1008 0068 5B42     		neg	r3, r3
 1009              	.L70:
 709:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (ADC_SAR_SEQ_countsPer10Volt[chan] / 2) : (-(ADC_SAR_SEQ_countsPer10Volt[chan] / 2
 1010              		.loc 1 709 0 is_stmt 1
 1011 006a D118     		add	r1, r2, r3
 711:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  / ADC_SAR_SEQ_countsPer10Volt[chan]);
 1012              		.loc 1 711 0
 1013 006c 0C4B     		ldr	r3, .L73+8
 1014 006e 7A68     		ldr	r2, [r7, #4]
 1015 0070 9200     		lsl	r2, r2, #2
 1016 0072 D358     		ldr	r3, [r2, r3]
 1017 0074 081C     		mov	r0, r1
 1018 0076 191C     		mov	r1, r3
 1019 0078 FFF7FEFF 		bl	__aeabi_idiv
 1020 007c 031C     		mov	r3, r0
 1021 007e 1A1C     		mov	r2, r3
 709:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                  (ADC_SAR_SEQ_countsPer10Volt[chan] / 2) : (-(ADC_SAR_SEQ_countsPer10Volt[chan] / 2
 1022              		.loc 1 709 0
 1023 0080 0E23     		mov	r3, #14
 1024 0082 FB18     		add	r3, r7, r3
 1025 0084 1A80     		strh	r2, [r3]
 712:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 713:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( mVolts );
 1026              		.loc 1 713 0
 1027 0086 0E23     		mov	r3, #14
 1028 0088 FB18     		add	r3, r7, r3
 1029 008a 1B88     		ldrh	r3, [r3]
 1030 008c 1BB2     		sxth	r3, r3
 714:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1031              		.loc 1 714 0
 1032 008e 181C     		mov	r0, r3
 1033 0090 BD46     		mov	sp, r7
 1034 0092 04B0     		add	sp, sp, #16
 1035              		@ sp needed
 1036 0094 80BD     		pop	{r7, pc}
 1037              	.L74:
 1038 0096 C046     		.align	2
 1039              	.L73:
 1040 0098 00000000 		.word	ADC_SAR_SEQ_offset
 1041 009c 10270000 		.word	10000
 1042 00a0 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1043              		.cfi_endproc
 1044              	.LFE15:
 1045              		.size	ADC_SAR_SEQ_CountsTo_mVolts, .-ADC_SAR_SEQ_CountsTo_mVolts
 1046              		.global	__aeabi_lmul
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 32


 1047              		.global	__aeabi_ldivmod
 1048              		.section	.text.ADC_SAR_SEQ_CountsTo_uVolts,"ax",%progbits
 1049              		.align	2
 1050              		.global	ADC_SAR_SEQ_CountsTo_uVolts
 1051              		.code	16
 1052              		.thumb_func
 1053              		.type	ADC_SAR_SEQ_CountsTo_uVolts, %function
 1054              	ADC_SAR_SEQ_CountsTo_uVolts:
 1055              	.LFB16:
 715:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 716:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 717:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 718:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_uVolts
 719:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 720:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 721:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 722:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function converts ADC counts to micro Volts
 723:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 724:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 725:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
 726:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 727:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  adcCounts: Result from the ADC conversion
 728:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 729:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 730:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in uVolts
 731:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 732:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 733:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to uVolts.
 734:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts 
 735:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 736:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 737:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Theory: 
 738:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 739:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  number in the conversion to uVolts and at the same time not loose 
 740:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  resolution.
 741:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 742:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  on 10 million and later divide on gain in counts per 10V. 
 743:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 744:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 745:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     int32 ADC_SAR_SEQ_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 746:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 1056              		.loc 1 746 0
 1057              		.cfi_startproc
 1058 0000 B0B5     		push	{r4, r5, r7, lr}
 1059              		.cfi_def_cfa_offset 16
 1060              		.cfi_offset 4, -16
 1061              		.cfi_offset 5, -12
 1062              		.cfi_offset 7, -8
 1063              		.cfi_offset 14, -4
 1064 0002 86B0     		sub	sp, sp, #24
 1065              		.cfi_def_cfa_offset 40
 1066 0004 00AF     		add	r7, sp, #0
 1067              		.cfi_def_cfa_register 7
 1068 0006 F860     		str	r0, [r7, #12]
 1069 0008 0A1C     		mov	r2, r1
 1070 000a 0A23     		mov	r3, #10
 1071 000c FB18     		add	r3, r7, r3
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 33


 1072 000e 1A80     		strh	r2, [r3]
 747:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         int64 uVolts;
 748:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 749:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 750:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1073              		.loc 1 750 0
 1074 0010 FB68     		ldr	r3, [r7, #12]
 1075 0012 022B     		cmp	r3, #2
 1076 0014 02D9     		bls	.L76
 1077              		.loc 1 750 0 is_stmt 0 discriminator 1
 1078 0016 0020     		mov	r0, #0
 1079 0018 FFF7FEFF 		bl	CyHalt
 1080              	.L76:
 751:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 752:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 753:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 754:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 755:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 756:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 757:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }    
 758:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 759:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 760:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 761:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 1081              		.loc 1 761 0 is_stmt 1
 1082 001c 194B     		ldr	r3, .L78
 1083 001e FA68     		ldr	r2, [r7, #12]
 1084 0020 5200     		lsl	r2, r2, #1
 1085 0022 D35A     		ldrh	r3, [r2, r3]
 1086 0024 99B2     		uxth	r1, r3
 1087 0026 0A23     		mov	r3, #10
 1088 0028 FB18     		add	r3, r7, r3
 1089 002a 1A88     		ldrh	r2, [r3]
 1090 002c 8BB2     		uxth	r3, r1
 1091 002e D31A     		sub	r3, r2, r3
 1092 0030 9AB2     		uxth	r2, r3
 1093 0032 0A23     		mov	r3, #10
 1094 0034 FB18     		add	r3, r7, r3
 1095 0036 1A80     		strh	r2, [r3]
 762:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 763:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         uVolts = ((int64)adcCounts * ADC_SAR_SEQ_10UV_COUNTS) / ADC_SAR_SEQ_countsPer10Volt[chan];
 1096              		.loc 1 763 0
 1097 0038 0A23     		mov	r3, #10
 1098 003a FB18     		add	r3, r7, r3
 1099 003c 1B88     		ldrh	r3, [r3]
 1100 003e 1BB2     		sxth	r3, r3
 1101 0040 3B60     		str	r3, [r7]
 1102 0042 DB17     		asr	r3, r3, #31
 1103 0044 7B60     		str	r3, [r7, #4]
 1104 0046 3868     		ldr	r0, [r7]
 1105 0048 7968     		ldr	r1, [r7, #4]
 1106 004a 0F4A     		ldr	r2, .L78+4
 1107 004c 0023     		mov	r3, #0
 1108 004e FFF7FEFF 		bl	__aeabi_lmul
 1109 0052 021C     		mov	r2, r0
 1110 0054 0B1C     		mov	r3, r1
 1111 0056 101C     		mov	r0, r2
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 34


 1112 0058 191C     		mov	r1, r3
 1113 005a 0C4B     		ldr	r3, .L78+8
 1114 005c FA68     		ldr	r2, [r7, #12]
 1115 005e 9200     		lsl	r2, r2, #2
 1116 0060 D358     		ldr	r3, [r2, r3]
 1117 0062 1C1C     		mov	r4, r3
 1118 0064 DB17     		asr	r3, r3, #31
 1119 0066 1D1C     		mov	r5, r3
 1120 0068 221C     		mov	r2, r4
 1121 006a 2B1C     		mov	r3, r5
 1122 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1123 0070 031C     		mov	r3, r0
 1124 0072 0C1C     		mov	r4, r1
 1125 0074 3B61     		str	r3, [r7, #16]
 1126 0076 7C61     		str	r4, [r7, #20]
 764:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 765:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( (int32)uVolts );
 1127              		.loc 1 765 0
 1128 0078 3B69     		ldr	r3, [r7, #16]
 766:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1129              		.loc 1 766 0
 1130 007a 181C     		mov	r0, r3
 1131 007c BD46     		mov	sp, r7
 1132 007e 06B0     		add	sp, sp, #24
 1133              		@ sp needed
 1134 0080 B0BD     		pop	{r4, r5, r7, pc}
 1135              	.L79:
 1136 0082 C046     		.align	2
 1137              	.L78:
 1138 0084 00000000 		.word	ADC_SAR_SEQ_offset
 1139 0088 80969800 		.word	10000000
 1140 008c 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1141              		.cfi_endproc
 1142              	.LFE16:
 1143              		.size	ADC_SAR_SEQ_CountsTo_uVolts, .-ADC_SAR_SEQ_CountsTo_uVolts
 1144              		.global	__aeabi_i2f
 1145              		.global	__aeabi_fmul
 1146              		.global	__aeabi_fdiv
 1147              		.section	.text.ADC_SAR_SEQ_CountsTo_Volts,"ax",%progbits
 1148              		.align	2
 1149              		.global	ADC_SAR_SEQ_CountsTo_Volts
 1150              		.code	16
 1151              		.thumb_func
 1152              		.type	ADC_SAR_SEQ_CountsTo_Volts, %function
 1153              	ADC_SAR_SEQ_CountsTo_Volts:
 1154              	.LFB17:
 767:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 768:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 769:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     /*******************************************************************************
 770:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Function Name: ADC_SAR_SEQ_CountsTo_Volts
 771:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     ********************************************************************************
 772:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 773:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Summary:
 774:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Converts the ADC output to Volts as a floating point number.
 775:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  This function is not available when left data format justification selected.
 776:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 777:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Parameters:
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 35


 778:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  chan: The ADC channel number.
 779:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Result from the ADC conversion
 780:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 781:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Return:
 782:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  Results in Volts
 783:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 784:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     * Global variables:
 785:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_countsPer10Volt:  used to convert ADC counts to Volts.
 786:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *  ADC_SAR_SEQ_Offset:  Used as the offset while converting ADC counts 
 787:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *   to mVolts.
 788:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *
 789:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     float32 ADC_SAR_SEQ_CountsTo_Volts(uint32 chan, int16 adcCounts)
 791:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     {
 1155              		.loc 1 791 0
 1156              		.cfi_startproc
 1157 0000 90B5     		push	{r4, r7, lr}
 1158              		.cfi_def_cfa_offset 12
 1159              		.cfi_offset 4, -12
 1160              		.cfi_offset 7, -8
 1161              		.cfi_offset 14, -4
 1162 0002 85B0     		sub	sp, sp, #20
 1163              		.cfi_def_cfa_offset 32
 1164 0004 00AF     		add	r7, sp, #0
 1165              		.cfi_def_cfa_register 7
 1166 0006 7860     		str	r0, [r7, #4]
 1167 0008 0A1C     		mov	r2, r1
 1168 000a BB1C     		add	r3, r7, #2
 1169 000c 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         float32 volts;
 793:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 794:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 795:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         CYASSERT(chan < ADC_SAR_SEQ_TOTAL_CHANNELS_NUM);
 1170              		.loc 1 795 0
 1171 000e 7B68     		ldr	r3, [r7, #4]
 1172 0010 022B     		cmp	r3, #2
 1173 0012 02D9     		bls	.L81
 1174              		.loc 1 795 0 is_stmt 0 discriminator 1
 1175 0014 0020     		mov	r0, #0
 1176 0016 FFF7FEFF 		bl	CyHalt
 1177              	.L81:
 796:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 797:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 798:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #if(ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE)
 799:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             if((ADC_SAR_SEQ_channelsConfig[chan] & ADC_SAR_SEQ_AVERAGING_EN) != 0u)
 800:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             {
 801:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****                 adcCounts /= ADC_SAR_SEQ_DEFAULT_AVG_SAMPLES_DIV;
 802:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****             }    
 803:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         #endif /* ADC_SAR_SEQ_DEFAULT_AVG_MODE == ADC_SAR_SEQ__ACCUMULATE */
 804:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 805:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         /* Subtract ADC offset */
 806:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         adcCounts -= ADC_SAR_SEQ_offset[chan];
 1178              		.loc 1 806 0 is_stmt 1
 1179 001a 164B     		ldr	r3, .L83
 1180 001c 7A68     		ldr	r2, [r7, #4]
 1181 001e 5200     		lsl	r2, r2, #1
 1182 0020 D35A     		ldrh	r3, [r2, r3]
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 36


 1183 0022 99B2     		uxth	r1, r3
 1184 0024 BB1C     		add	r3, r7, #2
 1185 0026 1A88     		ldrh	r2, [r3]
 1186 0028 8BB2     		uxth	r3, r1
 1187 002a D31A     		sub	r3, r2, r3
 1188 002c 9AB2     		uxth	r2, r3
 1189 002e BB1C     		add	r3, r7, #2
 1190 0030 1A80     		strh	r2, [r3]
 807:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 808:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         volts = ((float32)adcCounts * ADC_SAR_SEQ_10V_COUNTS) / (float32)ADC_SAR_SEQ_countsPer10Vol
 1191              		.loc 1 808 0
 1192 0032 BB1C     		add	r3, r7, #2
 1193 0034 0022     		mov	r2, #0
 1194 0036 9B5E     		ldrsh	r3, [r3, r2]
 1195 0038 181C     		mov	r0, r3
 1196 003a FFF7FEFF 		bl	__aeabi_i2f
 1197 003e 031C     		add	r3, r0, #0
 1198 0040 181C     		add	r0, r3, #0
 1199 0042 0D49     		ldr	r1, .L83+4
 1200 0044 FFF7FEFF 		bl	__aeabi_fmul
 1201 0048 031C     		add	r3, r0, #0
 1202 004a 1C1C     		add	r4, r3, #0
 1203 004c 0B4B     		ldr	r3, .L83+8
 1204 004e 7A68     		ldr	r2, [r7, #4]
 1205 0050 9200     		lsl	r2, r2, #2
 1206 0052 D358     		ldr	r3, [r2, r3]
 1207 0054 181C     		mov	r0, r3
 1208 0056 FFF7FEFF 		bl	__aeabi_i2f
 1209 005a 031C     		add	r3, r0, #0
 1210 005c 201C     		add	r0, r4, #0
 1211 005e 191C     		add	r1, r3, #0
 1212 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1213 0064 031C     		add	r3, r0, #0
 1214 0066 FB60     		str	r3, [r7, #12]
 809:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c **** 
 810:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****         return( volts );
 1215              		.loc 1 810 0
 1216 0068 FB68     		ldr	r3, [r7, #12]
 811:.\Generated_Source\PSoC4/ADC_SAR_SEQ.c ****     }
 1217              		.loc 1 811 0
 1218 006a 181C     		add	r0, r3, #0
 1219 006c BD46     		mov	sp, r7
 1220 006e 05B0     		add	sp, sp, #20
 1221              		@ sp needed
 1222 0070 90BD     		pop	{r4, r7, pc}
 1223              	.L84:
 1224 0072 C046     		.align	2
 1225              	.L83:
 1226 0074 00000000 		.word	ADC_SAR_SEQ_offset
 1227 0078 00002041 		.word	1092616192
 1228 007c 00000000 		.word	ADC_SAR_SEQ_countsPer10Volt
 1229              		.cfi_endproc
 1230              	.LFE17:
 1231              		.size	ADC_SAR_SEQ_CountsTo_Volts, .-ADC_SAR_SEQ_CountsTo_Volts
 1232              		.section	.rodata
 1233              		.align	2
 1234              		.type	ADC_SAR_SEQ_InputsPlacement.4678, %object
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 37


 1235              		.size	ADC_SAR_SEQ_InputsPlacement.4678, 3
 1236              	ADC_SAR_SEQ_InputsPlacement.4678:
 1237 000c 07       		.byte	7
 1238 000d 06       		.byte	6
 1239 000e 12       		.byte	18
 1240 000f 00       		.text
 1241              	.Letext0:
 1242              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1243              		.section	.debug_info,"",%progbits
 1244              	.Ldebug_info0:
 1245 0000 95040000 		.4byte	0x495
 1246 0004 0400     		.2byte	0x4
 1247 0006 00000000 		.4byte	.Ldebug_abbrev0
 1248 000a 04       		.byte	0x4
 1249 000b 01       		.uleb128 0x1
 1250 000c D5000000 		.4byte	.LASF60
 1251 0010 01       		.byte	0x1
 1252 0011 52000000 		.4byte	.LASF61
 1253 0015 BB020000 		.4byte	.LASF62
 1254 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1255 001d 00000000 		.4byte	0
 1256 0021 00000000 		.4byte	.Ldebug_line0
 1257 0025 02       		.uleb128 0x2
 1258 0026 01       		.byte	0x1
 1259 0027 06       		.byte	0x6
 1260 0028 C9000000 		.4byte	.LASF0
 1261 002c 02       		.uleb128 0x2
 1262 002d 01       		.byte	0x1
 1263 002e 08       		.byte	0x8
 1264 002f 5D030000 		.4byte	.LASF1
 1265 0033 02       		.uleb128 0x2
 1266 0034 02       		.byte	0x2
 1267 0035 05       		.byte	0x5
 1268 0036 6B030000 		.4byte	.LASF2
 1269 003a 02       		.uleb128 0x2
 1270 003b 02       		.byte	0x2
 1271 003c 07       		.byte	0x7
 1272 003d 6E020000 		.4byte	.LASF3
 1273 0041 02       		.uleb128 0x2
 1274 0042 04       		.byte	0x4
 1275 0043 05       		.byte	0x5
 1276 0044 B6010000 		.4byte	.LASF4
 1277 0048 02       		.uleb128 0x2
 1278 0049 04       		.byte	0x4
 1279 004a 07       		.byte	0x7
 1280 004b 4C020000 		.4byte	.LASF5
 1281 004f 02       		.uleb128 0x2
 1282 0050 08       		.byte	0x8
 1283 0051 05       		.byte	0x5
 1284 0052 BB000000 		.4byte	.LASF6
 1285 0056 02       		.uleb128 0x2
 1286 0057 08       		.byte	0x8
 1287 0058 07       		.byte	0x7
 1288 0059 79000000 		.4byte	.LASF7
 1289 005d 03       		.uleb128 0x3
 1290 005e 04       		.byte	0x4
 1291 005f 05       		.byte	0x5
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 38


 1292 0060 696E7400 		.ascii	"int\000"
 1293 0064 02       		.uleb128 0x2
 1294 0065 04       		.byte	0x4
 1295 0066 07       		.byte	0x7
 1296 0067 14020000 		.4byte	.LASF8
 1297 006b 04       		.uleb128 0x4
 1298 006c BF010000 		.4byte	.LASF9
 1299 0070 02       		.byte	0x2
 1300 0071 5B       		.byte	0x5b
 1301 0072 2C000000 		.4byte	0x2c
 1302 0076 04       		.uleb128 0x4
 1303 0077 00000000 		.4byte	.LASF10
 1304 007b 02       		.byte	0x2
 1305 007c 5C       		.byte	0x5c
 1306 007d 3A000000 		.4byte	0x3a
 1307 0081 04       		.uleb128 0x4
 1308 0082 00020000 		.4byte	.LASF11
 1309 0086 02       		.byte	0x2
 1310 0087 5D       		.byte	0x5d
 1311 0088 48000000 		.4byte	0x48
 1312 008c 04       		.uleb128 0x4
 1313 008d 55040000 		.4byte	.LASF12
 1314 0091 02       		.byte	0x2
 1315 0092 5F       		.byte	0x5f
 1316 0093 33000000 		.4byte	0x33
 1317 0097 04       		.uleb128 0x4
 1318 0098 B0010000 		.4byte	.LASF13
 1319 009c 02       		.byte	0x2
 1320 009d 60       		.byte	0x60
 1321 009e 41000000 		.4byte	0x41
 1322 00a2 04       		.uleb128 0x4
 1323 00a3 3D020000 		.4byte	.LASF14
 1324 00a7 02       		.byte	0x2
 1325 00a8 61       		.byte	0x61
 1326 00a9 AD000000 		.4byte	0xad
 1327 00ad 02       		.uleb128 0x2
 1328 00ae 04       		.byte	0x4
 1329 00af 04       		.byte	0x4
 1330 00b0 34030000 		.4byte	.LASF15
 1331 00b4 02       		.uleb128 0x2
 1332 00b5 08       		.byte	0x8
 1333 00b6 04       		.byte	0x4
 1334 00b7 DD010000 		.4byte	.LASF16
 1335 00bb 04       		.uleb128 0x4
 1336 00bc 0A030000 		.4byte	.LASF17
 1337 00c0 02       		.byte	0x2
 1338 00c1 66       		.byte	0x66
 1339 00c2 4F000000 		.4byte	0x4f
 1340 00c6 02       		.uleb128 0x2
 1341 00c7 01       		.byte	0x1
 1342 00c8 08       		.byte	0x8
 1343 00c9 07040000 		.4byte	.LASF18
 1344 00cd 04       		.uleb128 0x4
 1345 00ce B5020000 		.4byte	.LASF19
 1346 00d2 02       		.byte	0x2
 1347 00d3 F2       		.byte	0xf2
 1348 00d4 D8000000 		.4byte	0xd8
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 39


 1349 00d8 05       		.uleb128 0x5
 1350 00d9 81000000 		.4byte	0x81
 1351 00dd 02       		.uleb128 0x2
 1352 00de 04       		.byte	0x4
 1353 00df 07       		.byte	0x7
 1354 00e0 E1020000 		.4byte	.LASF20
 1355 00e4 06       		.uleb128 0x6
 1356 00e5 40000000 		.4byte	.LASF25
 1357 00e9 01       		.byte	0x1
 1358 00ea 40       		.byte	0x40
 1359 00eb 00000000 		.4byte	.LFB0
 1360 00ef 24000000 		.4byte	.LFE0-.LFB0
 1361 00f3 01       		.uleb128 0x1
 1362 00f4 9C       		.byte	0x9c
 1363 00f5 07       		.uleb128 0x7
 1364 00f6 5B040000 		.4byte	.LASF36
 1365 00fa 01       		.byte	0x1
 1366 00fb 5F       		.byte	0x5f
 1367 00fc 00000000 		.4byte	.LFB1
 1368 0100 E8010000 		.4byte	.LFE1-.LFB1
 1369 0104 01       		.uleb128 0x1
 1370 0105 9C       		.byte	0x9c
 1371 0106 46010000 		.4byte	0x146
 1372 010a 08       		.uleb128 0x8
 1373 010b CD030000 		.4byte	.LASF21
 1374 010f 01       		.byte	0x1
 1375 0110 61       		.byte	0x61
 1376 0111 81000000 		.4byte	0x81
 1377 0115 02       		.uleb128 0x2
 1378 0116 91       		.byte	0x91
 1379 0117 74       		.sleb128 -12
 1380 0118 08       		.uleb128 0x8
 1381 0119 64020000 		.4byte	.LASF22
 1382 011d 01       		.byte	0x1
 1383 011e 62       		.byte	0x62
 1384 011f 81000000 		.4byte	0x81
 1385 0123 02       		.uleb128 0x2
 1386 0124 91       		.byte	0x91
 1387 0125 6C       		.sleb128 -20
 1388 0126 08       		.uleb128 0x8
 1389 0127 0F000000 		.4byte	.LASF23
 1390 012b 01       		.byte	0x1
 1391 012c 63       		.byte	0x63
 1392 012d 97000000 		.4byte	0x97
 1393 0131 02       		.uleb128 0x2
 1394 0132 91       		.byte	0x91
 1395 0133 70       		.sleb128 -16
 1396 0134 08       		.uleb128 0x8
 1397 0135 E4010000 		.4byte	.LASF24
 1398 0139 01       		.byte	0x1
 1399 013a 66       		.byte	0x66
 1400 013b 56010000 		.4byte	0x156
 1401 013f 05       		.uleb128 0x5
 1402 0140 03       		.byte	0x3
 1403 0141 0C000000 		.4byte	ADC_SAR_SEQ_InputsPlacement.4678
 1404 0145 00       		.byte	0
 1405 0146 09       		.uleb128 0x9
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 40


 1406 0147 6B000000 		.4byte	0x6b
 1407 014b 56010000 		.4byte	0x156
 1408 014f 0A       		.uleb128 0xa
 1409 0150 DD000000 		.4byte	0xdd
 1410 0154 02       		.byte	0x2
 1411 0155 00       		.byte	0
 1412 0156 0B       		.uleb128 0xb
 1413 0157 46010000 		.4byte	0x146
 1414 015b 0C       		.uleb128 0xc
 1415 015c 21030000 		.4byte	.LASF26
 1416 0160 01       		.byte	0x1
 1417 0161 1501     		.2byte	0x115
 1418 0163 00000000 		.4byte	.LFB2
 1419 0167 20000000 		.4byte	.LFE2-.LFB2
 1420 016b 01       		.uleb128 0x1
 1421 016c 9C       		.byte	0x9c
 1422 016d 0D       		.uleb128 0xd
 1423 016e 10030000 		.4byte	.LASF27
 1424 0172 01       		.byte	0x1
 1425 0173 2C01     		.2byte	0x12c
 1426 0175 00000000 		.4byte	.LFB3
 1427 0179 18000000 		.4byte	.LFE3-.LFB3
 1428 017d 01       		.uleb128 0x1
 1429 017e 9C       		.byte	0x9c
 1430 017f 0D       		.uleb128 0xd
 1431 0180 B4030000 		.4byte	.LASF28
 1432 0184 01       		.byte	0x1
 1433 0185 4601     		.2byte	0x146
 1434 0187 00000000 		.4byte	.LFB4
 1435 018b 1C000000 		.4byte	.LFE4-.LFB4
 1436 018f 01       		.uleb128 0x1
 1437 0190 9C       		.byte	0x9c
 1438 0191 0D       		.uleb128 0xd
 1439 0192 C5010000 		.4byte	.LASF29
 1440 0196 01       		.byte	0x1
 1441 0197 5F01     		.2byte	0x15f
 1442 0199 00000000 		.4byte	.LFB5
 1443 019d 1C000000 		.4byte	.LFE5-.LFB5
 1444 01a1 01       		.uleb128 0x1
 1445 01a2 9C       		.byte	0x9c
 1446 01a3 0E       		.uleb128 0xe
 1447 01a4 75030000 		.4byte	.LASF31
 1448 01a8 01       		.byte	0x1
 1449 01a9 8101     		.2byte	0x181
 1450 01ab 81000000 		.4byte	0x81
 1451 01af 00000000 		.4byte	.LFB6
 1452 01b3 48000000 		.4byte	.LFE6-.LFB6
 1453 01b7 01       		.uleb128 0x1
 1454 01b8 9C       		.byte	0x9c
 1455 01b9 DC010000 		.4byte	0x1dc
 1456 01bd 0F       		.uleb128 0xf
 1457 01be 0C020000 		.4byte	.LASF33
 1458 01c2 01       		.byte	0x1
 1459 01c3 8101     		.2byte	0x181
 1460 01c5 81000000 		.4byte	0x81
 1461 01c9 02       		.uleb128 0x2
 1462 01ca 91       		.byte	0x91
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 41


 1463 01cb 6C       		.sleb128 -20
 1464 01cc 10       		.uleb128 0x10
 1465 01cd 4E040000 		.4byte	.LASF30
 1466 01d1 01       		.byte	0x1
 1467 01d2 8301     		.2byte	0x183
 1468 01d4 81000000 		.4byte	0x81
 1469 01d8 02       		.uleb128 0x2
 1470 01d9 91       		.byte	0x91
 1471 01da 74       		.sleb128 -12
 1472 01db 00       		.byte	0
 1473 01dc 11       		.uleb128 0x11
 1474 01dd 0C040000 		.4byte	.LASF32
 1475 01e1 01       		.byte	0x1
 1476 01e2 B701     		.2byte	0x1b7
 1477 01e4 8C000000 		.4byte	0x8c
 1478 01e8 00000000 		.4byte	.LFB7
 1479 01ec 44000000 		.4byte	.LFE7-.LFB7
 1480 01f0 01       		.uleb128 0x1
 1481 01f1 9C       		.byte	0x9c
 1482 01f2 15020000 		.4byte	0x215
 1483 01f6 0F       		.uleb128 0xf
 1484 01f7 02040000 		.4byte	.LASF34
 1485 01fb 01       		.byte	0x1
 1486 01fc B701     		.2byte	0x1b7
 1487 01fe 81000000 		.4byte	0x81
 1488 0202 02       		.uleb128 0x2
 1489 0203 91       		.byte	0x91
 1490 0204 6C       		.sleb128 -20
 1491 0205 10       		.uleb128 0x10
 1492 0206 6C040000 		.4byte	.LASF35
 1493 020a 01       		.byte	0x1
 1494 020b B901     		.2byte	0x1b9
 1495 020d 81000000 		.4byte	0x81
 1496 0211 02       		.uleb128 0x2
 1497 0212 91       		.byte	0x91
 1498 0213 74       		.sleb128 -12
 1499 0214 00       		.byte	0
 1500 0215 12       		.uleb128 0x12
 1501 0216 A3000000 		.4byte	.LASF37
 1502 021a 01       		.byte	0x1
 1503 021b E401     		.2byte	0x1e4
 1504 021d 00000000 		.4byte	.LFB8
 1505 0221 1C000000 		.4byte	.LFE8-.LFB8
 1506 0225 01       		.uleb128 0x1
 1507 0226 9C       		.byte	0x9c
 1508 0227 3B020000 		.4byte	0x23b
 1509 022b 0F       		.uleb128 0xf
 1510 022c 07020000 		.4byte	.LASF38
 1511 0230 01       		.byte	0x1
 1512 0231 E401     		.2byte	0x1e4
 1513 0233 81000000 		.4byte	0x81
 1514 0237 02       		.uleb128 0x2
 1515 0238 91       		.byte	0x91
 1516 0239 74       		.sleb128 -12
 1517 023a 00       		.byte	0
 1518 023b 12       		.uleb128 0x12
 1519 023c 9D020000 		.4byte	.LASF39
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 42


 1520 0240 01       		.byte	0x1
 1521 0241 1002     		.2byte	0x210
 1522 0243 00000000 		.4byte	.LFB9
 1523 0247 30000000 		.4byte	.LFE9-.LFB9
 1524 024b 01       		.uleb128 0x1
 1525 024c 9C       		.byte	0x9c
 1526 024d 61020000 		.4byte	0x261
 1527 0251 0F       		.uleb128 0xf
 1528 0252 EA020000 		.4byte	.LASF40
 1529 0256 01       		.byte	0x1
 1530 0257 1002     		.2byte	0x210
 1531 0259 81000000 		.4byte	0x81
 1532 025d 02       		.uleb128 0x2
 1533 025e 91       		.byte	0x91
 1534 025f 74       		.sleb128 -12
 1535 0260 00       		.byte	0
 1536 0261 12       		.uleb128 0x12
 1537 0262 2B040000 		.4byte	.LASF41
 1538 0266 01       		.byte	0x1
 1539 0267 2502     		.2byte	0x225
 1540 0269 00000000 		.4byte	.LFB10
 1541 026d 2C000000 		.4byte	.LFE10-.LFB10
 1542 0271 01       		.uleb128 0x1
 1543 0272 9C       		.byte	0x9c
 1544 0273 87020000 		.4byte	0x287
 1545 0277 0F       		.uleb128 0xf
 1546 0278 3A030000 		.4byte	.LASF42
 1547 027c 01       		.byte	0x1
 1548 027d 2502     		.2byte	0x225
 1549 027f 81000000 		.4byte	0x81
 1550 0283 02       		.uleb128 0x2
 1551 0284 91       		.byte	0x91
 1552 0285 74       		.sleb128 -12
 1553 0286 00       		.byte	0
 1554 0287 12       		.uleb128 0x12
 1555 0288 44030000 		.4byte	.LASF43
 1556 028c 01       		.byte	0x1
 1557 028d 3D02     		.2byte	0x23d
 1558 028f 00000000 		.4byte	.LFB11
 1559 0293 1C000000 		.4byte	.LFE11-.LFB11
 1560 0297 01       		.uleb128 0x1
 1561 0298 9C       		.byte	0x9c
 1562 0299 AD020000 		.4byte	0x2ad
 1563 029d 0F       		.uleb128 0xf
 1564 029e 07020000 		.4byte	.LASF38
 1565 02a2 01       		.byte	0x1
 1566 02a3 3D02     		.2byte	0x23d
 1567 02a5 81000000 		.4byte	0x81
 1568 02a9 02       		.uleb128 0x2
 1569 02aa 91       		.byte	0x91
 1570 02ab 74       		.sleb128 -12
 1571 02ac 00       		.byte	0
 1572 02ad 12       		.uleb128 0x12
 1573 02ae F3020000 		.4byte	.LASF44
 1574 02b2 01       		.byte	0x1
 1575 02b3 5402     		.2byte	0x254
 1576 02b5 00000000 		.4byte	.LFB12
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 43


 1577 02b9 1C000000 		.4byte	.LFE12-.LFB12
 1578 02bd 01       		.uleb128 0x1
 1579 02be 9C       		.byte	0x9c
 1580 02bf D3020000 		.4byte	0x2d3
 1581 02c3 0F       		.uleb128 0xf
 1582 02c4 07020000 		.4byte	.LASF38
 1583 02c8 01       		.byte	0x1
 1584 02c9 5402     		.2byte	0x254
 1585 02cb 81000000 		.4byte	0x81
 1586 02cf 02       		.uleb128 0x2
 1587 02d0 91       		.byte	0x91
 1588 02d1 74       		.sleb128 -12
 1589 02d2 00       		.byte	0
 1590 02d3 13       		.uleb128 0x13
 1591 02d4 2A000000 		.4byte	.LASF45
 1592 02d8 01       		.byte	0x1
 1593 02d9 7002     		.2byte	0x270
 1594 02db 00000000 		.4byte	.LFB13
 1595 02df 30000000 		.4byte	.LFE13-.LFB13
 1596 02e3 01       		.uleb128 0x1
 1597 02e4 9C       		.byte	0x9c
 1598 02e5 08030000 		.4byte	0x308
 1599 02e9 0F       		.uleb128 0xf
 1600 02ea 02040000 		.4byte	.LASF34
 1601 02ee 01       		.byte	0x1
 1602 02ef 7002     		.2byte	0x270
 1603 02f1 81000000 		.4byte	0x81
 1604 02f5 02       		.uleb128 0x2
 1605 02f6 91       		.byte	0x91
 1606 02f7 74       		.sleb128 -12
 1607 02f8 0F       		.uleb128 0xf
 1608 02f9 24040000 		.4byte	.LASF46
 1609 02fd 01       		.byte	0x1
 1610 02fe 7002     		.2byte	0x270
 1611 0300 8C000000 		.4byte	0x8c
 1612 0304 02       		.uleb128 0x2
 1613 0305 91       		.byte	0x91
 1614 0306 72       		.sleb128 -14
 1615 0307 00       		.byte	0
 1616 0308 13       		.uleb128 0x13
 1617 0309 16000000 		.4byte	.LASF47
 1618 030d 01       		.byte	0x1
 1619 030e 9202     		.2byte	0x292
 1620 0310 00000000 		.4byte	.LFB14
 1621 0314 2C000000 		.4byte	.LFE14-.LFB14
 1622 0318 01       		.uleb128 0x1
 1623 0319 9C       		.byte	0x9c
 1624 031a 3D030000 		.4byte	0x33d
 1625 031e 0F       		.uleb128 0xf
 1626 031f 02040000 		.4byte	.LASF34
 1627 0323 01       		.byte	0x1
 1628 0324 9202     		.2byte	0x292
 1629 0326 81000000 		.4byte	0x81
 1630 032a 02       		.uleb128 0x2
 1631 032b 91       		.byte	0x91
 1632 032c 74       		.sleb128 -12
 1633 032d 0F       		.uleb128 0xf
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 44


 1634 032e 07000000 		.4byte	.LASF48
 1635 0332 01       		.byte	0x1
 1636 0333 9202     		.2byte	0x292
 1637 0335 97000000 		.4byte	0x97
 1638 0339 02       		.uleb128 0x2
 1639 033a 91       		.byte	0x91
 1640 033b 70       		.sleb128 -16
 1641 033c 00       		.byte	0
 1642 033d 11       		.uleb128 0x11
 1643 033e 81020000 		.4byte	.LASF49
 1644 0342 01       		.byte	0x1
 1645 0343 B302     		.2byte	0x2b3
 1646 0345 8C000000 		.4byte	0x8c
 1647 0349 00000000 		.4byte	.LFB15
 1648 034d A4000000 		.4byte	.LFE15-.LFB15
 1649 0351 01       		.uleb128 0x1
 1650 0352 9C       		.byte	0x9c
 1651 0353 85030000 		.4byte	0x385
 1652 0357 0F       		.uleb128 0xf
 1653 0358 02040000 		.4byte	.LASF34
 1654 035c 01       		.byte	0x1
 1655 035d B302     		.2byte	0x2b3
 1656 035f 81000000 		.4byte	0x81
 1657 0363 02       		.uleb128 0x2
 1658 0364 91       		.byte	0x91
 1659 0365 6C       		.sleb128 -20
 1660 0366 0F       		.uleb128 0xf
 1661 0367 44040000 		.4byte	.LASF50
 1662 036b 01       		.byte	0x1
 1663 036c B302     		.2byte	0x2b3
 1664 036e 8C000000 		.4byte	0x8c
 1665 0372 02       		.uleb128 0x2
 1666 0373 91       		.byte	0x91
 1667 0374 6A       		.sleb128 -22
 1668 0375 10       		.uleb128 0x10
 1669 0376 91030000 		.4byte	.LASF51
 1670 037a 01       		.byte	0x1
 1671 037b B502     		.2byte	0x2b5
 1672 037d 8C000000 		.4byte	0x8c
 1673 0381 02       		.uleb128 0x2
 1674 0382 91       		.byte	0x91
 1675 0383 76       		.sleb128 -10
 1676 0384 00       		.byte	0
 1677 0385 11       		.uleb128 0x11
 1678 0386 21020000 		.4byte	.LASF52
 1679 038a 01       		.byte	0x1
 1680 038b E902     		.2byte	0x2e9
 1681 038d 97000000 		.4byte	0x97
 1682 0391 00000000 		.4byte	.LFB16
 1683 0395 90000000 		.4byte	.LFE16-.LFB16
 1684 0399 01       		.uleb128 0x1
 1685 039a 9C       		.byte	0x9c
 1686 039b CD030000 		.4byte	0x3cd
 1687 039f 0F       		.uleb128 0xf
 1688 03a0 02040000 		.4byte	.LASF34
 1689 03a4 01       		.byte	0x1
 1690 03a5 E902     		.2byte	0x2e9
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 45


 1691 03a7 81000000 		.4byte	0x81
 1692 03ab 02       		.uleb128 0x2
 1693 03ac 91       		.byte	0x91
 1694 03ad 64       		.sleb128 -28
 1695 03ae 0F       		.uleb128 0xf
 1696 03af 44040000 		.4byte	.LASF50
 1697 03b3 01       		.byte	0x1
 1698 03b4 E902     		.2byte	0x2e9
 1699 03b6 8C000000 		.4byte	0x8c
 1700 03ba 02       		.uleb128 0x2
 1701 03bb 91       		.byte	0x91
 1702 03bc 62       		.sleb128 -30
 1703 03bd 10       		.uleb128 0x10
 1704 03be 45020000 		.4byte	.LASF53
 1705 03c2 01       		.byte	0x1
 1706 03c3 EB02     		.2byte	0x2eb
 1707 03c5 BB000000 		.4byte	0xbb
 1708 03c9 02       		.uleb128 0x2
 1709 03ca 91       		.byte	0x91
 1710 03cb 68       		.sleb128 -24
 1711 03cc 00       		.byte	0
 1712 03cd 11       		.uleb128 0x11
 1713 03ce 73040000 		.4byte	.LASF54
 1714 03d2 01       		.byte	0x1
 1715 03d3 1603     		.2byte	0x316
 1716 03d5 A2000000 		.4byte	0xa2
 1717 03d9 00000000 		.4byte	.LFB17
 1718 03dd 80000000 		.4byte	.LFE17-.LFB17
 1719 03e1 01       		.uleb128 0x1
 1720 03e2 9C       		.byte	0x9c
 1721 03e3 15040000 		.4byte	0x415
 1722 03e7 0F       		.uleb128 0xf
 1723 03e8 02040000 		.4byte	.LASF34
 1724 03ec 01       		.byte	0x1
 1725 03ed 1603     		.2byte	0x316
 1726 03ef 81000000 		.4byte	0x81
 1727 03f3 02       		.uleb128 0x2
 1728 03f4 91       		.byte	0x91
 1729 03f5 64       		.sleb128 -28
 1730 03f6 0F       		.uleb128 0xf
 1731 03f7 44040000 		.4byte	.LASF50
 1732 03fb 01       		.byte	0x1
 1733 03fc 1603     		.2byte	0x316
 1734 03fe 8C000000 		.4byte	0x8c
 1735 0402 02       		.uleb128 0x2
 1736 0403 91       		.byte	0x91
 1737 0404 62       		.sleb128 -30
 1738 0405 10       		.uleb128 0x10
 1739 0406 5E020000 		.4byte	.LASF55
 1740 040a 01       		.byte	0x1
 1741 040b 1803     		.2byte	0x318
 1742 040d A2000000 		.4byte	0xa2
 1743 0411 02       		.uleb128 0x2
 1744 0412 91       		.byte	0x91
 1745 0413 6C       		.sleb128 -20
 1746 0414 00       		.byte	0
 1747 0415 09       		.uleb128 0x9
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 46


 1748 0416 81000000 		.4byte	0x81
 1749 041a 25040000 		.4byte	0x425
 1750 041e 0A       		.uleb128 0xa
 1751 041f DD000000 		.4byte	0xdd
 1752 0423 02       		.byte	0x2
 1753 0424 00       		.byte	0
 1754 0425 08       		.uleb128 0x8
 1755 0426 D3030000 		.4byte	.LASF56
 1756 042a 01       		.byte	0x1
 1757 042b 22       		.byte	0x22
 1758 042c 36040000 		.4byte	0x436
 1759 0430 05       		.uleb128 0x5
 1760 0431 03       		.byte	0x3
 1761 0432 00000000 		.4byte	ADC_SAR_SEQ_channelsConfig
 1762 0436 0B       		.uleb128 0xb
 1763 0437 15040000 		.4byte	0x415
 1764 043b 14       		.uleb128 0x14
 1765 043c EE030000 		.4byte	.LASF57
 1766 0440 01       		.byte	0x1
 1767 0441 19       		.byte	0x19
 1768 0442 6B000000 		.4byte	0x6b
 1769 0446 05       		.uleb128 0x5
 1770 0447 03       		.byte	0x3
 1771 0448 00000000 		.4byte	ADC_SAR_SEQ_initVar
 1772 044c 09       		.uleb128 0x9
 1773 044d 8C000000 		.4byte	0x8c
 1774 0451 5C040000 		.4byte	0x45c
 1775 0455 0A       		.uleb128 0xa
 1776 0456 DD000000 		.4byte	0xdd
 1777 045a 02       		.byte	0x2
 1778 045b 00       		.byte	0
 1779 045c 14       		.uleb128 0x14
 1780 045d 90000000 		.4byte	.LASF58
 1781 0461 01       		.byte	0x1
 1782 0462 1A       		.byte	0x1a
 1783 0463 6D040000 		.4byte	0x46d
 1784 0467 05       		.uleb128 0x5
 1785 0468 03       		.byte	0x3
 1786 0469 00000000 		.4byte	ADC_SAR_SEQ_offset
 1787 046d 05       		.uleb128 0x5
 1788 046e 4C040000 		.4byte	0x44c
 1789 0472 09       		.uleb128 0x9
 1790 0473 97000000 		.4byte	0x97
 1791 0477 82040000 		.4byte	0x482
 1792 047b 0A       		.uleb128 0xa
 1793 047c DD000000 		.4byte	0xdd
 1794 0480 02       		.byte	0x2
 1795 0481 00       		.byte	0
 1796 0482 14       		.uleb128 0x14
 1797 0483 98030000 		.4byte	.LASF59
 1798 0487 01       		.byte	0x1
 1799 0488 1B       		.byte	0x1b
 1800 0489 93040000 		.4byte	0x493
 1801 048d 05       		.uleb128 0x5
 1802 048e 03       		.byte	0x3
 1803 048f 00000000 		.4byte	ADC_SAR_SEQ_countsPer10Volt
 1804 0493 05       		.uleb128 0x5
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 47


 1805 0494 72040000 		.4byte	0x472
 1806 0498 00       		.byte	0
 1807              		.section	.debug_abbrev,"",%progbits
 1808              	.Ldebug_abbrev0:
 1809 0000 01       		.uleb128 0x1
 1810 0001 11       		.uleb128 0x11
 1811 0002 01       		.byte	0x1
 1812 0003 25       		.uleb128 0x25
 1813 0004 0E       		.uleb128 0xe
 1814 0005 13       		.uleb128 0x13
 1815 0006 0B       		.uleb128 0xb
 1816 0007 03       		.uleb128 0x3
 1817 0008 0E       		.uleb128 0xe
 1818 0009 1B       		.uleb128 0x1b
 1819 000a 0E       		.uleb128 0xe
 1820 000b 55       		.uleb128 0x55
 1821 000c 17       		.uleb128 0x17
 1822 000d 11       		.uleb128 0x11
 1823 000e 01       		.uleb128 0x1
 1824 000f 10       		.uleb128 0x10
 1825 0010 17       		.uleb128 0x17
 1826 0011 00       		.byte	0
 1827 0012 00       		.byte	0
 1828 0013 02       		.uleb128 0x2
 1829 0014 24       		.uleb128 0x24
 1830 0015 00       		.byte	0
 1831 0016 0B       		.uleb128 0xb
 1832 0017 0B       		.uleb128 0xb
 1833 0018 3E       		.uleb128 0x3e
 1834 0019 0B       		.uleb128 0xb
 1835 001a 03       		.uleb128 0x3
 1836 001b 0E       		.uleb128 0xe
 1837 001c 00       		.byte	0
 1838 001d 00       		.byte	0
 1839 001e 03       		.uleb128 0x3
 1840 001f 24       		.uleb128 0x24
 1841 0020 00       		.byte	0
 1842 0021 0B       		.uleb128 0xb
 1843 0022 0B       		.uleb128 0xb
 1844 0023 3E       		.uleb128 0x3e
 1845 0024 0B       		.uleb128 0xb
 1846 0025 03       		.uleb128 0x3
 1847 0026 08       		.uleb128 0x8
 1848 0027 00       		.byte	0
 1849 0028 00       		.byte	0
 1850 0029 04       		.uleb128 0x4
 1851 002a 16       		.uleb128 0x16
 1852 002b 00       		.byte	0
 1853 002c 03       		.uleb128 0x3
 1854 002d 0E       		.uleb128 0xe
 1855 002e 3A       		.uleb128 0x3a
 1856 002f 0B       		.uleb128 0xb
 1857 0030 3B       		.uleb128 0x3b
 1858 0031 0B       		.uleb128 0xb
 1859 0032 49       		.uleb128 0x49
 1860 0033 13       		.uleb128 0x13
 1861 0034 00       		.byte	0
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 48


 1862 0035 00       		.byte	0
 1863 0036 05       		.uleb128 0x5
 1864 0037 35       		.uleb128 0x35
 1865 0038 00       		.byte	0
 1866 0039 49       		.uleb128 0x49
 1867 003a 13       		.uleb128 0x13
 1868 003b 00       		.byte	0
 1869 003c 00       		.byte	0
 1870 003d 06       		.uleb128 0x6
 1871 003e 2E       		.uleb128 0x2e
 1872 003f 00       		.byte	0
 1873 0040 3F       		.uleb128 0x3f
 1874 0041 19       		.uleb128 0x19
 1875 0042 03       		.uleb128 0x3
 1876 0043 0E       		.uleb128 0xe
 1877 0044 3A       		.uleb128 0x3a
 1878 0045 0B       		.uleb128 0xb
 1879 0046 3B       		.uleb128 0x3b
 1880 0047 0B       		.uleb128 0xb
 1881 0048 27       		.uleb128 0x27
 1882 0049 19       		.uleb128 0x19
 1883 004a 11       		.uleb128 0x11
 1884 004b 01       		.uleb128 0x1
 1885 004c 12       		.uleb128 0x12
 1886 004d 06       		.uleb128 0x6
 1887 004e 40       		.uleb128 0x40
 1888 004f 18       		.uleb128 0x18
 1889 0050 9642     		.uleb128 0x2116
 1890 0052 19       		.uleb128 0x19
 1891 0053 00       		.byte	0
 1892 0054 00       		.byte	0
 1893 0055 07       		.uleb128 0x7
 1894 0056 2E       		.uleb128 0x2e
 1895 0057 01       		.byte	0x1
 1896 0058 3F       		.uleb128 0x3f
 1897 0059 19       		.uleb128 0x19
 1898 005a 03       		.uleb128 0x3
 1899 005b 0E       		.uleb128 0xe
 1900 005c 3A       		.uleb128 0x3a
 1901 005d 0B       		.uleb128 0xb
 1902 005e 3B       		.uleb128 0x3b
 1903 005f 0B       		.uleb128 0xb
 1904 0060 27       		.uleb128 0x27
 1905 0061 19       		.uleb128 0x19
 1906 0062 11       		.uleb128 0x11
 1907 0063 01       		.uleb128 0x1
 1908 0064 12       		.uleb128 0x12
 1909 0065 06       		.uleb128 0x6
 1910 0066 40       		.uleb128 0x40
 1911 0067 18       		.uleb128 0x18
 1912 0068 9642     		.uleb128 0x2116
 1913 006a 19       		.uleb128 0x19
 1914 006b 01       		.uleb128 0x1
 1915 006c 13       		.uleb128 0x13
 1916 006d 00       		.byte	0
 1917 006e 00       		.byte	0
 1918 006f 08       		.uleb128 0x8
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 49


 1919 0070 34       		.uleb128 0x34
 1920 0071 00       		.byte	0
 1921 0072 03       		.uleb128 0x3
 1922 0073 0E       		.uleb128 0xe
 1923 0074 3A       		.uleb128 0x3a
 1924 0075 0B       		.uleb128 0xb
 1925 0076 3B       		.uleb128 0x3b
 1926 0077 0B       		.uleb128 0xb
 1927 0078 49       		.uleb128 0x49
 1928 0079 13       		.uleb128 0x13
 1929 007a 02       		.uleb128 0x2
 1930 007b 18       		.uleb128 0x18
 1931 007c 00       		.byte	0
 1932 007d 00       		.byte	0
 1933 007e 09       		.uleb128 0x9
 1934 007f 01       		.uleb128 0x1
 1935 0080 01       		.byte	0x1
 1936 0081 49       		.uleb128 0x49
 1937 0082 13       		.uleb128 0x13
 1938 0083 01       		.uleb128 0x1
 1939 0084 13       		.uleb128 0x13
 1940 0085 00       		.byte	0
 1941 0086 00       		.byte	0
 1942 0087 0A       		.uleb128 0xa
 1943 0088 21       		.uleb128 0x21
 1944 0089 00       		.byte	0
 1945 008a 49       		.uleb128 0x49
 1946 008b 13       		.uleb128 0x13
 1947 008c 2F       		.uleb128 0x2f
 1948 008d 0B       		.uleb128 0xb
 1949 008e 00       		.byte	0
 1950 008f 00       		.byte	0
 1951 0090 0B       		.uleb128 0xb
 1952 0091 26       		.uleb128 0x26
 1953 0092 00       		.byte	0
 1954 0093 49       		.uleb128 0x49
 1955 0094 13       		.uleb128 0x13
 1956 0095 00       		.byte	0
 1957 0096 00       		.byte	0
 1958 0097 0C       		.uleb128 0xc
 1959 0098 2E       		.uleb128 0x2e
 1960 0099 00       		.byte	0
 1961 009a 3F       		.uleb128 0x3f
 1962 009b 19       		.uleb128 0x19
 1963 009c 03       		.uleb128 0x3
 1964 009d 0E       		.uleb128 0xe
 1965 009e 3A       		.uleb128 0x3a
 1966 009f 0B       		.uleb128 0xb
 1967 00a0 3B       		.uleb128 0x3b
 1968 00a1 05       		.uleb128 0x5
 1969 00a2 27       		.uleb128 0x27
 1970 00a3 19       		.uleb128 0x19
 1971 00a4 11       		.uleb128 0x11
 1972 00a5 01       		.uleb128 0x1
 1973 00a6 12       		.uleb128 0x12
 1974 00a7 06       		.uleb128 0x6
 1975 00a8 40       		.uleb128 0x40
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 50


 1976 00a9 18       		.uleb128 0x18
 1977 00aa 9642     		.uleb128 0x2116
 1978 00ac 19       		.uleb128 0x19
 1979 00ad 00       		.byte	0
 1980 00ae 00       		.byte	0
 1981 00af 0D       		.uleb128 0xd
 1982 00b0 2E       		.uleb128 0x2e
 1983 00b1 00       		.byte	0
 1984 00b2 3F       		.uleb128 0x3f
 1985 00b3 19       		.uleb128 0x19
 1986 00b4 03       		.uleb128 0x3
 1987 00b5 0E       		.uleb128 0xe
 1988 00b6 3A       		.uleb128 0x3a
 1989 00b7 0B       		.uleb128 0xb
 1990 00b8 3B       		.uleb128 0x3b
 1991 00b9 05       		.uleb128 0x5
 1992 00ba 27       		.uleb128 0x27
 1993 00bb 19       		.uleb128 0x19
 1994 00bc 11       		.uleb128 0x11
 1995 00bd 01       		.uleb128 0x1
 1996 00be 12       		.uleb128 0x12
 1997 00bf 06       		.uleb128 0x6
 1998 00c0 40       		.uleb128 0x40
 1999 00c1 18       		.uleb128 0x18
 2000 00c2 9742     		.uleb128 0x2117
 2001 00c4 19       		.uleb128 0x19
 2002 00c5 00       		.byte	0
 2003 00c6 00       		.byte	0
 2004 00c7 0E       		.uleb128 0xe
 2005 00c8 2E       		.uleb128 0x2e
 2006 00c9 01       		.byte	0x1
 2007 00ca 3F       		.uleb128 0x3f
 2008 00cb 19       		.uleb128 0x19
 2009 00cc 03       		.uleb128 0x3
 2010 00cd 0E       		.uleb128 0xe
 2011 00ce 3A       		.uleb128 0x3a
 2012 00cf 0B       		.uleb128 0xb
 2013 00d0 3B       		.uleb128 0x3b
 2014 00d1 05       		.uleb128 0x5
 2015 00d2 27       		.uleb128 0x27
 2016 00d3 19       		.uleb128 0x19
 2017 00d4 49       		.uleb128 0x49
 2018 00d5 13       		.uleb128 0x13
 2019 00d6 11       		.uleb128 0x11
 2020 00d7 01       		.uleb128 0x1
 2021 00d8 12       		.uleb128 0x12
 2022 00d9 06       		.uleb128 0x6
 2023 00da 40       		.uleb128 0x40
 2024 00db 18       		.uleb128 0x18
 2025 00dc 9742     		.uleb128 0x2117
 2026 00de 19       		.uleb128 0x19
 2027 00df 01       		.uleb128 0x1
 2028 00e0 13       		.uleb128 0x13
 2029 00e1 00       		.byte	0
 2030 00e2 00       		.byte	0
 2031 00e3 0F       		.uleb128 0xf
 2032 00e4 05       		.uleb128 0x5
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 51


 2033 00e5 00       		.byte	0
 2034 00e6 03       		.uleb128 0x3
 2035 00e7 0E       		.uleb128 0xe
 2036 00e8 3A       		.uleb128 0x3a
 2037 00e9 0B       		.uleb128 0xb
 2038 00ea 3B       		.uleb128 0x3b
 2039 00eb 05       		.uleb128 0x5
 2040 00ec 49       		.uleb128 0x49
 2041 00ed 13       		.uleb128 0x13
 2042 00ee 02       		.uleb128 0x2
 2043 00ef 18       		.uleb128 0x18
 2044 00f0 00       		.byte	0
 2045 00f1 00       		.byte	0
 2046 00f2 10       		.uleb128 0x10
 2047 00f3 34       		.uleb128 0x34
 2048 00f4 00       		.byte	0
 2049 00f5 03       		.uleb128 0x3
 2050 00f6 0E       		.uleb128 0xe
 2051 00f7 3A       		.uleb128 0x3a
 2052 00f8 0B       		.uleb128 0xb
 2053 00f9 3B       		.uleb128 0x3b
 2054 00fa 05       		.uleb128 0x5
 2055 00fb 49       		.uleb128 0x49
 2056 00fc 13       		.uleb128 0x13
 2057 00fd 02       		.uleb128 0x2
 2058 00fe 18       		.uleb128 0x18
 2059 00ff 00       		.byte	0
 2060 0100 00       		.byte	0
 2061 0101 11       		.uleb128 0x11
 2062 0102 2E       		.uleb128 0x2e
 2063 0103 01       		.byte	0x1
 2064 0104 3F       		.uleb128 0x3f
 2065 0105 19       		.uleb128 0x19
 2066 0106 03       		.uleb128 0x3
 2067 0107 0E       		.uleb128 0xe
 2068 0108 3A       		.uleb128 0x3a
 2069 0109 0B       		.uleb128 0xb
 2070 010a 3B       		.uleb128 0x3b
 2071 010b 05       		.uleb128 0x5
 2072 010c 27       		.uleb128 0x27
 2073 010d 19       		.uleb128 0x19
 2074 010e 49       		.uleb128 0x49
 2075 010f 13       		.uleb128 0x13
 2076 0110 11       		.uleb128 0x11
 2077 0111 01       		.uleb128 0x1
 2078 0112 12       		.uleb128 0x12
 2079 0113 06       		.uleb128 0x6
 2080 0114 40       		.uleb128 0x40
 2081 0115 18       		.uleb128 0x18
 2082 0116 9642     		.uleb128 0x2116
 2083 0118 19       		.uleb128 0x19
 2084 0119 01       		.uleb128 0x1
 2085 011a 13       		.uleb128 0x13
 2086 011b 00       		.byte	0
 2087 011c 00       		.byte	0
 2088 011d 12       		.uleb128 0x12
 2089 011e 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 52


 2090 011f 01       		.byte	0x1
 2091 0120 3F       		.uleb128 0x3f
 2092 0121 19       		.uleb128 0x19
 2093 0122 03       		.uleb128 0x3
 2094 0123 0E       		.uleb128 0xe
 2095 0124 3A       		.uleb128 0x3a
 2096 0125 0B       		.uleb128 0xb
 2097 0126 3B       		.uleb128 0x3b
 2098 0127 05       		.uleb128 0x5
 2099 0128 27       		.uleb128 0x27
 2100 0129 19       		.uleb128 0x19
 2101 012a 11       		.uleb128 0x11
 2102 012b 01       		.uleb128 0x1
 2103 012c 12       		.uleb128 0x12
 2104 012d 06       		.uleb128 0x6
 2105 012e 40       		.uleb128 0x40
 2106 012f 18       		.uleb128 0x18
 2107 0130 9742     		.uleb128 0x2117
 2108 0132 19       		.uleb128 0x19
 2109 0133 01       		.uleb128 0x1
 2110 0134 13       		.uleb128 0x13
 2111 0135 00       		.byte	0
 2112 0136 00       		.byte	0
 2113 0137 13       		.uleb128 0x13
 2114 0138 2E       		.uleb128 0x2e
 2115 0139 01       		.byte	0x1
 2116 013a 3F       		.uleb128 0x3f
 2117 013b 19       		.uleb128 0x19
 2118 013c 03       		.uleb128 0x3
 2119 013d 0E       		.uleb128 0xe
 2120 013e 3A       		.uleb128 0x3a
 2121 013f 0B       		.uleb128 0xb
 2122 0140 3B       		.uleb128 0x3b
 2123 0141 05       		.uleb128 0x5
 2124 0142 27       		.uleb128 0x27
 2125 0143 19       		.uleb128 0x19
 2126 0144 11       		.uleb128 0x11
 2127 0145 01       		.uleb128 0x1
 2128 0146 12       		.uleb128 0x12
 2129 0147 06       		.uleb128 0x6
 2130 0148 40       		.uleb128 0x40
 2131 0149 18       		.uleb128 0x18
 2132 014a 9642     		.uleb128 0x2116
 2133 014c 19       		.uleb128 0x19
 2134 014d 01       		.uleb128 0x1
 2135 014e 13       		.uleb128 0x13
 2136 014f 00       		.byte	0
 2137 0150 00       		.byte	0
 2138 0151 14       		.uleb128 0x14
 2139 0152 34       		.uleb128 0x34
 2140 0153 00       		.byte	0
 2141 0154 03       		.uleb128 0x3
 2142 0155 0E       		.uleb128 0xe
 2143 0156 3A       		.uleb128 0x3a
 2144 0157 0B       		.uleb128 0xb
 2145 0158 3B       		.uleb128 0x3b
 2146 0159 0B       		.uleb128 0xb
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 53


 2147 015a 49       		.uleb128 0x49
 2148 015b 13       		.uleb128 0x13
 2149 015c 3F       		.uleb128 0x3f
 2150 015d 19       		.uleb128 0x19
 2151 015e 02       		.uleb128 0x2
 2152 015f 18       		.uleb128 0x18
 2153 0160 00       		.byte	0
 2154 0161 00       		.byte	0
 2155 0162 00       		.byte	0
 2156              		.section	.debug_aranges,"",%progbits
 2157 0000 A4000000 		.4byte	0xa4
 2158 0004 0200     		.2byte	0x2
 2159 0006 00000000 		.4byte	.Ldebug_info0
 2160 000a 04       		.byte	0x4
 2161 000b 00       		.byte	0
 2162 000c 0000     		.2byte	0
 2163 000e 0000     		.2byte	0
 2164 0010 00000000 		.4byte	.LFB0
 2165 0014 24000000 		.4byte	.LFE0-.LFB0
 2166 0018 00000000 		.4byte	.LFB1
 2167 001c E8010000 		.4byte	.LFE1-.LFB1
 2168 0020 00000000 		.4byte	.LFB2
 2169 0024 20000000 		.4byte	.LFE2-.LFB2
 2170 0028 00000000 		.4byte	.LFB3
 2171 002c 18000000 		.4byte	.LFE3-.LFB3
 2172 0030 00000000 		.4byte	.LFB4
 2173 0034 1C000000 		.4byte	.LFE4-.LFB4
 2174 0038 00000000 		.4byte	.LFB5
 2175 003c 1C000000 		.4byte	.LFE5-.LFB5
 2176 0040 00000000 		.4byte	.LFB6
 2177 0044 48000000 		.4byte	.LFE6-.LFB6
 2178 0048 00000000 		.4byte	.LFB7
 2179 004c 44000000 		.4byte	.LFE7-.LFB7
 2180 0050 00000000 		.4byte	.LFB8
 2181 0054 1C000000 		.4byte	.LFE8-.LFB8
 2182 0058 00000000 		.4byte	.LFB9
 2183 005c 30000000 		.4byte	.LFE9-.LFB9
 2184 0060 00000000 		.4byte	.LFB10
 2185 0064 2C000000 		.4byte	.LFE10-.LFB10
 2186 0068 00000000 		.4byte	.LFB11
 2187 006c 1C000000 		.4byte	.LFE11-.LFB11
 2188 0070 00000000 		.4byte	.LFB12
 2189 0074 1C000000 		.4byte	.LFE12-.LFB12
 2190 0078 00000000 		.4byte	.LFB13
 2191 007c 30000000 		.4byte	.LFE13-.LFB13
 2192 0080 00000000 		.4byte	.LFB14
 2193 0084 2C000000 		.4byte	.LFE14-.LFB14
 2194 0088 00000000 		.4byte	.LFB15
 2195 008c A4000000 		.4byte	.LFE15-.LFB15
 2196 0090 00000000 		.4byte	.LFB16
 2197 0094 90000000 		.4byte	.LFE16-.LFB16
 2198 0098 00000000 		.4byte	.LFB17
 2199 009c 80000000 		.4byte	.LFE17-.LFB17
 2200 00a0 00000000 		.4byte	0
 2201 00a4 00000000 		.4byte	0
 2202              		.section	.debug_ranges,"",%progbits
 2203              	.Ldebug_ranges0:
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 54


 2204 0000 00000000 		.4byte	.LFB0
 2205 0004 24000000 		.4byte	.LFE0
 2206 0008 00000000 		.4byte	.LFB1
 2207 000c E8010000 		.4byte	.LFE1
 2208 0010 00000000 		.4byte	.LFB2
 2209 0014 20000000 		.4byte	.LFE2
 2210 0018 00000000 		.4byte	.LFB3
 2211 001c 18000000 		.4byte	.LFE3
 2212 0020 00000000 		.4byte	.LFB4
 2213 0024 1C000000 		.4byte	.LFE4
 2214 0028 00000000 		.4byte	.LFB5
 2215 002c 1C000000 		.4byte	.LFE5
 2216 0030 00000000 		.4byte	.LFB6
 2217 0034 48000000 		.4byte	.LFE6
 2218 0038 00000000 		.4byte	.LFB7
 2219 003c 44000000 		.4byte	.LFE7
 2220 0040 00000000 		.4byte	.LFB8
 2221 0044 1C000000 		.4byte	.LFE8
 2222 0048 00000000 		.4byte	.LFB9
 2223 004c 30000000 		.4byte	.LFE9
 2224 0050 00000000 		.4byte	.LFB10
 2225 0054 2C000000 		.4byte	.LFE10
 2226 0058 00000000 		.4byte	.LFB11
 2227 005c 1C000000 		.4byte	.LFE11
 2228 0060 00000000 		.4byte	.LFB12
 2229 0064 1C000000 		.4byte	.LFE12
 2230 0068 00000000 		.4byte	.LFB13
 2231 006c 30000000 		.4byte	.LFE13
 2232 0070 00000000 		.4byte	.LFB14
 2233 0074 2C000000 		.4byte	.LFE14
 2234 0078 00000000 		.4byte	.LFB15
 2235 007c A4000000 		.4byte	.LFE15
 2236 0080 00000000 		.4byte	.LFB16
 2237 0084 90000000 		.4byte	.LFE16
 2238 0088 00000000 		.4byte	.LFB17
 2239 008c 80000000 		.4byte	.LFE17
 2240 0090 00000000 		.4byte	0
 2241 0094 00000000 		.4byte	0
 2242              		.section	.debug_line,"",%progbits
 2243              	.Ldebug_line0:
 2244 0000 4A020000 		.section	.debug_str,"MS",%progbits,1
 2244      02004A00 
 2244      00000201 
 2244      FB0E0D00 
 2244      01010101 
 2245              	.LASF10:
 2246 0000 75696E74 		.ascii	"uint16\000"
 2246      313600
 2247              	.LASF48:
 2248 0007 61646347 		.ascii	"adcGain\000"
 2248      61696E00 
 2249              	.LASF23:
 2250 000f 636F756E 		.ascii	"counts\000"
 2250      747300
 2251              	.LASF47:
 2252 0016 4144435F 		.ascii	"ADC_SAR_SEQ_SetGain\000"
 2252      5341525F 
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 55


 2252      5345515F 
 2252      53657447 
 2252      61696E00 
 2253              	.LASF45:
 2254 002a 4144435F 		.ascii	"ADC_SAR_SEQ_SetOffset\000"
 2254      5341525F 
 2254      5345515F 
 2254      5365744F 
 2254      66667365 
 2255              	.LASF25:
 2256 0040 4144435F 		.ascii	"ADC_SAR_SEQ_Start\000"
 2256      5341525F 
 2256      5345515F 
 2256      53746172 
 2256      7400
 2257              	.LASF61:
 2258 0052 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_SEQ.c\000"
 2258      6E657261 
 2258      7465645F 
 2258      536F7572 
 2258      63655C50 
 2259              	.LASF7:
 2260 0079 6C6F6E67 		.ascii	"long long unsigned int\000"
 2260      206C6F6E 
 2260      6720756E 
 2260      7369676E 
 2260      65642069 
 2261              	.LASF58:
 2262 0090 4144435F 		.ascii	"ADC_SAR_SEQ_offset\000"
 2262      5341525F 
 2262      5345515F 
 2262      6F666673 
 2262      657400
 2263              	.LASF37:
 2264 00a3 4144435F 		.ascii	"ADC_SAR_SEQ_SetChanMask\000"
 2264      5341525F 
 2264      5345515F 
 2264      53657443 
 2264      68616E4D 
 2265              	.LASF6:
 2266 00bb 6C6F6E67 		.ascii	"long long int\000"
 2266      206C6F6E 
 2266      6720696E 
 2266      7400
 2267              	.LASF0:
 2268 00c9 7369676E 		.ascii	"signed char\000"
 2268      65642063 
 2268      68617200 
 2269              	.LASF60:
 2270 00d5 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2270      4320342E 
 2270      392E3320 
 2270      32303135 
 2270      30333033 
 2271 0108 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2271      20726576 
 2271      6973696F 
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 56


 2271      6E203232 
 2271      31323230 
 2272 013b 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects -fno-rtti -"
 2272      66756E63 
 2272      74696F6E 
 2272      2D736563 
 2272      74696F6E 
 2273 016e 666E6F2D 		.ascii	"fno-exceptions -funsigned-char -funsigned-bitfields"
 2273      65786365 
 2273      7074696F 
 2273      6E73202D 
 2273      66756E73 
 2274 01a1 202D6673 		.ascii	" -fshort-enums\000"
 2274      686F7274 
 2274      2D656E75 
 2274      6D7300
 2275              	.LASF13:
 2276 01b0 696E7433 		.ascii	"int32\000"
 2276      3200
 2277              	.LASF4:
 2278 01b6 6C6F6E67 		.ascii	"long int\000"
 2278      20696E74 
 2278      00
 2279              	.LASF9:
 2280 01bf 75696E74 		.ascii	"uint8\000"
 2280      3800
 2281              	.LASF29:
 2282 01c5 4144435F 		.ascii	"ADC_SAR_SEQ_StopConvert\000"
 2282      5341525F 
 2282      5345515F 
 2282      53746F70 
 2282      436F6E76 
 2283              	.LASF16:
 2284 01dd 646F7562 		.ascii	"double\000"
 2284      6C6500
 2285              	.LASF24:
 2286 01e4 4144435F 		.ascii	"ADC_SAR_SEQ_InputsPlacement\000"
 2286      5341525F 
 2286      5345515F 
 2286      496E7075 
 2286      7473506C 
 2287              	.LASF11:
 2288 0200 75696E74 		.ascii	"uint32\000"
 2288      333200
 2289              	.LASF38:
 2290 0207 6D61736B 		.ascii	"mask\000"
 2290      00
 2291              	.LASF33:
 2292 020c 7265744D 		.ascii	"retMode\000"
 2292      6F646500 
 2293              	.LASF8:
 2294 0214 756E7369 		.ascii	"unsigned int\000"
 2294      676E6564 
 2294      20696E74 
 2294      00
 2295              	.LASF52:
 2296 0221 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_uVolts\000"
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 57


 2296      5341525F 
 2296      5345515F 
 2296      436F756E 
 2296      7473546F 
 2297              	.LASF14:
 2298 023d 666C6F61 		.ascii	"float32\000"
 2298      74333200 
 2299              	.LASF53:
 2300 0245 75566F6C 		.ascii	"uVolts\000"
 2300      747300
 2301              	.LASF5:
 2302 024c 6C6F6E67 		.ascii	"long unsigned int\000"
 2302      20756E73 
 2302      69676E65 
 2302      6420696E 
 2302      7400
 2303              	.LASF55:
 2304 025e 766F6C74 		.ascii	"volts\000"
 2304      7300
 2305              	.LASF22:
 2306 0264 746D7052 		.ascii	"tmpRegVal\000"
 2306      65675661 
 2306      6C00
 2307              	.LASF3:
 2308 026e 73686F72 		.ascii	"short unsigned int\000"
 2308      7420756E 
 2308      7369676E 
 2308      65642069 
 2308      6E7400
 2309              	.LASF49:
 2310 0281 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_mVolts\000"
 2310      5341525F 
 2310      5345515F 
 2310      436F756E 
 2310      7473546F 
 2311              	.LASF39:
 2312 029d 4144435F 		.ascii	"ADC_SAR_SEQ_SetLowLimit\000"
 2312      5341525F 
 2312      5345515F 
 2312      5365744C 
 2312      6F774C69 
 2313              	.LASF19:
 2314 02b5 72656733 		.ascii	"reg32\000"
 2314      3200
 2315              	.LASF62:
 2316 02bb 453A5C50 		.ascii	"E:\\PSoC\\RosOnAStick\\RosOnAStick.cydsn\000"
 2316      536F435C 
 2316      526F734F 
 2316      6E415374 
 2316      69636B5C 
 2317              	.LASF20:
 2318 02e1 73697A65 		.ascii	"sizetype\000"
 2318      74797065 
 2318      00
 2319              	.LASF40:
 2320 02ea 6C6F774C 		.ascii	"lowLimit\000"
 2320      696D6974 
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 58


 2320      00
 2321              	.LASF44:
 2322 02f3 4144435F 		.ascii	"ADC_SAR_SEQ_SetSatMask\000"
 2322      5341525F 
 2322      5345515F 
 2322      53657453 
 2322      61744D61 
 2323              	.LASF17:
 2324 030a 696E7436 		.ascii	"int64\000"
 2324      3400
 2325              	.LASF27:
 2326 0310 4144435F 		.ascii	"ADC_SAR_SEQ_Stop\000"
 2326      5341525F 
 2326      5345515F 
 2326      53746F70 
 2326      00
 2327              	.LASF26:
 2328 0321 4144435F 		.ascii	"ADC_SAR_SEQ_Enable\000"
 2328      5341525F 
 2328      5345515F 
 2328      456E6162 
 2328      6C6500
 2329              	.LASF15:
 2330 0334 666C6F61 		.ascii	"float\000"
 2330      7400
 2331              	.LASF42:
 2332 033a 68696768 		.ascii	"highLimit\000"
 2332      4C696D69 
 2332      7400
 2333              	.LASF43:
 2334 0344 4144435F 		.ascii	"ADC_SAR_SEQ_SetLimitMask\000"
 2334      5341525F 
 2334      5345515F 
 2334      5365744C 
 2334      696D6974 
 2335              	.LASF1:
 2336 035d 756E7369 		.ascii	"unsigned char\000"
 2336      676E6564 
 2336      20636861 
 2336      7200
 2337              	.LASF2:
 2338 036b 73686F72 		.ascii	"short int\000"
 2338      7420696E 
 2338      7400
 2339              	.LASF31:
 2340 0375 4144435F 		.ascii	"ADC_SAR_SEQ_IsEndConversion\000"
 2340      5341525F 
 2340      5345515F 
 2340      4973456E 
 2340      64436F6E 
 2341              	.LASF51:
 2342 0391 6D566F6C 		.ascii	"mVolts\000"
 2342      747300
 2343              	.LASF59:
 2344 0398 4144435F 		.ascii	"ADC_SAR_SEQ_countsPer10Volt\000"
 2344      5341525F 
 2344      5345515F 
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 59


 2344      636F756E 
 2344      74735065 
 2345              	.LASF28:
 2346 03b4 4144435F 		.ascii	"ADC_SAR_SEQ_StartConvert\000"
 2346      5341525F 
 2346      5345515F 
 2346      53746172 
 2346      74436F6E 
 2347              	.LASF21:
 2348 03cd 63684E75 		.ascii	"chNum\000"
 2348      6D00
 2349              	.LASF56:
 2350 03d3 4144435F 		.ascii	"ADC_SAR_SEQ_channelsConfig\000"
 2350      5341525F 
 2350      5345515F 
 2350      6368616E 
 2350      6E656C73 
 2351              	.LASF57:
 2352 03ee 4144435F 		.ascii	"ADC_SAR_SEQ_initVar\000"
 2352      5341525F 
 2352      5345515F 
 2352      696E6974 
 2352      56617200 
 2353              	.LASF34:
 2354 0402 6368616E 		.ascii	"chan\000"
 2354      00
 2355              	.LASF18:
 2356 0407 63686172 		.ascii	"char\000"
 2356      00
 2357              	.LASF32:
 2358 040c 4144435F 		.ascii	"ADC_SAR_SEQ_GetResult16\000"
 2358      5341525F 
 2358      5345515F 
 2358      47657452 
 2358      6573756C 
 2359              	.LASF46:
 2360 0424 6F666673 		.ascii	"offset\000"
 2360      657400
 2361              	.LASF41:
 2362 042b 4144435F 		.ascii	"ADC_SAR_SEQ_SetHighLimit\000"
 2362      5341525F 
 2362      5345515F 
 2362      53657448 
 2362      6967684C 
 2363              	.LASF50:
 2364 0444 61646343 		.ascii	"adcCounts\000"
 2364      6F756E74 
 2364      7300
 2365              	.LASF30:
 2366 044e 73746174 		.ascii	"status\000"
 2366      757300
 2367              	.LASF12:
 2368 0455 696E7431 		.ascii	"int16\000"
 2368      3600
 2369              	.LASF36:
 2370 045b 4144435F 		.ascii	"ADC_SAR_SEQ_Init\000"
 2370      5341525F 
ARM GAS  C:\Users\Chuck\AppData\Local\Temp\cce1exVz.s 			page 60


 2370      5345515F 
 2370      496E6974 
 2370      00
 2371              	.LASF35:
 2372 046c 72657375 		.ascii	"result\000"
 2372      6C7400
 2373              	.LASF54:
 2374 0473 4144435F 		.ascii	"ADC_SAR_SEQ_CountsTo_Volts\000"
 2374      5341525F 
 2374      5345515F 
 2374      436F756E 
 2374      7473546F 
 2375              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
